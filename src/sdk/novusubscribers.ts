/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { topicsSubscribersAssign } from "../funcs/topicsSubscribersAssign.js";
import { topicsSubscribersRemove } from "../funcs/topicsSubscribersRemove.js";
import { topicsSubscribersRetrieve } from "../funcs/topicsSubscribersRetrieve.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class NovuSubscribers extends ClientSDK {
  /**
   * Subscribers addition
   *
   * @remarks
   * Add subscribers to a topic by key
   */
  async assign(
    addSubscribersRequestDto: components.AddSubscribersRequestDto,
    topicKey: string,
    options?: RequestOptions,
  ): Promise<operations.TopicsControllerAssignResponse> {
    return unwrapAsync(topicsSubscribersAssign(
      this,
      addSubscribersRequestDto,
      topicKey,
      options,
    ));
  }

  /**
   * Check topic subscriber
   *
   * @remarks
   * Check if a subscriber belongs to a certain topic
   */
  async retrieve(
    externalSubscriberId: string,
    topicKey: string,
    options?: RequestOptions,
  ): Promise<operations.TopicsControllerGetTopicSubscriberResponse> {
    return unwrapAsync(topicsSubscribersRetrieve(
      this,
      externalSubscriberId,
      topicKey,
      options,
    ));
  }

  /**
   * Subscribers removal
   *
   * @remarks
   * Remove subscribers from a topic
   */
  async remove(
    removeSubscribersRequestDto: components.RemoveSubscribersRequestDto,
    topicKey: string,
    options?: RequestOptions,
  ): Promise<operations.TopicsControllerRemoveSubscribersResponse | undefined> {
    return unwrapAsync(topicsSubscribersRemove(
      this,
      removeSubscribersRequestDto,
      topicKey,
      options,
    ));
  }
}
