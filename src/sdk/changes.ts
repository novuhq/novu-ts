/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { changesApply } from "../funcs/changesApply.js";
import { changesApplyBulk } from "../funcs/changesApplyBulk.js";
import { changesCount } from "../funcs/changesCount.js";
import { changesRetrieve } from "../funcs/changesRetrieve.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Changes extends ClientSDK {
    /**
     * Apply change
     */
    async apply(
        changeId: string,
        options?: RequestOptions
    ): Promise<Array<components.ChangeResponseDto>> {
        return unwrapAsync(changesApply(this, changeId, options));
    }

    /**
     * Apply changes
     */
    async applyBulk(
        request: components.BulkApplyChangeDto,
        options?: RequestOptions
    ): Promise<Array<components.ChangeResponseDto>> {
        return unwrapAsync(changesApplyBulk(this, request, options));
    }

    /**
     * Get changes count
     */
    async count(options?: RequestOptions): Promise<components.DataNumberDto> {
        return unwrapAsync(changesCount(this, options));
    }

    /**
     * Get changes
     */
    async retrieve(
        request: operations.ChangesControllerGetChangesRequest,
        options?: RequestOptions
    ): Promise<components.ChangesResponseDto> {
        return unwrapAsync(changesRetrieve(this, request, options));
    }
}
