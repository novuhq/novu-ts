/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

<<<<<<< Updated upstream
import { notificationsList } from "../funcs/notificationsList.js";
import { notificationsRetrieve } from "../funcs/notificationsRetrieve.js";
=======
import { notificationsGet } from "../funcs/notificationsGet.js";
import { notificationsList } from "../funcs/notificationsList.js";
>>>>>>> Stashed changes
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Stats } from "./stats.js";

export class Notifications extends ClientSDK {
  private _stats?: Stats;
  get stats(): Stats {
<<<<<<< Updated upstream
    return (this._stats ??= new Stats(this.options$));
  }

  /**
   * Get notifications
   */
  async list(
    request: operations.NotificationsControllerListNotificationsRequest,
    options?: RequestOptions,
  ): Promise<components.ActivitiesResponseDto> {
    return unwrapAsync(notificationsList(
      this,
      request,
=======
    return (this._stats ??= new Stats(this._options));
  }

  /**
   * Get notification
   */
  async get(
    notificationId: string,
    options?: RequestOptions,
  ): Promise<components.ActivityNotificationResponseDto> {
    return unwrapAsync(notificationsGet(
      this,
      notificationId,
>>>>>>> Stashed changes
      options,
    ));
  }

  /**
<<<<<<< Updated upstream
   * Get notification
   */
  async retrieve(
    notificationId: string,
    options?: RequestOptions,
  ): Promise<components.ActivityNotificationResponseDto> {
    return unwrapAsync(notificationsRetrieve(
      this,
      notificationId,
=======
   * Get notifications
   */
  async list(
    request: operations.NotificationsControllerListNotificationsRequest,
    options?: RequestOptions,
  ): Promise<components.ActivitiesResponseDto> {
    return unwrapAsync(notificationsList(
      this,
      request,
>>>>>>> Stashed changes
      options,
    ));
  }
}
