/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { subscribersPreferencesGet } from "../funcs/subscribersPreferencesGet.js";
import { subscribersPreferencesGetByLevel } from "../funcs/subscribersPreferencesGetByLevel.js";
import { subscribersPreferencesUpdate } from "../funcs/subscribersPreferencesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Preferences extends ClientSDK {
  /**
   * Get subscriber preferences
   */
  async get(
    subscriberId: string,
    includeInactiveChannels?: boolean | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersControllerListSubscriberPreferencesResponse
  > {
    return unwrapAsync(subscribersPreferencesGet(
      this,
      subscriberId,
      includeInactiveChannels,
      options,
    ));
  }

  /**
   * Get subscriber preferences by level
   */
  async getByLevel(
    request:
      operations.SubscribersControllerGetSubscriberPreferenceByLevelRequest,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersControllerGetSubscriberPreferenceByLevelResponse
  > {
    return unwrapAsync(subscribersPreferencesGetByLevel(
      this,
      request,
      options,
    ));
  }

  /**
   * Update subscriber preference
   */
  async update(
    request: operations.SubscribersControllerUpdateSubscriberPreferenceRequest,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersControllerUpdateSubscriberPreferenceResponse
  > {
    return unwrapAsync(subscribersPreferencesUpdate(
      this,
      request,
      options,
    ));
  }
}
