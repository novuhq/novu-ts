/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { subscribersPreferencesList } from "../funcs/subscribersPreferencesList.js";
import { subscribersPreferencesRetrieve } from "../funcs/subscribersPreferencesRetrieve.js";
import { subscribersPreferencesRetrieveByLevel } from "../funcs/subscribersPreferencesRetrieveByLevel.js";
import { subscribersPreferencesUpdate } from "../funcs/subscribersPreferencesUpdate.js";
import { subscribersPreferencesUpdateGlobal } from "../funcs/subscribersPreferencesUpdateGlobal.js";
import { subscribersPreferencesUpdateLegacy } from "../funcs/subscribersPreferencesUpdateLegacy.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Preferences extends ClientSDK {
  /**
   * Get subscriber preferences
   */
  async list(
    subscriberId: string,
    includeInactiveChannels?: boolean | undefined,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersV1ControllerListSubscriberPreferencesResponse
  > {
    return unwrapAsync(subscribersPreferencesList(
      this,
      subscriberId,
      includeInactiveChannels,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Update subscriber global preferences
   */
  async updateGlobal(
    updateSubscriberGlobalPreferencesRequestDto:
      components.UpdateSubscriberGlobalPreferencesRequestDto,
    subscriberId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse
  > {
    return unwrapAsync(subscribersPreferencesUpdateGlobal(
      this,
      updateSubscriberGlobalPreferencesRequestDto,
      subscriberId,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Get subscriber preferences by level
   */
  async retrieveByLevel(
    request:
      operations.SubscribersV1ControllerGetSubscriberPreferenceByLevelRequest,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersV1ControllerGetSubscriberPreferenceByLevelResponse
  > {
    return unwrapAsync(subscribersPreferencesRetrieveByLevel(
      this,
      request,
      options,
    ));
  }

  /**
   * Update subscriber preference
   */
  async updateLegacy(
    request:
      operations.SubscribersV1ControllerUpdateSubscriberPreferenceRequest,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersV1ControllerUpdateSubscriberPreferenceResponse
  > {
    return unwrapAsync(subscribersPreferencesUpdateLegacy(
      this,
      request,
      options,
    ));
  }

  /**
   * Get subscriber preferences
   *
   * @remarks
   * Get subscriber global and workflow specific preferences
   */
  async retrieve(
    subscriberId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.SubscribersControllerGetSubscriberPreferencesResponse> {
    return unwrapAsync(subscribersPreferencesRetrieve(
      this,
      subscriberId,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Update subscriber global or workflow specific preferences
   *
   * @remarks
   * Update subscriber global or workflow specific preferences
   */
  async update(
    patchSubscriberPreferencesDto: components.PatchSubscriberPreferencesDto,
    subscriberId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersControllerUpdateSubscriberPreferencesResponse
  > {
    return unwrapAsync(subscribersPreferencesUpdate(
      this,
      patchSubscriberPreferencesDto,
      subscriberId,
      idempotencyKey,
      options,
    ));
  }
}
