/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { subscribersPreferencesList } from "../funcs/subscribersPreferencesList.js";
import { subscribersPreferencesRetrieveByLevel } from "../funcs/subscribersPreferencesRetrieveByLevel.js";
import { subscribersPreferencesUpdate } from "../funcs/subscribersPreferencesUpdate.js";
import { subscribersPreferencesUpdateGlobal } from "../funcs/subscribersPreferencesUpdateGlobal.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Preferences extends ClientSDK {
  /**
   * Get subscriber preferences
   */
  async list(
    request: operations.SubscribersControllerListSubscriberPreferencesRequest,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersControllerListSubscriberPreferencesResponse
  > {
    return unwrapAsync(subscribersPreferencesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Update subscriber global preferences
   */
  async updateGlobal(
    request:
      operations.SubscribersControllerUpdateSubscriberGlobalPreferencesRequest,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersControllerUpdateSubscriberGlobalPreferencesResponse
  > {
    return unwrapAsync(subscribersPreferencesUpdateGlobal(
      this,
      request,
      options,
    ));
  }

  /**
   * Get subscriber preferences by level
   */
  async retrieveByLevel(
    request:
      operations.SubscribersControllerGetSubscriberPreferenceByLevelRequest,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersControllerGetSubscriberPreferenceByLevelResponse
  > {
    return unwrapAsync(subscribersPreferencesRetrieveByLevel(
      this,
      request,
      options,
    ));
  }

  /**
   * Update subscriber preference
   */
  async update(
    request: operations.SubscribersControllerUpdateSubscriberPreferenceRequest,
    options?: RequestOptions,
  ): Promise<
    operations.SubscribersControllerUpdateSubscriberPreferenceResponse
  > {
    return unwrapAsync(subscribersPreferencesUpdate(
      this,
      request,
      options,
    ));
  }
}
