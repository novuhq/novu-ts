/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { subscribersCreate } from "../funcs/subscribersCreate.js";
import { subscribersCreateBulk } from "../funcs/subscribersCreateBulk.js";
import { subscribersDelete } from "../funcs/subscribersDelete.js";
<<<<<<< Updated upstream
import { subscribersList } from "../funcs/subscribersList.js";
import { subscribersRetrieve } from "../funcs/subscribersRetrieve.js";
=======
import { subscribersGet } from "../funcs/subscribersGet.js";
import { subscribersGetAll } from "../funcs/subscribersGetAll.js";
>>>>>>> Stashed changes
import { subscribersUpdate } from "../funcs/subscribersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { Authentication } from "./authentication.js";
import { Credentials } from "./credentials.js";
import { NovuMessages } from "./novumessages.js";
<<<<<<< Updated upstream
import { NovuNotifications } from "./novunotifications.js";
=======
import { NovuSubscribersNotifications } from "./novusubscribersnotifications.js";
>>>>>>> Stashed changes
import { Preferences } from "./preferences.js";
import { Properties } from "./properties.js";

export class Subscribers extends ClientSDK {
  private _credentials?: Credentials;
  get credentials(): Credentials {
<<<<<<< Updated upstream
    return (this._credentials ??= new Credentials(this.options$));
=======
    return (this._credentials ??= new Credentials(this._options));
>>>>>>> Stashed changes
  }

  private _authentication?: Authentication;
  get authentication(): Authentication {
<<<<<<< Updated upstream
    return (this._authentication ??= new Authentication(this.options$));
=======
    return (this._authentication ??= new Authentication(this._options));
>>>>>>> Stashed changes
  }

  private _messages?: NovuMessages;
  get messages(): NovuMessages {
<<<<<<< Updated upstream
    return (this._messages ??= new NovuMessages(this.options$));
  }

  private _notifications?: NovuNotifications;
  get notifications(): NovuNotifications {
    return (this._notifications ??= new NovuNotifications(this.options$));
=======
    return (this._messages ??= new NovuMessages(this._options));
  }

  private _notifications?: NovuSubscribersNotifications;
  get notifications(): NovuSubscribersNotifications {
    return (this._notifications ??= new NovuSubscribersNotifications(
      this._options,
    ));
>>>>>>> Stashed changes
  }

  private _properties?: Properties;
  get properties(): Properties {
<<<<<<< Updated upstream
    return (this._properties ??= new Properties(this.options$));
=======
    return (this._properties ??= new Properties(this._options));
>>>>>>> Stashed changes
  }

  private _preferences?: Preferences;
  get preferences(): Preferences {
<<<<<<< Updated upstream
    return (this._preferences ??= new Preferences(this.options$));
=======
    return (this._preferences ??= new Preferences(this._options));
>>>>>>> Stashed changes
  }

  /**
   * Create subscriber
   *
   * @remarks
   * Creates a subscriber entity, in the Novu platform. The subscriber will be later used to receive notifications, and access notification feeds. Communication credentials such as email, phone number, and 3 rd party credentials i.e slack tokens could be later associated to this entity.
   */
  async create(
    request: components.CreateSubscriberRequestDto,
    options?: RequestOptions,
  ): Promise<components.SubscriberResponseDto> {
    return unwrapAsync(subscribersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk create subscribers
   *
   * @remarks
   *
   *       Using this endpoint you can create multiple subscribers at once, to avoid multiple calls to the API.
   *       The bulk API is limited to 500 subscribers per request.
   */
  async createBulk(
    request: components.BulkSubscriberCreateDto,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(subscribersCreateBulk(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete subscriber
   *
   * @remarks
   * Deletes a subscriber entity from the Novu platform
   */
  async delete(
    subscriberId: string,
    options?: RequestOptions,
  ): Promise<components.DeleteSubscriberResponseDto> {
    return unwrapAsync(subscribersDelete(
      this,
      subscriberId,
      options,
    ));
  }

  /**
<<<<<<< Updated upstream
=======
   * Get subscriber
   *
   * @remarks
   * Get subscriber by your internal id used to identify the subscriber
   */
  async get(
    subscriberId: string,
    includeTopics?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.SubscriberResponseDto> {
    return unwrapAsync(subscribersGet(
      this,
      subscriberId,
      includeTopics,
      options,
    ));
  }

  /**
>>>>>>> Stashed changes
   * Get subscribers
   *
   * @remarks
   * Returns a list of subscribers, could paginated using the `page` and `limit` query parameter
   */
<<<<<<< Updated upstream
  async list(
=======
  async getAll(
>>>>>>> Stashed changes
    page?: number | undefined,
    limit?: number | undefined,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.SubscribersControllerListSubscribersResponse>
  > {
<<<<<<< Updated upstream
    return unwrapResultIterator(subscribersList(
=======
    return unwrapResultIterator(subscribersGetAll(
>>>>>>> Stashed changes
      this,
      page,
      limit,
      options,
    ));
  }

  /**
<<<<<<< Updated upstream
   * Get subscriber
   *
   * @remarks
   * Get subscriber by your internal id used to identify the subscriber
   */
  async retrieve(
    subscriberId: string,
    options?: RequestOptions,
  ): Promise<components.SubscriberResponseDto> {
    return unwrapAsync(subscribersRetrieve(
      this,
      subscriberId,
      options,
    ));
  }

  /**
=======
>>>>>>> Stashed changes
   * Update subscriber
   *
   * @remarks
   * Used to update the subscriber entity with new information
   */
  async update(
<<<<<<< Updated upstream
    subscriberId: string,
    updateSubscriberRequestDto: components.UpdateSubscriberRequestDto,
=======
    updateSubscriberRequestDto: components.UpdateSubscriberRequestDto,
    subscriberId: string,
>>>>>>> Stashed changes
    options?: RequestOptions,
  ): Promise<components.SubscriberResponseDto> {
    return unwrapAsync(subscribersUpdate(
      this,
<<<<<<< Updated upstream
      subscriberId,
      updateSubscriberRequestDto,
=======
      updateSubscriberRequestDto,
      subscriberId,
>>>>>>> Stashed changes
      options,
    ));
  }
}
