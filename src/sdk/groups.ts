/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { translationsGroupsDelete } from "../funcs/translationsGroupsDelete.js";
import { translationsGroupsRetrieve } from "../funcs/translationsGroupsRetrieve.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Groups extends ClientSDK {
  /**
   * Delete translation group
   *
   * @remarks
   * Delete an entire translation group and all its translations
   */
  async delete(
    resourceType: operations.ResourceType,
    resourceId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(translationsGroupsDelete(
      this,
      resourceType,
      resourceId,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Get translation group
   *
   * @remarks
   * Retrieves a single translation group by resourceId and resourceType
   */
  async retrieve(
    resourceType:
      operations.TranslationControllerGetTranslationGroupEndpointPathParamResourceType,
    resourceId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.TranslationGroupDto> {
    return unwrapAsync(translationsGroupsRetrieve(
      this,
      resourceType,
      resourceId,
      idempotencyKey,
      options,
    ));
  }
}
