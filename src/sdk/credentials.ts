/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { subscribersCredentialsAppend } from "../funcs/subscribersCredentialsAppend.js";
import { subscribersCredentialsDelete } from "../funcs/subscribersCredentialsDelete.js";
import { subscribersCredentialsUpdate } from "../funcs/subscribersCredentialsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Credentials extends ClientSDK {
  /**
   * Update subscriber credentials
   *
   * @remarks
   * Subscriber credentials associated to the delivery methods such as slack and push tokens.
   */
  async update(
    updateSubscriberChannelRequestDto:
      components.UpdateSubscriberChannelRequestDto,
    subscriberId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.SubscribersControllerUpdateSubscriberChannelResponse> {
    return unwrapAsync(subscribersCredentialsUpdate(
      this,
      updateSubscriberChannelRequestDto,
      subscriberId,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Modify subscriber credentials
   *
   * @remarks
   * Subscriber credentials associated to the delivery methods such as slack and push tokens.
   *     This endpoint appends provided credentials and deviceTokens to the existing ones.
   */
  async append(
    updateSubscriberChannelRequestDto:
      components.UpdateSubscriberChannelRequestDto,
    subscriberId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.SubscribersControllerModifySubscriberChannelResponse> {
    return unwrapAsync(subscribersCredentialsAppend(
      this,
      updateSubscriberChannelRequestDto,
      subscriberId,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Delete subscriber credentials by providerId
   *
   * @remarks
   * Delete subscriber credentials such as slack and expo tokens.
   */
  async delete(
    subscriberId: string,
    providerId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<
    | operations.SubscribersControllerDeleteSubscriberCredentialsResponse
    | undefined
  > {
    return unwrapAsync(subscribersCredentialsDelete(
      this,
      subscriberId,
      providerId,
      idempotencyKey,
      options,
    ));
  }
}
