/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { translationsCreate } from "../funcs/translationsCreate.js";
import { translationsDelete } from "../funcs/translationsDelete.js";
import { translationsRetrieve } from "../funcs/translationsRetrieve.js";
import { translationsUpload } from "../funcs/translationsUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Groups } from "./groups.js";
import { Master } from "./master.js";

export class Translations extends ClientSDK {
  private _groups?: Groups;
  get groups(): Groups {
    return (this._groups ??= new Groups(this._options));
  }

  private _master?: Master;
  get master(): Master {
    return (this._master ??= new Master(this._options));
  }

  /**
   * Create or update translation
   *
   * @remarks
   * Create or update a translation for a specific workflow and locale
   */
  async create(
    createTranslationRequestDto: components.CreateTranslationRequestDto,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.TranslationResponseDto> {
    return unwrapAsync(translationsCreate(
      this,
      createTranslationRequestDto,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Get single translation
   *
   * @remarks
   * Get a specific translation by resource type, resource ID and locale
   */
  async retrieve(
    request: operations.TranslationControllerGetSingleTranslationRequest,
    options?: RequestOptions,
  ): Promise<components.TranslationResponseDto> {
    return unwrapAsync(translationsRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete translation
   *
   * @remarks
   * Delete a specific translation by resource type, resource ID and locale
   */
  async delete(
    request: operations.TranslationControllerDeleteTranslationEndpointRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(translationsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload translation files
   *
   * @remarks
   * Upload one or more JSON translation files for a specific workflow. The file name must be the locale, e.g. en_US.json
   */
  async upload(
    uploadTranslationsRequestDto: components.UploadTranslationsRequestDto,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.UploadTranslationsResponseDto> {
    return unwrapAsync(translationsUpload(
      this,
      uploadTranslationsRequestDto,
      idempotencyKey,
      options,
    ));
  }
}
