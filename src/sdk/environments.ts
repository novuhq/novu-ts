/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

<<<<<<< Updated upstream
import { environmentsList } from "../funcs/environmentsList.js";
import { environmentsRetrieve } from "../funcs/environmentsRetrieve.js";
=======
import { environmentsGetAll } from "../funcs/environmentsGetAll.js";
import { environmentsGetCurrent } from "../funcs/environmentsGetCurrent.js";
>>>>>>> Stashed changes
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { ApiKeys } from "./apikeys.js";

export class Environments extends ClientSDK {
  private _apiKeys?: ApiKeys;
  get apiKeys(): ApiKeys {
<<<<<<< Updated upstream
    return (this._apiKeys ??= new ApiKeys(this.options$));
=======
    return (this._apiKeys ??= new ApiKeys(this._options));
>>>>>>> Stashed changes
  }

  /**
   * Get environments
   */
<<<<<<< Updated upstream
  async list(
    options?: RequestOptions,
  ): Promise<Array<components.EnvironmentResponseDto>> {
    return unwrapAsync(environmentsList(
=======
  async getAll(
    options?: RequestOptions,
  ): Promise<Array<components.EnvironmentResponseDto>> {
    return unwrapAsync(environmentsGetAll(
>>>>>>> Stashed changes
      this,
      options,
    ));
  }

  /**
   * Get current environment
   */
<<<<<<< Updated upstream
  async retrieve(
    options?: RequestOptions,
  ): Promise<components.EnvironmentResponseDto> {
    return unwrapAsync(environmentsRetrieve(
=======
  async getCurrent(
    options?: RequestOptions,
  ): Promise<components.EnvironmentResponseDto> {
    return unwrapAsync(environmentsGetCurrent(
>>>>>>> Stashed changes
      this,
      options,
    ));
  }
}
