/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workflowGroupsCreate } from "../funcs/workflowGroupsCreate.js";
import { workflowGroupsDelete } from "../funcs/workflowGroupsDelete.js";
<<<<<<< Updated upstream
import { workflowGroupsList } from "../funcs/workflowGroupsList.js";
import { workflowGroupsRetrieve } from "../funcs/workflowGroupsRetrieve.js";
=======
import { workflowGroupsGet } from "../funcs/workflowGroupsGet.js";
import { workflowGroupsList } from "../funcs/workflowGroupsList.js";
>>>>>>> Stashed changes
import { workflowGroupsUpdate } from "../funcs/workflowGroupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class WorkflowGroups extends ClientSDK {
  /**
   * Create workflow group
   *
   * @remarks
   * workflow group was previously named notification group
   */
  async create(
    request: components.CreateNotificationGroupRequestDto,
    options?: RequestOptions,
  ): Promise<components.NotificationGroupResponseDto> {
    return unwrapAsync(workflowGroupsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete workflow group
   *
   * @remarks
   * workflow group was previously named notification group
   */
  async delete(
    id: string,
    options?: RequestOptions,
  ): Promise<components.DeleteNotificationGroupResponseDto> {
    return unwrapAsync(workflowGroupsDelete(
      this,
      id,
      options,
    ));
  }

  /**
<<<<<<< Updated upstream
   * Get workflow groups
=======
   * Get workflow group
>>>>>>> Stashed changes
   *
   * @remarks
   * workflow group was previously named notification group
   */
<<<<<<< Updated upstream
  async list(
    options?: RequestOptions,
  ): Promise<Array<components.NotificationGroupResponseDto>> {
    return unwrapAsync(workflowGroupsList(
      this,
=======
  async get(
    id: string,
    options?: RequestOptions,
  ): Promise<components.NotificationGroupResponseDto> {
    return unwrapAsync(workflowGroupsGet(
      this,
      id,
>>>>>>> Stashed changes
      options,
    ));
  }

  /**
<<<<<<< Updated upstream
   * Get workflow group
=======
   * Get workflow groups
>>>>>>> Stashed changes
   *
   * @remarks
   * workflow group was previously named notification group
   */
<<<<<<< Updated upstream
  async retrieve(
    id: string,
    options?: RequestOptions,
  ): Promise<components.NotificationGroupResponseDto> {
    return unwrapAsync(workflowGroupsRetrieve(
      this,
      id,
=======
  async list(
    options?: RequestOptions,
  ): Promise<Array<components.NotificationGroupResponseDto>> {
    return unwrapAsync(workflowGroupsList(
      this,
>>>>>>> Stashed changes
      options,
    ));
  }

  /**
   * Update workflow group
   *
   * @remarks
   * workflow group was previously named notification group
   */
  async update(
<<<<<<< Updated upstream
    id: string,
    createNotificationGroupRequestDto:
      components.CreateNotificationGroupRequestDto,
=======
    createNotificationGroupRequestDto:
      components.CreateNotificationGroupRequestDto,
    id: string,
>>>>>>> Stashed changes
    options?: RequestOptions,
  ): Promise<components.NotificationGroupResponseDto> {
    return unwrapAsync(workflowGroupsUpdate(
      this,
<<<<<<< Updated upstream
      id,
      createNotificationGroupRequestDto,
=======
      createNotificationGroupRequestDto,
      id,
>>>>>>> Stashed changes
      options,
    ));
  }
}
