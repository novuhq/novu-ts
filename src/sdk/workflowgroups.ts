/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workflowGroupsCreate } from "../funcs/workflowGroupsCreate.js";
import { workflowGroupsDelete } from "../funcs/workflowGroupsDelete.js";
import { workflowGroupsList } from "../funcs/workflowGroupsList.js";
import { workflowGroupsRetrieve } from "../funcs/workflowGroupsRetrieve.js";
import { workflowGroupsUpdate } from "../funcs/workflowGroupsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class WorkflowGroups extends ClientSDK {
    /**
     * Create workflow group
     *
     * @remarks
     * workflow group was previously named notification group
     */
    async create(
        request: components.CreateNotificationGroupRequestDto,
        options?: RequestOptions
    ): Promise<components.NotificationGroupResponseDto> {
        return unwrapAsync(workflowGroupsCreate(this, request, options));
    }

    /**
     * Delete workflow group
     *
     * @remarks
     * workflow group was previously named notification group
     */
    async delete(
        id: string,
        options?: RequestOptions
    ): Promise<components.DeleteNotificationGroupResponseDto> {
        return unwrapAsync(workflowGroupsDelete(this, id, options));
    }

    /**
     * Get workflow groups
     *
     * @remarks
     * workflow group was previously named notification group
     */
    async list(options?: RequestOptions): Promise<Array<components.NotificationGroupResponseDto>> {
        return unwrapAsync(workflowGroupsList(this, options));
    }

    /**
     * Get workflow group
     *
     * @remarks
     * workflow group was previously named notification group
     */
    async retrieve(
        id: string,
        options?: RequestOptions
    ): Promise<components.NotificationGroupResponseDto> {
        return unwrapAsync(workflowGroupsRetrieve(this, id, options));
    }

    /**
     * Update workflow group
     *
     * @remarks
     * workflow group was previously named notification group
     */
    async update(
        id: string,
        createNotificationGroupRequestDto: components.CreateNotificationGroupRequestDto,
        options?: RequestOptions
    ): Promise<components.NotificationGroupResponseDto> {
        return unwrapAsync(
            workflowGroupsUpdate(this, id, createNotificationGroupRequestDto, options)
        );
    }
}
