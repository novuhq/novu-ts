/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { integrationsWebhooksRetrieve } from "../../funcs/integrationsWebhooksRetrieve.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  providerOrIntegrationId: z.string(),
  idempotencyKey: z.string().optional(),
};

export const tool$integrationsWebhooksRetrieve: ToolDefinition<typeof args> = {
  name: "integrations-webhooks-retrieve",
  description: `Get webhook support status for provider

Return the status of the webhook for this provider, if it is supported or if it is not based on a boolean value`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await integrationsWebhooksRetrieve(
      client,
      args.providerOrIntegrationId,
      args.idempotencyKey,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
