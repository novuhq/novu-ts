/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contextsList } from "../../funcs/contextsList.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.ContextsControllerListContextsRequest$inboundSchema,
};

export const tool$contextsList: ToolDefinition<typeof args> = {
  name: "contexts-list",
  description: `List all contexts

Retrieve a paginated list of all contexts, optionally filtered by type and key pattern.
      **type** and **id** are optional fields, if provided, only contexts with the matching type and id will be returned.
      **search** is an optional field, if provided, only contexts with the matching key pattern will be returned.
      Checkout all possible parameters in the query section below for more details`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await contextsList(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
