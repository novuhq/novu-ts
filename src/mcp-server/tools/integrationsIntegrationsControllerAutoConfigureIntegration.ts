/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { integrationsIntegrationsControllerAutoConfigureIntegration } from "../../funcs/integrationsIntegrationsControllerAutoConfigureIntegration.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  integrationId: z.string(),
  idempotencyKey: z.string().optional(),
};

export const tool$integrationsIntegrationsControllerAutoConfigureIntegration:
  ToolDefinition<typeof args> = {
    name: "integrations-integrations-controller-auto-configure-integration",
    description: `Auto-configure an integration for inbound webhooks

Auto-configure an integration by its unique key identifier **integrationId** for inbound webhook support. 
    This will automatically generate required webhook signing keys and configure webhook endpoints.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await integrationsIntegrationsControllerAutoConfigureIntegration(
          client,
          args.integrationId,
          args.idempotencyKey,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value.result;

      return formatResult(value, apiCall);
    },
  };
