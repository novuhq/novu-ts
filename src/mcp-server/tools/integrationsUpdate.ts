/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { integrationsUpdate } from "../../funcs/integrationsUpdate.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  updateIntegrationRequestDto:
    components.UpdateIntegrationRequestDto$inboundSchema,
  integrationId: z.string(),
  idempotencyKey: z.string().optional(),
};

export const tool$integrationsUpdate: ToolDefinition<typeof args> = {
  name: "integrations-update",
  description: `Update an integration

Update an integration by its unique key identifier **integrationId**. 
    Each provider supports different credentials, check the provider documentation for more details.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await integrationsUpdate(
      client,
      args.updateIntegrationRequestDto,
      args.integrationId,
      args.idempotencyKey,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
