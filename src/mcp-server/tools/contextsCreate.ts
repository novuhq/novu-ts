/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { contextsCreate } from "../../funcs/contextsCreate.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  createContextRequestDto: components.CreateContextRequestDto$inboundSchema,
  idempotencyKey: z.string().optional(),
};

export const tool$contextsCreate: ToolDefinition<typeof args> = {
  name: "contexts-create",
  description: `Create a context

Create a new context with the specified type, id, and data. Returns 409 if context already exists.
      **type** and **id** are required fields, **data** is optional, if the context already exists, it returns the 409 response`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await contextsCreate(
      client,
      args.createContextRequestDto,
      args.idempotencyKey,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
