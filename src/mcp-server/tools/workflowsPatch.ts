/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { workflowsPatch } from "../../funcs/workflowsPatch.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  patchWorkflowDto: components.PatchWorkflowDto$inboundSchema,
  workflowId: z.string(),
  idempotencyKey: z.string().optional(),
};

export const tool$workflowsPatch: ToolDefinition<typeof args> = {
  name: "workflows-patch",
  description: `Update a workflow

Partially updates a workflow by its unique identifier **workflowId**`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await workflowsPatch(
      client,
      args.patchWorkflowDto,
      args.workflowId,
      args.idempotencyKey,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
