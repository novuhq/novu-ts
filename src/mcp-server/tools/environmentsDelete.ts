/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { environmentsDelete } from "../../funcs/environmentsDelete.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  environmentId: z.string(),
  idempotencyKey: z.string().optional(),
};

export const tool$environmentsDelete: ToolDefinition<typeof args> = {
  name: "environments-delete",
  description: `Delete environment

Delete an environment by its unique identifier **environmentId**. 
    This action is irreversible and will remove the environment and all its associated data.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await environmentsDelete(
      client,
      args.environmentId,
      args.idempotencyKey,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    return formatResult(void 0, apiCall);
  },
};
