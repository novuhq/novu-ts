/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { subscribersCreate } from "../../funcs/subscribersCreate.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  createSubscriberRequestDto:
    components.CreateSubscriberRequestDto$inboundSchema,
  idempotencyKey: z.string().optional(),
};

export const tool$subscribersCreate: ToolDefinition<typeof args> = {
  name: "subscribers_create",
  description: `Create subscriber

Create subscriber with the given data`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await subscribersCreate(
      client,
      args.createSubscriberRequestDto,
      args.idempotencyKey,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
