/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type MessagePayloadValidationExceptionDto5 =
  | string
  | number
  | boolean
  | { [k: string]: any };

export type MessagePayloadValidationExceptionDto4 = {};

/**
 * Value that failed validation
 */
export type PayloadValidationExceptionDtoMessage =
  | MessagePayloadValidationExceptionDto4
  | string
  | number
  | boolean
  | Array<string | number | boolean | { [k: string]: any } | null>;

/**
 * The JSON schema that was used for validation
 */
export type Schema = {};

export type PayloadValidationExceptionDtoData = {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * Value that failed validation
   */
  message?:
    | MessagePayloadValidationExceptionDto4
    | string
    | number
    | boolean
    | Array<string | number | boolean | { [k: string]: any } | null>
    | null
    | undefined;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;
  /**
   * Type identifier for payload validation errors
   */
  type: string;
  /**
   * Array of detailed validation errors
   */
  errors: Array<components.PayloadValidationErrorDto>;
  /**
   * The JSON schema that was used for validation
   */
  schema?: Schema | undefined;
};

export class PayloadValidationExceptionDto extends Error {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;
  /**
   * Type identifier for payload validation errors
   */
  type: string;
  /**
   * Array of detailed validation errors
   */
  errors: Array<components.PayloadValidationErrorDto>;
  /**
   * The JSON schema that was used for validation
   */
  schema?: Schema | undefined;

  /** The original data that was passed to this error instance. */
  data$: PayloadValidationExceptionDtoData;

  constructor(err: PayloadValidationExceptionDtoData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.timestamp = err.timestamp;
    this.path = err.path;
    if (err.ctx != null) this.ctx = err.ctx;
    if (err.errorId != null) this.errorId = err.errorId;
    this.type = err.type;
    this.errors = err.errors;
    if (err.schema != null) this.schema = err.schema;

    this.name = "PayloadValidationExceptionDto";
  }
}

/** @internal */
export const MessagePayloadValidationExceptionDto5$inboundSchema: z.ZodType<
  MessagePayloadValidationExceptionDto5,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/** @internal */
export type MessagePayloadValidationExceptionDto5$Outbound =
  | string
  | number
  | boolean
  | { [k: string]: any };

/** @internal */
export const MessagePayloadValidationExceptionDto5$outboundSchema: z.ZodType<
  MessagePayloadValidationExceptionDto5$Outbound,
  z.ZodTypeDef,
  MessagePayloadValidationExceptionDto5
> = z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagePayloadValidationExceptionDto5$ {
  /** @deprecated use `MessagePayloadValidationExceptionDto5$inboundSchema` instead. */
  export const inboundSchema =
    MessagePayloadValidationExceptionDto5$inboundSchema;
  /** @deprecated use `MessagePayloadValidationExceptionDto5$outboundSchema` instead. */
  export const outboundSchema =
    MessagePayloadValidationExceptionDto5$outboundSchema;
  /** @deprecated use `MessagePayloadValidationExceptionDto5$Outbound` instead. */
  export type Outbound = MessagePayloadValidationExceptionDto5$Outbound;
}

export function messagePayloadValidationExceptionDto5ToJSON(
  messagePayloadValidationExceptionDto5: MessagePayloadValidationExceptionDto5,
): string {
  return JSON.stringify(
    MessagePayloadValidationExceptionDto5$outboundSchema.parse(
      messagePayloadValidationExceptionDto5,
    ),
  );
}

export function messagePayloadValidationExceptionDto5FromJSON(
  jsonString: string,
): SafeParseResult<MessagePayloadValidationExceptionDto5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MessagePayloadValidationExceptionDto5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagePayloadValidationExceptionDto5' from JSON`,
  );
}

/** @internal */
export const MessagePayloadValidationExceptionDto4$inboundSchema: z.ZodType<
  MessagePayloadValidationExceptionDto4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MessagePayloadValidationExceptionDto4$Outbound = {};

/** @internal */
export const MessagePayloadValidationExceptionDto4$outboundSchema: z.ZodType<
  MessagePayloadValidationExceptionDto4$Outbound,
  z.ZodTypeDef,
  MessagePayloadValidationExceptionDto4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagePayloadValidationExceptionDto4$ {
  /** @deprecated use `MessagePayloadValidationExceptionDto4$inboundSchema` instead. */
  export const inboundSchema =
    MessagePayloadValidationExceptionDto4$inboundSchema;
  /** @deprecated use `MessagePayloadValidationExceptionDto4$outboundSchema` instead. */
  export const outboundSchema =
    MessagePayloadValidationExceptionDto4$outboundSchema;
  /** @deprecated use `MessagePayloadValidationExceptionDto4$Outbound` instead. */
  export type Outbound = MessagePayloadValidationExceptionDto4$Outbound;
}

export function messagePayloadValidationExceptionDto4ToJSON(
  messagePayloadValidationExceptionDto4: MessagePayloadValidationExceptionDto4,
): string {
  return JSON.stringify(
    MessagePayloadValidationExceptionDto4$outboundSchema.parse(
      messagePayloadValidationExceptionDto4,
    ),
  );
}

export function messagePayloadValidationExceptionDto4FromJSON(
  jsonString: string,
): SafeParseResult<MessagePayloadValidationExceptionDto4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MessagePayloadValidationExceptionDto4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagePayloadValidationExceptionDto4' from JSON`,
  );
}

/** @internal */
export const PayloadValidationExceptionDtoMessage$inboundSchema: z.ZodType<
  PayloadValidationExceptionDtoMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => MessagePayloadValidationExceptionDto4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.nullable(
      z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
    ),
  ),
]);

/** @internal */
export type PayloadValidationExceptionDtoMessage$Outbound =
  | MessagePayloadValidationExceptionDto4$Outbound
  | string
  | number
  | boolean
  | Array<string | number | boolean | { [k: string]: any } | null>;

/** @internal */
export const PayloadValidationExceptionDtoMessage$outboundSchema: z.ZodType<
  PayloadValidationExceptionDtoMessage$Outbound,
  z.ZodTypeDef,
  PayloadValidationExceptionDtoMessage
> = z.union([
  z.lazy(() => MessagePayloadValidationExceptionDto4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.nullable(
      z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
    ),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadValidationExceptionDtoMessage$ {
  /** @deprecated use `PayloadValidationExceptionDtoMessage$inboundSchema` instead. */
  export const inboundSchema =
    PayloadValidationExceptionDtoMessage$inboundSchema;
  /** @deprecated use `PayloadValidationExceptionDtoMessage$outboundSchema` instead. */
  export const outboundSchema =
    PayloadValidationExceptionDtoMessage$outboundSchema;
  /** @deprecated use `PayloadValidationExceptionDtoMessage$Outbound` instead. */
  export type Outbound = PayloadValidationExceptionDtoMessage$Outbound;
}

export function payloadValidationExceptionDtoMessageToJSON(
  payloadValidationExceptionDtoMessage: PayloadValidationExceptionDtoMessage,
): string {
  return JSON.stringify(
    PayloadValidationExceptionDtoMessage$outboundSchema.parse(
      payloadValidationExceptionDtoMessage,
    ),
  );
}

export function payloadValidationExceptionDtoMessageFromJSON(
  jsonString: string,
): SafeParseResult<PayloadValidationExceptionDtoMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PayloadValidationExceptionDtoMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayloadValidationExceptionDtoMessage' from JSON`,
  );
}

/** @internal */
export const Schema$inboundSchema: z.ZodType<Schema, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Schema$Outbound = {};

/** @internal */
export const Schema$outboundSchema: z.ZodType<
  Schema$Outbound,
  z.ZodTypeDef,
  Schema
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schema$ {
  /** @deprecated use `Schema$inboundSchema` instead. */
  export const inboundSchema = Schema$inboundSchema;
  /** @deprecated use `Schema$outboundSchema` instead. */
  export const outboundSchema = Schema$outboundSchema;
  /** @deprecated use `Schema$Outbound` instead. */
  export type Outbound = Schema$Outbound;
}

export function schemaToJSON(schema: Schema): string {
  return JSON.stringify(Schema$outboundSchema.parse(schema));
}

export function schemaFromJSON(
  jsonString: string,
): SafeParseResult<Schema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Schema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Schema' from JSON`,
  );
}

/** @internal */
export const PayloadValidationExceptionDto$inboundSchema: z.ZodType<
  PayloadValidationExceptionDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number(),
  timestamp: z.string(),
  path: z.string(),
  message: z.nullable(
    z.union([
      z.lazy(() => MessagePayloadValidationExceptionDto4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(
        z.nullable(
          z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
        ),
      ),
    ]),
  ).optional(),
  ctx: z.record(z.any()).optional(),
  errorId: z.string().optional(),
  type: z.string(),
  errors: z.array(components.PayloadValidationErrorDto$inboundSchema),
  schema: z.lazy(() => Schema$inboundSchema).optional(),
})
  .transform((v) => {
    return new PayloadValidationExceptionDto(v);
  });

/** @internal */
export type PayloadValidationExceptionDto$Outbound = {
  statusCode: number;
  timestamp: string;
  path: string;
  message?:
    | MessagePayloadValidationExceptionDto4$Outbound
    | string
    | number
    | boolean
    | Array<string | number | boolean | { [k: string]: any } | null>
    | null
    | undefined;
  ctx?: { [k: string]: any } | undefined;
  errorId?: string | undefined;
  type: string;
  errors: Array<components.PayloadValidationErrorDto$Outbound>;
  schema?: Schema$Outbound | undefined;
};

/** @internal */
export const PayloadValidationExceptionDto$outboundSchema: z.ZodType<
  PayloadValidationExceptionDto$Outbound,
  z.ZodTypeDef,
  PayloadValidationExceptionDto
> = z.instanceof(PayloadValidationExceptionDto)
  .transform(v => v.data$)
  .pipe(z.object({
    statusCode: z.number(),
    timestamp: z.string(),
    path: z.string(),
    message: z.nullable(
      z.union([
        z.lazy(() => MessagePayloadValidationExceptionDto4$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.array(
          z.nullable(
            z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
          ),
        ),
      ]),
    ).optional(),
    ctx: z.record(z.any()).optional(),
    errorId: z.string().optional(),
    type: z.string(),
    errors: z.array(components.PayloadValidationErrorDto$outboundSchema),
    schema: z.lazy(() => Schema$outboundSchema).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadValidationExceptionDto$ {
  /** @deprecated use `PayloadValidationExceptionDto$inboundSchema` instead. */
  export const inboundSchema = PayloadValidationExceptionDto$inboundSchema;
  /** @deprecated use `PayloadValidationExceptionDto$outboundSchema` instead. */
  export const outboundSchema = PayloadValidationExceptionDto$outboundSchema;
  /** @deprecated use `PayloadValidationExceptionDto$Outbound` instead. */
  export type Outbound = PayloadValidationExceptionDto$Outbound;
}
