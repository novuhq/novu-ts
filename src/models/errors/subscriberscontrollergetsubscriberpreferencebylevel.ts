/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBodyData =
  {
    data?: components.ErrorDto | undefined;
  };

/**
 * Not Found
 */
export class SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$:
    SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBodyData;

  constructor(
    err:
      SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name =
      "SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody";
  }
}

/**
 * Bad Request
 */
export type SubscribersControllerGetSubscriberPreferenceByLevelResponseBodyData =
  {
    data?: components.ErrorDto | undefined;
  };

/**
 * Bad Request
 */
export class SubscribersControllerGetSubscriberPreferenceByLevelResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: SubscribersControllerGetSubscriberPreferenceByLevelResponseBodyData;

  constructor(
    err: SubscribersControllerGetSubscriberPreferenceByLevelResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name =
      "SubscribersControllerGetSubscriberPreferenceByLevelResponseBody";
  }
}

/** @internal */
export const SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$inboundSchema:
  z.ZodType<
    SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody(
        v,
      );
    });

/** @internal */
export type SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$Outbound =
  {
    data?: components.ErrorDto$Outbound | undefined;
  };

/** @internal */
export const SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$outboundSchema:
  z.ZodType<
    SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody
  > = z.instanceof(
    SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$ {
  /** @deprecated use `SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$inboundSchema;
  /** @deprecated use `SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$outboundSchema;
  /** @deprecated use `SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$Outbound` instead. */
  export type Outbound =
    SubscribersControllerGetSubscriberPreferenceByLevelSubscribersPreferencesResponseBody$Outbound;
}

/** @internal */
export const SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$inboundSchema:
  z.ZodType<
    SubscribersControllerGetSubscriberPreferenceByLevelResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new SubscribersControllerGetSubscriberPreferenceByLevelResponseBody(
        v,
      );
    });

/** @internal */
export type SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$Outbound =
  {
    data?: components.ErrorDto$Outbound | undefined;
  };

/** @internal */
export const SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$outboundSchema:
  z.ZodType<
    SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerGetSubscriberPreferenceByLevelResponseBody
  > = z.instanceof(
    SubscribersControllerGetSubscriberPreferenceByLevelResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$ {
  /** @deprecated use `SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$inboundSchema;
  /** @deprecated use `SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$outboundSchema;
  /** @deprecated use `SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$Outbound` instead. */
  export type Outbound =
    SubscribersControllerGetSubscriberPreferenceByLevelResponseBody$Outbound;
}
