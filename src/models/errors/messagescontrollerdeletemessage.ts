/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type MessagesControllerDeleteMessageMessagesResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Not Found
 */
export class MessagesControllerDeleteMessageMessagesResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: MessagesControllerDeleteMessageMessagesResponseBodyData;

  constructor(err: MessagesControllerDeleteMessageMessagesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "MessagesControllerDeleteMessageMessagesResponseBody";
  }
}

/**
 * Bad Request
 */
export type MessagesControllerDeleteMessageResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class MessagesControllerDeleteMessageResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: MessagesControllerDeleteMessageResponseBodyData;

  constructor(err: MessagesControllerDeleteMessageResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "MessagesControllerDeleteMessageResponseBody";
  }
}

/** @internal */
export const MessagesControllerDeleteMessageMessagesResponseBody$inboundSchema:
  z.ZodType<
    MessagesControllerDeleteMessageMessagesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new MessagesControllerDeleteMessageMessagesResponseBody(v);
    });

/** @internal */
export type MessagesControllerDeleteMessageMessagesResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const MessagesControllerDeleteMessageMessagesResponseBody$outboundSchema:
  z.ZodType<
    MessagesControllerDeleteMessageMessagesResponseBody$Outbound,
    z.ZodTypeDef,
    MessagesControllerDeleteMessageMessagesResponseBody
  > = z.instanceof(MessagesControllerDeleteMessageMessagesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesControllerDeleteMessageMessagesResponseBody$ {
  /** @deprecated use `MessagesControllerDeleteMessageMessagesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    MessagesControllerDeleteMessageMessagesResponseBody$inboundSchema;
  /** @deprecated use `MessagesControllerDeleteMessageMessagesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    MessagesControllerDeleteMessageMessagesResponseBody$outboundSchema;
  /** @deprecated use `MessagesControllerDeleteMessageMessagesResponseBody$Outbound` instead. */
  export type Outbound =
    MessagesControllerDeleteMessageMessagesResponseBody$Outbound;
}

/** @internal */
export const MessagesControllerDeleteMessageResponseBody$inboundSchema:
  z.ZodType<
    MessagesControllerDeleteMessageResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new MessagesControllerDeleteMessageResponseBody(v);
    });

/** @internal */
export type MessagesControllerDeleteMessageResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const MessagesControllerDeleteMessageResponseBody$outboundSchema:
  z.ZodType<
    MessagesControllerDeleteMessageResponseBody$Outbound,
    z.ZodTypeDef,
    MessagesControllerDeleteMessageResponseBody
  > = z.instanceof(MessagesControllerDeleteMessageResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesControllerDeleteMessageResponseBody$ {
  /** @deprecated use `MessagesControllerDeleteMessageResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    MessagesControllerDeleteMessageResponseBody$inboundSchema;
  /** @deprecated use `MessagesControllerDeleteMessageResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    MessagesControllerDeleteMessageResponseBody$outboundSchema;
  /** @deprecated use `MessagesControllerDeleteMessageResponseBody$Outbound` instead. */
  export type Outbound = MessagesControllerDeleteMessageResponseBody$Outbound;
}
