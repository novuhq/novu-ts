/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type TopicsControllerCreateTopicTopicsResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Not Found
 */
export class TopicsControllerCreateTopicTopicsResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: TopicsControllerCreateTopicTopicsResponseBodyData;

  constructor(err: TopicsControllerCreateTopicTopicsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "TopicsControllerCreateTopicTopicsResponseBody";
  }
}

/**
 * Bad Request
 */
export type TopicsControllerCreateTopicResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class TopicsControllerCreateTopicResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: TopicsControllerCreateTopicResponseBodyData;

  constructor(err: TopicsControllerCreateTopicResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "TopicsControllerCreateTopicResponseBody";
  }
}

/** @internal */
export const TopicsControllerCreateTopicTopicsResponseBody$inboundSchema:
  z.ZodType<
    TopicsControllerCreateTopicTopicsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new TopicsControllerCreateTopicTopicsResponseBody(v);
    });

/** @internal */
export type TopicsControllerCreateTopicTopicsResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const TopicsControllerCreateTopicTopicsResponseBody$outboundSchema:
  z.ZodType<
    TopicsControllerCreateTopicTopicsResponseBody$Outbound,
    z.ZodTypeDef,
    TopicsControllerCreateTopicTopicsResponseBody
  > = z.instanceof(TopicsControllerCreateTopicTopicsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerCreateTopicTopicsResponseBody$ {
  /** @deprecated use `TopicsControllerCreateTopicTopicsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerCreateTopicTopicsResponseBody$inboundSchema;
  /** @deprecated use `TopicsControllerCreateTopicTopicsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerCreateTopicTopicsResponseBody$outboundSchema;
  /** @deprecated use `TopicsControllerCreateTopicTopicsResponseBody$Outbound` instead. */
  export type Outbound = TopicsControllerCreateTopicTopicsResponseBody$Outbound;
}

/** @internal */
export const TopicsControllerCreateTopicResponseBody$inboundSchema: z.ZodType<
  TopicsControllerCreateTopicResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.ErrorDto$inboundSchema.optional(),
})
  .transform((v) => {
    return new TopicsControllerCreateTopicResponseBody(v);
  });

/** @internal */
export type TopicsControllerCreateTopicResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const TopicsControllerCreateTopicResponseBody$outboundSchema: z.ZodType<
  TopicsControllerCreateTopicResponseBody$Outbound,
  z.ZodTypeDef,
  TopicsControllerCreateTopicResponseBody
> = z.instanceof(TopicsControllerCreateTopicResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    data: components.ErrorDto$outboundSchema.optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerCreateTopicResponseBody$ {
  /** @deprecated use `TopicsControllerCreateTopicResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerCreateTopicResponseBody$inboundSchema;
  /** @deprecated use `TopicsControllerCreateTopicResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerCreateTopicResponseBody$outboundSchema;
  /** @deprecated use `TopicsControllerCreateTopicResponseBody$Outbound` instead. */
  export type Outbound = TopicsControllerCreateTopicResponseBody$Outbound;
}
