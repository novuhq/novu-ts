/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type EventsControllerTriggerResponseResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Not Found
 */
export class EventsControllerTriggerResponseResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: EventsControllerTriggerResponseResponseBodyData;

  constructor(err: EventsControllerTriggerResponseResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "EventsControllerTriggerResponseResponseBody";
  }
}

/**
 * Bad Request
 */
export type EventsControllerTriggerResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class EventsControllerTriggerResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: EventsControllerTriggerResponseBodyData;

  constructor(err: EventsControllerTriggerResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "EventsControllerTriggerResponseBody";
  }
}

/** @internal */
export const EventsControllerTriggerResponseResponseBody$inboundSchema:
  z.ZodType<
    EventsControllerTriggerResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new EventsControllerTriggerResponseResponseBody(v);
    });

/** @internal */
export type EventsControllerTriggerResponseResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const EventsControllerTriggerResponseResponseBody$outboundSchema:
  z.ZodType<
    EventsControllerTriggerResponseResponseBody$Outbound,
    z.ZodTypeDef,
    EventsControllerTriggerResponseResponseBody
  > = z.instanceof(EventsControllerTriggerResponseResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsControllerTriggerResponseResponseBody$ {
  /** @deprecated use `EventsControllerTriggerResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EventsControllerTriggerResponseResponseBody$inboundSchema;
  /** @deprecated use `EventsControllerTriggerResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EventsControllerTriggerResponseResponseBody$outboundSchema;
  /** @deprecated use `EventsControllerTriggerResponseResponseBody$Outbound` instead. */
  export type Outbound = EventsControllerTriggerResponseResponseBody$Outbound;
}

/** @internal */
export const EventsControllerTriggerResponseBody$inboundSchema: z.ZodType<
  EventsControllerTriggerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.ErrorDto$inboundSchema.optional(),
})
  .transform((v) => {
    return new EventsControllerTriggerResponseBody(v);
  });

/** @internal */
export type EventsControllerTriggerResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const EventsControllerTriggerResponseBody$outboundSchema: z.ZodType<
  EventsControllerTriggerResponseBody$Outbound,
  z.ZodTypeDef,
  EventsControllerTriggerResponseBody
> = z.instanceof(EventsControllerTriggerResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    data: components.ErrorDto$outboundSchema.optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsControllerTriggerResponseBody$ {
  /** @deprecated use `EventsControllerTriggerResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    EventsControllerTriggerResponseBody$inboundSchema;
  /** @deprecated use `EventsControllerTriggerResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    EventsControllerTriggerResponseBody$outboundSchema;
  /** @deprecated use `EventsControllerTriggerResponseBody$Outbound` instead. */
  export type Outbound = EventsControllerTriggerResponseBody$Outbound;
}
