/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type TopicsControllerListTopicsTopicsResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Not Found
 */
export class TopicsControllerListTopicsTopicsResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: TopicsControllerListTopicsTopicsResponseBodyData;

  constructor(err: TopicsControllerListTopicsTopicsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "TopicsControllerListTopicsTopicsResponseBody";
  }
}

/**
 * Bad Request
 */
export type TopicsControllerListTopicsResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class TopicsControllerListTopicsResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: TopicsControllerListTopicsResponseBodyData;

  constructor(err: TopicsControllerListTopicsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "TopicsControllerListTopicsResponseBody";
  }
}

/** @internal */
export const TopicsControllerListTopicsTopicsResponseBody$inboundSchema:
  z.ZodType<
    TopicsControllerListTopicsTopicsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new TopicsControllerListTopicsTopicsResponseBody(v);
    });

/** @internal */
export type TopicsControllerListTopicsTopicsResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const TopicsControllerListTopicsTopicsResponseBody$outboundSchema:
  z.ZodType<
    TopicsControllerListTopicsTopicsResponseBody$Outbound,
    z.ZodTypeDef,
    TopicsControllerListTopicsTopicsResponseBody
  > = z.instanceof(TopicsControllerListTopicsTopicsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerListTopicsTopicsResponseBody$ {
  /** @deprecated use `TopicsControllerListTopicsTopicsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerListTopicsTopicsResponseBody$inboundSchema;
  /** @deprecated use `TopicsControllerListTopicsTopicsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerListTopicsTopicsResponseBody$outboundSchema;
  /** @deprecated use `TopicsControllerListTopicsTopicsResponseBody$Outbound` instead. */
  export type Outbound = TopicsControllerListTopicsTopicsResponseBody$Outbound;
}

/** @internal */
export const TopicsControllerListTopicsResponseBody$inboundSchema: z.ZodType<
  TopicsControllerListTopicsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.ErrorDto$inboundSchema.optional(),
})
  .transform((v) => {
    return new TopicsControllerListTopicsResponseBody(v);
  });

/** @internal */
export type TopicsControllerListTopicsResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const TopicsControllerListTopicsResponseBody$outboundSchema: z.ZodType<
  TopicsControllerListTopicsResponseBody$Outbound,
  z.ZodTypeDef,
  TopicsControllerListTopicsResponseBody
> = z.instanceof(TopicsControllerListTopicsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    data: components.ErrorDto$outboundSchema.optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerListTopicsResponseBody$ {
  /** @deprecated use `TopicsControllerListTopicsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerListTopicsResponseBody$inboundSchema;
  /** @deprecated use `TopicsControllerListTopicsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerListTopicsResponseBody$outboundSchema;
  /** @deprecated use `TopicsControllerListTopicsResponseBody$Outbound` instead. */
  export type Outbound = TopicsControllerListTopicsResponseBody$Outbound;
}
