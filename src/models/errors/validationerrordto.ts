/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type Message5 = string | number | boolean | { [k: string]: any };

export type Message4 = {};

/**
 * Value that failed validation
 */
export type ValidationErrorDtoMessage =
  | Message4
  | string
  | number
  | boolean
  | Array<string | number | boolean | { [k: string]: any } | null>;

export type ValidationErrorDtoData = {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * Value that failed validation
   */
  message?:
    | Message4
    | string
    | number
    | boolean
    | Array<string | number | boolean | { [k: string]: any } | null>
    | null
    | undefined;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;
  /**
   * A record of validation errors keyed by field name
   */
  errors: { [k: string]: components.ConstraintValidation };
};

export class ValidationErrorDto extends Error {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;
  /**
   * A record of validation errors keyed by field name
   */
  errors: { [k: string]: components.ConstraintValidation };

  /** The original data that was passed to this error instance. */
  data$: ValidationErrorDtoData;

  constructor(err: ValidationErrorDtoData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.timestamp = err.timestamp;
    this.path = err.path;
    if (err.ctx != null) this.ctx = err.ctx;
    if (err.errorId != null) this.errorId = err.errorId;
    this.errors = err.errors;

    this.name = "ValidationErrorDto";
  }
}

/** @internal */
export const Message5$inboundSchema: z.ZodType<
  Message5,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/** @internal */
export type Message5$Outbound = string | number | boolean | {
  [k: string]: any;
};

/** @internal */
export const Message5$outboundSchema: z.ZodType<
  Message5$Outbound,
  z.ZodTypeDef,
  Message5
> = z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message5$ {
  /** @deprecated use `Message5$inboundSchema` instead. */
  export const inboundSchema = Message5$inboundSchema;
  /** @deprecated use `Message5$outboundSchema` instead. */
  export const outboundSchema = Message5$outboundSchema;
  /** @deprecated use `Message5$Outbound` instead. */
  export type Outbound = Message5$Outbound;
}

export function message5ToJSON(message5: Message5): string {
  return JSON.stringify(Message5$outboundSchema.parse(message5));
}

export function message5FromJSON(
  jsonString: string,
): SafeParseResult<Message5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message5' from JSON`,
  );
}

/** @internal */
export const Message4$inboundSchema: z.ZodType<
  Message4,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Message4$Outbound = {};

/** @internal */
export const Message4$outboundSchema: z.ZodType<
  Message4$Outbound,
  z.ZodTypeDef,
  Message4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message4$ {
  /** @deprecated use `Message4$inboundSchema` instead. */
  export const inboundSchema = Message4$inboundSchema;
  /** @deprecated use `Message4$outboundSchema` instead. */
  export const outboundSchema = Message4$outboundSchema;
  /** @deprecated use `Message4$Outbound` instead. */
  export type Outbound = Message4$Outbound;
}

export function message4ToJSON(message4: Message4): string {
  return JSON.stringify(Message4$outboundSchema.parse(message4));
}

export function message4FromJSON(
  jsonString: string,
): SafeParseResult<Message4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message4' from JSON`,
  );
}

/** @internal */
export const ValidationErrorDtoMessage$inboundSchema: z.ZodType<
  ValidationErrorDtoMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Message4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.nullable(
      z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
    ),
  ),
]);

/** @internal */
export type ValidationErrorDtoMessage$Outbound =
  | Message4$Outbound
  | string
  | number
  | boolean
  | Array<string | number | boolean | { [k: string]: any } | null>;

/** @internal */
export const ValidationErrorDtoMessage$outboundSchema: z.ZodType<
  ValidationErrorDtoMessage$Outbound,
  z.ZodTypeDef,
  ValidationErrorDtoMessage
> = z.union([
  z.lazy(() => Message4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.nullable(
      z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
    ),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidationErrorDtoMessage$ {
  /** @deprecated use `ValidationErrorDtoMessage$inboundSchema` instead. */
  export const inboundSchema = ValidationErrorDtoMessage$inboundSchema;
  /** @deprecated use `ValidationErrorDtoMessage$outboundSchema` instead. */
  export const outboundSchema = ValidationErrorDtoMessage$outboundSchema;
  /** @deprecated use `ValidationErrorDtoMessage$Outbound` instead. */
  export type Outbound = ValidationErrorDtoMessage$Outbound;
}

export function validationErrorDtoMessageToJSON(
  validationErrorDtoMessage: ValidationErrorDtoMessage,
): string {
  return JSON.stringify(
    ValidationErrorDtoMessage$outboundSchema.parse(validationErrorDtoMessage),
  );
}

export function validationErrorDtoMessageFromJSON(
  jsonString: string,
): SafeParseResult<ValidationErrorDtoMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidationErrorDtoMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidationErrorDtoMessage' from JSON`,
  );
}

/** @internal */
export const ValidationErrorDto$inboundSchema: z.ZodType<
  ValidationErrorDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number(),
  timestamp: z.string(),
  path: z.string(),
  message: z.nullable(
    z.union([
      z.lazy(() => Message4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(
        z.nullable(
          z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
        ),
      ),
    ]),
  ).optional(),
  ctx: z.record(z.any()).optional(),
  errorId: z.string().optional(),
  errors: z.record(components.ConstraintValidation$inboundSchema),
})
  .transform((v) => {
    return new ValidationErrorDto(v);
  });

/** @internal */
export type ValidationErrorDto$Outbound = {
  statusCode: number;
  timestamp: string;
  path: string;
  message?:
    | Message4$Outbound
    | string
    | number
    | boolean
    | Array<string | number | boolean | { [k: string]: any } | null>
    | null
    | undefined;
  ctx?: { [k: string]: any } | undefined;
  errorId?: string | undefined;
  errors: { [k: string]: components.ConstraintValidation$Outbound };
};

/** @internal */
export const ValidationErrorDto$outboundSchema: z.ZodType<
  ValidationErrorDto$Outbound,
  z.ZodTypeDef,
  ValidationErrorDto
> = z.instanceof(ValidationErrorDto)
  .transform(v => v.data$)
  .pipe(z.object({
    statusCode: z.number(),
    timestamp: z.string(),
    path: z.string(),
    message: z.nullable(
      z.union([
        z.lazy(() => Message4$outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
        z.array(
          z.nullable(
            z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
          ),
        ),
      ]),
    ).optional(),
    ctx: z.record(z.any()).optional(),
    errorId: z.string().optional(),
    errors: z.record(components.ConstraintValidation$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidationErrorDto$ {
  /** @deprecated use `ValidationErrorDto$inboundSchema` instead. */
  export const inboundSchema = ValidationErrorDto$inboundSchema;
  /** @deprecated use `ValidationErrorDto$outboundSchema` instead. */
  export const outboundSchema = ValidationErrorDto$outboundSchema;
  /** @deprecated use `ValidationErrorDto$Outbound` instead. */
  export type Outbound = ValidationErrorDto$Outbound;
}
