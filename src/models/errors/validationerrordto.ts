/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type Value =
  | string
  | number
  | boolean
  | { [k: string]: any }
  | Array<{ [k: string]: any }>;

export type Errors = {
  messages: Array<string>;
  value:
    | string
    | number
    | boolean
    | { [k: string]: any }
    | Array<{ [k: string]: any }>
    | null;
};

export type ValidationErrorDtoData = {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * A detailed error message.
   */
  message: string;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;
  /**
   * A record of validation errors keyed by field name
   */
  errors: { [k: string]: Errors };
};

export class ValidationErrorDto extends Error {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;
  /**
   * A record of validation errors keyed by field name
   */
  errors: { [k: string]: Errors };

  /** The original data that was passed to this error instance. */
  data$: ValidationErrorDtoData;

  constructor(err: ValidationErrorDtoData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.timestamp = err.timestamp;
    this.path = err.path;
    if (err.ctx != null) this.ctx = err.ctx;
    if (err.errorId != null) this.errorId = err.errorId;
    this.errors = err.errors;

    this.name = "ValidationErrorDto";
  }
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([
    z.string(),
    z.number(),
    z.boolean(),
    z.record(z.any()),
    z.array(z.record(z.any())),
  ]);

/** @internal */
export type Value$Outbound =
  | string
  | number
  | boolean
  | { [k: string]: any }
  | Array<{ [k: string]: any }>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.record(z.any()),
  z.array(z.record(z.any())),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z
  .object({
    messages: z.array(z.string()),
    value: z.nullable(
      z.union([
        z.string(),
        z.number(),
        z.boolean(),
        z.record(z.any()),
        z.array(z.record(z.any())),
      ]),
    ),
  });

/** @internal */
export type Errors$Outbound = {
  messages: Array<string>;
  value:
    | string
    | number
    | boolean
    | { [k: string]: any }
    | Array<{ [k: string]: any }>
    | null;
};

/** @internal */
export const Errors$outboundSchema: z.ZodType<
  Errors$Outbound,
  z.ZodTypeDef,
  Errors
> = z.object({
  messages: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.any()),
      z.array(z.record(z.any())),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
  /** @deprecated use `Errors$inboundSchema` instead. */
  export const inboundSchema = Errors$inboundSchema;
  /** @deprecated use `Errors$outboundSchema` instead. */
  export const outboundSchema = Errors$outboundSchema;
  /** @deprecated use `Errors$Outbound` instead. */
  export type Outbound = Errors$Outbound;
}

export function errorsToJSON(errors: Errors): string {
  return JSON.stringify(Errors$outboundSchema.parse(errors));
}

export function errorsFromJSON(
  jsonString: string,
): SafeParseResult<Errors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Errors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Errors' from JSON`,
  );
}

/** @internal */
export const ValidationErrorDto$inboundSchema: z.ZodType<
  ValidationErrorDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number(),
  timestamp: z.string(),
  path: z.string(),
  message: z.string(),
  ctx: z.record(z.any()).optional(),
  errorId: z.string().optional(),
  errors: z.record(z.lazy(() => Errors$inboundSchema)),
})
  .transform((v) => {
    return new ValidationErrorDto(v);
  });

/** @internal */
export type ValidationErrorDto$Outbound = {
  statusCode: number;
  timestamp: string;
  path: string;
  message: string;
  ctx?: { [k: string]: any } | undefined;
  errorId?: string | undefined;
  errors: { [k: string]: Errors$Outbound };
};

/** @internal */
export const ValidationErrorDto$outboundSchema: z.ZodType<
  ValidationErrorDto$Outbound,
  z.ZodTypeDef,
  ValidationErrorDto
> = z.instanceof(ValidationErrorDto)
  .transform(v => v.data$)
  .pipe(z.object({
    statusCode: z.number(),
    timestamp: z.string(),
    path: z.string(),
    message: z.string(),
    ctx: z.record(z.any()).optional(),
    errorId: z.string().optional(),
    errors: z.record(z.lazy(() => Errors$outboundSchema)),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidationErrorDto$ {
  /** @deprecated use `ValidationErrorDto$inboundSchema` instead. */
  export const inboundSchema = ValidationErrorDto$inboundSchema;
  /** @deprecated use `ValidationErrorDto$outboundSchema` instead. */
  export const outboundSchema = ValidationErrorDto$outboundSchema;
  /** @deprecated use `ValidationErrorDto$Outbound` instead. */
  export type Outbound = ValidationErrorDto$Outbound;
}
