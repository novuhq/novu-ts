/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type TopicsControllerAssignTopicsSubscribersResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Not Found
 */
export class TopicsControllerAssignTopicsSubscribersResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: TopicsControllerAssignTopicsSubscribersResponseBodyData;

  constructor(err: TopicsControllerAssignTopicsSubscribersResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "TopicsControllerAssignTopicsSubscribersResponseBody";
  }
}

/**
 * Bad Request
 */
export type TopicsControllerAssignResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class TopicsControllerAssignResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: TopicsControllerAssignResponseBodyData;

  constructor(err: TopicsControllerAssignResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "TopicsControllerAssignResponseBody";
  }
}

/** @internal */
export const TopicsControllerAssignTopicsSubscribersResponseBody$inboundSchema:
  z.ZodType<
    TopicsControllerAssignTopicsSubscribersResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new TopicsControllerAssignTopicsSubscribersResponseBody(v);
    });

/** @internal */
export type TopicsControllerAssignTopicsSubscribersResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const TopicsControllerAssignTopicsSubscribersResponseBody$outboundSchema:
  z.ZodType<
    TopicsControllerAssignTopicsSubscribersResponseBody$Outbound,
    z.ZodTypeDef,
    TopicsControllerAssignTopicsSubscribersResponseBody
  > = z.instanceof(TopicsControllerAssignTopicsSubscribersResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerAssignTopicsSubscribersResponseBody$ {
  /** @deprecated use `TopicsControllerAssignTopicsSubscribersResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerAssignTopicsSubscribersResponseBody$inboundSchema;
  /** @deprecated use `TopicsControllerAssignTopicsSubscribersResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerAssignTopicsSubscribersResponseBody$outboundSchema;
  /** @deprecated use `TopicsControllerAssignTopicsSubscribersResponseBody$Outbound` instead. */
  export type Outbound =
    TopicsControllerAssignTopicsSubscribersResponseBody$Outbound;
}

/** @internal */
export const TopicsControllerAssignResponseBody$inboundSchema: z.ZodType<
  TopicsControllerAssignResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.ErrorDto$inboundSchema.optional(),
})
  .transform((v) => {
    return new TopicsControllerAssignResponseBody(v);
  });

/** @internal */
export type TopicsControllerAssignResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const TopicsControllerAssignResponseBody$outboundSchema: z.ZodType<
  TopicsControllerAssignResponseBody$Outbound,
  z.ZodTypeDef,
  TopicsControllerAssignResponseBody
> = z.instanceof(TopicsControllerAssignResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    data: components.ErrorDto$outboundSchema.optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerAssignResponseBody$ {
  /** @deprecated use `TopicsControllerAssignResponseBody$inboundSchema` instead. */
  export const inboundSchema = TopicsControllerAssignResponseBody$inboundSchema;
  /** @deprecated use `TopicsControllerAssignResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerAssignResponseBody$outboundSchema;
  /** @deprecated use `TopicsControllerAssignResponseBody$Outbound` instead. */
  export type Outbound = TopicsControllerAssignResponseBody$Outbound;
}
