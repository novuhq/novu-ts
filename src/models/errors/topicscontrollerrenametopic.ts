/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type TopicsControllerRenameTopicTopicsResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Not Found
 */
export class TopicsControllerRenameTopicTopicsResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: TopicsControllerRenameTopicTopicsResponseBodyData;

  constructor(err: TopicsControllerRenameTopicTopicsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "TopicsControllerRenameTopicTopicsResponseBody";
  }
}

/**
 * Bad Request
 */
export type TopicsControllerRenameTopicResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class TopicsControllerRenameTopicResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: TopicsControllerRenameTopicResponseBodyData;

  constructor(err: TopicsControllerRenameTopicResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "TopicsControllerRenameTopicResponseBody";
  }
}

/** @internal */
export const TopicsControllerRenameTopicTopicsResponseBody$inboundSchema:
  z.ZodType<
    TopicsControllerRenameTopicTopicsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new TopicsControllerRenameTopicTopicsResponseBody(v);
    });

/** @internal */
export type TopicsControllerRenameTopicTopicsResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const TopicsControllerRenameTopicTopicsResponseBody$outboundSchema:
  z.ZodType<
    TopicsControllerRenameTopicTopicsResponseBody$Outbound,
    z.ZodTypeDef,
    TopicsControllerRenameTopicTopicsResponseBody
  > = z.instanceof(TopicsControllerRenameTopicTopicsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerRenameTopicTopicsResponseBody$ {
  /** @deprecated use `TopicsControllerRenameTopicTopicsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerRenameTopicTopicsResponseBody$inboundSchema;
  /** @deprecated use `TopicsControllerRenameTopicTopicsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerRenameTopicTopicsResponseBody$outboundSchema;
  /** @deprecated use `TopicsControllerRenameTopicTopicsResponseBody$Outbound` instead. */
  export type Outbound = TopicsControllerRenameTopicTopicsResponseBody$Outbound;
}

/** @internal */
export const TopicsControllerRenameTopicResponseBody$inboundSchema: z.ZodType<
  TopicsControllerRenameTopicResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.ErrorDto$inboundSchema.optional(),
})
  .transform((v) => {
    return new TopicsControllerRenameTopicResponseBody(v);
  });

/** @internal */
export type TopicsControllerRenameTopicResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const TopicsControllerRenameTopicResponseBody$outboundSchema: z.ZodType<
  TopicsControllerRenameTopicResponseBody$Outbound,
  z.ZodTypeDef,
  TopicsControllerRenameTopicResponseBody
> = z.instanceof(TopicsControllerRenameTopicResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    data: components.ErrorDto$outboundSchema.optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerRenameTopicResponseBody$ {
  /** @deprecated use `TopicsControllerRenameTopicResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerRenameTopicResponseBody$inboundSchema;
  /** @deprecated use `TopicsControllerRenameTopicResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerRenameTopicResponseBody$outboundSchema;
  /** @deprecated use `TopicsControllerRenameTopicResponseBody$Outbound` instead. */
  export type Outbound = TopicsControllerRenameTopicResponseBody$Outbound;
}
