/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBodyData =
  {
    data?: components.ErrorDto | undefined;
  };

/**
 * Not Found
 */
export class SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$:
    SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBodyData;

  constructor(
    err:
      SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name =
      "SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody";
  }
}

/**
 * Bad Request
 */
export type SubscribersControllerChatOauthCallbackResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class SubscribersControllerChatOauthCallbackResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: SubscribersControllerChatOauthCallbackResponseBodyData;

  constructor(err: SubscribersControllerChatOauthCallbackResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "SubscribersControllerChatOauthCallbackResponseBody";
  }
}

/** @internal */
export const SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$inboundSchema:
  z.ZodType<
    SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody(
        v,
      );
    });

/** @internal */
export type SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$Outbound =
  {
    data?: components.ErrorDto$Outbound | undefined;
  };

/** @internal */
export const SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$outboundSchema:
  z.ZodType<
    SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody
  > = z.instanceof(
    SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$ {
  /** @deprecated use `SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$inboundSchema;
  /** @deprecated use `SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$outboundSchema;
  /** @deprecated use `SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$Outbound` instead. */
  export type Outbound =
    SubscribersControllerChatOauthCallbackSubscribersAuthenticationResponseBody$Outbound;
}

/** @internal */
export const SubscribersControllerChatOauthCallbackResponseBody$inboundSchema:
  z.ZodType<
    SubscribersControllerChatOauthCallbackResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new SubscribersControllerChatOauthCallbackResponseBody(v);
    });

/** @internal */
export type SubscribersControllerChatOauthCallbackResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const SubscribersControllerChatOauthCallbackResponseBody$outboundSchema:
  z.ZodType<
    SubscribersControllerChatOauthCallbackResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerChatOauthCallbackResponseBody
  > = z.instanceof(SubscribersControllerChatOauthCallbackResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerChatOauthCallbackResponseBody$ {
  /** @deprecated use `SubscribersControllerChatOauthCallbackResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerChatOauthCallbackResponseBody$inboundSchema;
  /** @deprecated use `SubscribersControllerChatOauthCallbackResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerChatOauthCallbackResponseBody$outboundSchema;
  /** @deprecated use `SubscribersControllerChatOauthCallbackResponseBody$Outbound` instead. */
  export type Outbound =
    SubscribersControllerChatOauthCallbackResponseBody$Outbound;
}
