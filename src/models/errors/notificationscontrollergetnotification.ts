/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type NotificationsControllerGetNotificationNotificationsResponseBodyData =
  {
    data?: components.ErrorDto | undefined;
  };

/**
 * Not Found
 */
export class NotificationsControllerGetNotificationNotificationsResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotificationsControllerGetNotificationNotificationsResponseBodyData;

  constructor(
    err: NotificationsControllerGetNotificationNotificationsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name =
      "NotificationsControllerGetNotificationNotificationsResponseBody";
  }
}

/**
 * Bad Request
 */
export type NotificationsControllerGetNotificationResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class NotificationsControllerGetNotificationResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: NotificationsControllerGetNotificationResponseBodyData;

  constructor(err: NotificationsControllerGetNotificationResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "NotificationsControllerGetNotificationResponseBody";
  }
}

/** @internal */
export const NotificationsControllerGetNotificationNotificationsResponseBody$inboundSchema:
  z.ZodType<
    NotificationsControllerGetNotificationNotificationsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new NotificationsControllerGetNotificationNotificationsResponseBody(
        v,
      );
    });

/** @internal */
export type NotificationsControllerGetNotificationNotificationsResponseBody$Outbound =
  {
    data?: components.ErrorDto$Outbound | undefined;
  };

/** @internal */
export const NotificationsControllerGetNotificationNotificationsResponseBody$outboundSchema:
  z.ZodType<
    NotificationsControllerGetNotificationNotificationsResponseBody$Outbound,
    z.ZodTypeDef,
    NotificationsControllerGetNotificationNotificationsResponseBody
  > = z.instanceof(
    NotificationsControllerGetNotificationNotificationsResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationsControllerGetNotificationNotificationsResponseBody$ {
  /** @deprecated use `NotificationsControllerGetNotificationNotificationsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotificationsControllerGetNotificationNotificationsResponseBody$inboundSchema;
  /** @deprecated use `NotificationsControllerGetNotificationNotificationsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotificationsControllerGetNotificationNotificationsResponseBody$outboundSchema;
  /** @deprecated use `NotificationsControllerGetNotificationNotificationsResponseBody$Outbound` instead. */
  export type Outbound =
    NotificationsControllerGetNotificationNotificationsResponseBody$Outbound;
}

/** @internal */
export const NotificationsControllerGetNotificationResponseBody$inboundSchema:
  z.ZodType<
    NotificationsControllerGetNotificationResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new NotificationsControllerGetNotificationResponseBody(v);
    });

/** @internal */
export type NotificationsControllerGetNotificationResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const NotificationsControllerGetNotificationResponseBody$outboundSchema:
  z.ZodType<
    NotificationsControllerGetNotificationResponseBody$Outbound,
    z.ZodTypeDef,
    NotificationsControllerGetNotificationResponseBody
  > = z.instanceof(NotificationsControllerGetNotificationResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationsControllerGetNotificationResponseBody$ {
  /** @deprecated use `NotificationsControllerGetNotificationResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    NotificationsControllerGetNotificationResponseBody$inboundSchema;
  /** @deprecated use `NotificationsControllerGetNotificationResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    NotificationsControllerGetNotificationResponseBody$outboundSchema;
  /** @deprecated use `NotificationsControllerGetNotificationResponseBody$Outbound` instead. */
  export type Outbound =
    NotificationsControllerGetNotificationResponseBody$Outbound;
}
