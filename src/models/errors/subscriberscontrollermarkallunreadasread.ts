/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBodyData =
  {
    data?: components.ErrorDto | undefined;
  };

/**
 * Not Found
 */
export class SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$:
    SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBodyData;

  constructor(
    err:
      SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name =
      "SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody";
  }
}

/**
 * Bad Request
 */
export type SubscribersControllerMarkAllUnreadAsReadResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class SubscribersControllerMarkAllUnreadAsReadResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: SubscribersControllerMarkAllUnreadAsReadResponseBodyData;

  constructor(err: SubscribersControllerMarkAllUnreadAsReadResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "SubscribersControllerMarkAllUnreadAsReadResponseBody";
  }
}

/** @internal */
export const SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$inboundSchema:
  z.ZodType<
    SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody(
        v,
      );
    });

/** @internal */
export type SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$Outbound =
  {
    data?: components.ErrorDto$Outbound | undefined;
  };

/** @internal */
export const SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$outboundSchema:
  z.ZodType<
    SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody
  > = z.instanceof(
    SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$ {
  /** @deprecated use `SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$inboundSchema;
  /** @deprecated use `SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$outboundSchema;
  /** @deprecated use `SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$Outbound` instead. */
  export type Outbound =
    SubscribersControllerMarkAllUnreadAsReadSubscribersMessagesResponseBody$Outbound;
}

/** @internal */
export const SubscribersControllerMarkAllUnreadAsReadResponseBody$inboundSchema:
  z.ZodType<
    SubscribersControllerMarkAllUnreadAsReadResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new SubscribersControllerMarkAllUnreadAsReadResponseBody(v);
    });

/** @internal */
export type SubscribersControllerMarkAllUnreadAsReadResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const SubscribersControllerMarkAllUnreadAsReadResponseBody$outboundSchema:
  z.ZodType<
    SubscribersControllerMarkAllUnreadAsReadResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerMarkAllUnreadAsReadResponseBody
  > = z.instanceof(SubscribersControllerMarkAllUnreadAsReadResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerMarkAllUnreadAsReadResponseBody$ {
  /** @deprecated use `SubscribersControllerMarkAllUnreadAsReadResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerMarkAllUnreadAsReadResponseBody$inboundSchema;
  /** @deprecated use `SubscribersControllerMarkAllUnreadAsReadResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerMarkAllUnreadAsReadResponseBody$outboundSchema;
  /** @deprecated use `SubscribersControllerMarkAllUnreadAsReadResponseBody$Outbound` instead. */
  export type Outbound =
    SubscribersControllerMarkAllUnreadAsReadResponseBody$Outbound;
}
