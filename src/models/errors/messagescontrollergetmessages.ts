/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type MessagesControllerGetMessagesMessagesResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Not Found
 */
export class MessagesControllerGetMessagesMessagesResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: MessagesControllerGetMessagesMessagesResponseBodyData;

  constructor(err: MessagesControllerGetMessagesMessagesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "MessagesControllerGetMessagesMessagesResponseBody";
  }
}

/**
 * Bad Request
 */
export type MessagesControllerGetMessagesResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class MessagesControllerGetMessagesResponseBody extends Error {
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: MessagesControllerGetMessagesResponseBodyData;

  constructor(err: MessagesControllerGetMessagesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "MessagesControllerGetMessagesResponseBody";
  }
}

/** @internal */
export const MessagesControllerGetMessagesMessagesResponseBody$inboundSchema:
  z.ZodType<
    MessagesControllerGetMessagesMessagesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new MessagesControllerGetMessagesMessagesResponseBody(v);
    });

/** @internal */
export type MessagesControllerGetMessagesMessagesResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const MessagesControllerGetMessagesMessagesResponseBody$outboundSchema:
  z.ZodType<
    MessagesControllerGetMessagesMessagesResponseBody$Outbound,
    z.ZodTypeDef,
    MessagesControllerGetMessagesMessagesResponseBody
  > = z.instanceof(MessagesControllerGetMessagesMessagesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesControllerGetMessagesMessagesResponseBody$ {
  /** @deprecated use `MessagesControllerGetMessagesMessagesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    MessagesControllerGetMessagesMessagesResponseBody$inboundSchema;
  /** @deprecated use `MessagesControllerGetMessagesMessagesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    MessagesControllerGetMessagesMessagesResponseBody$outboundSchema;
  /** @deprecated use `MessagesControllerGetMessagesMessagesResponseBody$Outbound` instead. */
  export type Outbound =
    MessagesControllerGetMessagesMessagesResponseBody$Outbound;
}

/** @internal */
export const MessagesControllerGetMessagesResponseBody$inboundSchema: z.ZodType<
  MessagesControllerGetMessagesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: components.ErrorDto$inboundSchema.optional(),
})
  .transform((v) => {
    return new MessagesControllerGetMessagesResponseBody(v);
  });

/** @internal */
export type MessagesControllerGetMessagesResponseBody$Outbound = {
  data?: components.ErrorDto$Outbound | undefined;
};

/** @internal */
export const MessagesControllerGetMessagesResponseBody$outboundSchema:
  z.ZodType<
    MessagesControllerGetMessagesResponseBody$Outbound,
    z.ZodTypeDef,
    MessagesControllerGetMessagesResponseBody
  > = z.instanceof(MessagesControllerGetMessagesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesControllerGetMessagesResponseBody$ {
  /** @deprecated use `MessagesControllerGetMessagesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    MessagesControllerGetMessagesResponseBody$inboundSchema;
  /** @deprecated use `MessagesControllerGetMessagesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    MessagesControllerGetMessagesResponseBody$outboundSchema;
  /** @deprecated use `MessagesControllerGetMessagesResponseBody$Outbound` instead. */
  export type Outbound = MessagesControllerGetMessagesResponseBody$Outbound;
}
