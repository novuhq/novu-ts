/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBodyData =
  {
    data?: components.ErrorDto | undefined;
  };

/**
 * Not Found
 */
export class IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$:
    IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBodyData;

  constructor(
    err:
      IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name =
      "IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody";
  }
}

/**
 * Bad Request
 */
export type IntegrationsControllerGetWebhookSupportStatusResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class IntegrationsControllerGetWebhookSupportStatusResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: IntegrationsControllerGetWebhookSupportStatusResponseBodyData;

  constructor(
    err: IntegrationsControllerGetWebhookSupportStatusResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "IntegrationsControllerGetWebhookSupportStatusResponseBody";
  }
}

/** @internal */
export const IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$inboundSchema:
  z.ZodType<
    IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody(
        v,
      );
    });

/** @internal */
export type IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$Outbound =
  {
    data?: components.ErrorDto$Outbound | undefined;
  };

/** @internal */
export const IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$outboundSchema:
  z.ZodType<
    IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$Outbound,
    z.ZodTypeDef,
    IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody
  > = z.instanceof(
    IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$ {
  /** @deprecated use `IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$inboundSchema;
  /** @deprecated use `IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$outboundSchema;
  /** @deprecated use `IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$Outbound` instead. */
  export type Outbound =
    IntegrationsControllerGetWebhookSupportStatusIntegrationsWebhooksResponseBody$Outbound;
}

/** @internal */
export const IntegrationsControllerGetWebhookSupportStatusResponseBody$inboundSchema:
  z.ZodType<
    IntegrationsControllerGetWebhookSupportStatusResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new IntegrationsControllerGetWebhookSupportStatusResponseBody(v);
    });

/** @internal */
export type IntegrationsControllerGetWebhookSupportStatusResponseBody$Outbound =
  {
    data?: components.ErrorDto$Outbound | undefined;
  };

/** @internal */
export const IntegrationsControllerGetWebhookSupportStatusResponseBody$outboundSchema:
  z.ZodType<
    IntegrationsControllerGetWebhookSupportStatusResponseBody$Outbound,
    z.ZodTypeDef,
    IntegrationsControllerGetWebhookSupportStatusResponseBody
  > = z.instanceof(IntegrationsControllerGetWebhookSupportStatusResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsControllerGetWebhookSupportStatusResponseBody$ {
  /** @deprecated use `IntegrationsControllerGetWebhookSupportStatusResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsControllerGetWebhookSupportStatusResponseBody$inboundSchema;
  /** @deprecated use `IntegrationsControllerGetWebhookSupportStatusResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsControllerGetWebhookSupportStatusResponseBody$outboundSchema;
  /** @deprecated use `IntegrationsControllerGetWebhookSupportStatusResponseBody$Outbound` instead. */
  export type Outbound =
    IntegrationsControllerGetWebhookSupportStatusResponseBody$Outbound;
}
