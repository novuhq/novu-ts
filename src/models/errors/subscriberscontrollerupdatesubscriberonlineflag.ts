/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

/**
 * Not Found
 */
export type SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBodyData =
  {
    data?: components.ErrorDto | undefined;
  };

/**
 * Not Found
 */
export class SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$:
    SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBodyData;

  constructor(
    err:
      SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name =
      "SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody";
  }
}

/**
 * Bad Request
 */
export type SubscribersControllerUpdateSubscriberOnlineFlagResponseBodyData = {
  data?: components.ErrorDto | undefined;
};

/**
 * Bad Request
 */
export class SubscribersControllerUpdateSubscriberOnlineFlagResponseBody
  extends Error
{
  data?: components.ErrorDto | undefined;

  /** The original data that was passed to this error instance. */
  data$: SubscribersControllerUpdateSubscriberOnlineFlagResponseBodyData;

  constructor(
    err: SubscribersControllerUpdateSubscriberOnlineFlagResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.data != null) this.data = err.data;

    this.name = "SubscribersControllerUpdateSubscriberOnlineFlagResponseBody";
  }
}

/** @internal */
export const SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody(
        v,
      );
    });

/** @internal */
export type SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$Outbound =
  {
    data?: components.ErrorDto$Outbound | undefined;
  };

/** @internal */
export const SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody
  > = z.instanceof(
    SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$Outbound` instead. */
  export type Outbound =
    SubscribersControllerUpdateSubscriberOnlineFlagSubscribersPropertiesResponseBody$Outbound;
}

/** @internal */
export const SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberOnlineFlagResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    data: components.ErrorDto$inboundSchema.optional(),
  })
    .transform((v) => {
      return new SubscribersControllerUpdateSubscriberOnlineFlagResponseBody(v);
    });

/** @internal */
export type SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$Outbound =
  {
    data?: components.ErrorDto$Outbound | undefined;
  };

/** @internal */
export const SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberOnlineFlagResponseBody
  > = z.instanceof(SubscribersControllerUpdateSubscriberOnlineFlagResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      data: components.ErrorDto$outboundSchema.optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$Outbound` instead. */
  export type Outbound =
    SubscribersControllerUpdateSubscriberOnlineFlagResponseBody$Outbound;
}
