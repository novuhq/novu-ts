/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type ErrorDtoData = {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * A detailed error message.
   */
  message: string;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;
};

export class ErrorDto extends Error {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ErrorDtoData;

  constructor(err: ErrorDtoData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.statusCode = err.statusCode;
    this.timestamp = err.timestamp;
    this.path = err.path;
    if (err.ctx != null) this.ctx = err.ctx;
    if (err.errorId != null) this.errorId = err.errorId;

    this.name = "ErrorDto";
  }
}

/** @internal */
export const ErrorDto$inboundSchema: z.ZodType<
  ErrorDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number(),
  timestamp: z.string(),
  path: z.string(),
  message: z.string(),
  ctx: z.record(z.any()).optional(),
  errorId: z.string().optional(),
})
  .transform((v) => {
    return new ErrorDto(v);
  });

/** @internal */
export type ErrorDto$Outbound = {
  statusCode: number;
  timestamp: string;
  path: string;
  message: string;
  ctx?: { [k: string]: any } | undefined;
  errorId?: string | undefined;
};

/** @internal */
export const ErrorDto$outboundSchema: z.ZodType<
  ErrorDto$Outbound,
  z.ZodTypeDef,
  ErrorDto
> = z.instanceof(ErrorDto)
  .transform(v => v.data$)
  .pipe(z.object({
    statusCode: z.number(),
    timestamp: z.string(),
    path: z.string(),
    message: z.string(),
    ctx: z.record(z.any()).optional(),
    errorId: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorDto$ {
  /** @deprecated use `ErrorDto$inboundSchema` instead. */
  export const inboundSchema = ErrorDto$inboundSchema;
  /** @deprecated use `ErrorDto$outboundSchema` instead. */
  export const outboundSchema = ErrorDto$outboundSchema;
  /** @deprecated use `ErrorDto$Outbound` instead. */
  export type Outbound = ErrorDto$Outbound;
}
