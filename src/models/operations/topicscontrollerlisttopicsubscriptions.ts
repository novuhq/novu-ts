/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Direction of sorting
 */
export const TopicsControllerListTopicSubscriptionsQueryParamOrderDirection = {
  Asc: "ASC",
  Desc: "DESC",
} as const;
/**
 * Direction of sorting
 */
export type TopicsControllerListTopicSubscriptionsQueryParamOrderDirection =
  ClosedEnum<
    typeof TopicsControllerListTopicSubscriptionsQueryParamOrderDirection
  >;

export type TopicsControllerListTopicSubscriptionsRequest = {
  /**
   * The key identifier of the topic
   */
  topicKey: string;
  /**
   * Cursor for pagination indicating the starting point after which to fetch results.
   */
  after?: string | undefined;
  /**
   * Cursor for pagination indicating the ending point before which to fetch results.
   */
  before?: string | undefined;
  /**
   * Limit the number of items to return (max 100)
   */
  limit?: number | undefined;
  /**
   * Direction of sorting
   */
  orderDirection?:
    | TopicsControllerListTopicSubscriptionsQueryParamOrderDirection
    | undefined;
  /**
   * Field to order by
   */
  orderBy?: string | undefined;
  /**
   * Include cursor item in response
   */
  includeCursor?: boolean | undefined;
  /**
   * Filter by subscriber ID
   */
  subscriberId?: string | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type TopicsControllerListTopicSubscriptionsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ListTopicSubscriptionsResponseDto;
};

/** @internal */
export const TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$inboundSchema:
  z.ZodNativeEnum<
    typeof TopicsControllerListTopicSubscriptionsQueryParamOrderDirection
  > = z.nativeEnum(
    TopicsControllerListTopicSubscriptionsQueryParamOrderDirection,
  );

/** @internal */
export const TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$outboundSchema:
  z.ZodNativeEnum<
    typeof TopicsControllerListTopicSubscriptionsQueryParamOrderDirection
  > =
    TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$ {
  /** @deprecated use `TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$inboundSchema;
  /** @deprecated use `TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$outboundSchema;
}

/** @internal */
export const TopicsControllerListTopicSubscriptionsRequest$inboundSchema:
  z.ZodType<
    TopicsControllerListTopicSubscriptionsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    topicKey: z.string(),
    after: z.string().optional(),
    before: z.string().optional(),
    limit: z.number().optional(),
    orderDirection:
      TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$inboundSchema
        .optional(),
    orderBy: z.string().optional(),
    includeCursor: z.boolean().optional(),
    subscriberId: z.string().optional(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type TopicsControllerListTopicSubscriptionsRequest$Outbound = {
  topicKey: string;
  after?: string | undefined;
  before?: string | undefined;
  limit?: number | undefined;
  orderDirection?: string | undefined;
  orderBy?: string | undefined;
  includeCursor?: boolean | undefined;
  subscriberId?: string | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const TopicsControllerListTopicSubscriptionsRequest$outboundSchema:
  z.ZodType<
    TopicsControllerListTopicSubscriptionsRequest$Outbound,
    z.ZodTypeDef,
    TopicsControllerListTopicSubscriptionsRequest
  > = z.object({
    topicKey: z.string(),
    after: z.string().optional(),
    before: z.string().optional(),
    limit: z.number().optional(),
    orderDirection:
      TopicsControllerListTopicSubscriptionsQueryParamOrderDirection$outboundSchema
        .optional(),
    orderBy: z.string().optional(),
    includeCursor: z.boolean().optional(),
    subscriberId: z.string().optional(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerListTopicSubscriptionsRequest$ {
  /** @deprecated use `TopicsControllerListTopicSubscriptionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerListTopicSubscriptionsRequest$inboundSchema;
  /** @deprecated use `TopicsControllerListTopicSubscriptionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerListTopicSubscriptionsRequest$outboundSchema;
  /** @deprecated use `TopicsControllerListTopicSubscriptionsRequest$Outbound` instead. */
  export type Outbound = TopicsControllerListTopicSubscriptionsRequest$Outbound;
}

export function topicsControllerListTopicSubscriptionsRequestToJSON(
  topicsControllerListTopicSubscriptionsRequest:
    TopicsControllerListTopicSubscriptionsRequest,
): string {
  return JSON.stringify(
    TopicsControllerListTopicSubscriptionsRequest$outboundSchema.parse(
      topicsControllerListTopicSubscriptionsRequest,
    ),
  );
}

export function topicsControllerListTopicSubscriptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TopicsControllerListTopicSubscriptionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerListTopicSubscriptionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TopicsControllerListTopicSubscriptionsRequest' from JSON`,
  );
}

/** @internal */
export const TopicsControllerListTopicSubscriptionsResponse$inboundSchema:
  z.ZodType<
    TopicsControllerListTopicSubscriptionsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.ListTopicSubscriptionsResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type TopicsControllerListTopicSubscriptionsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ListTopicSubscriptionsResponseDto$Outbound;
};

/** @internal */
export const TopicsControllerListTopicSubscriptionsResponse$outboundSchema:
  z.ZodType<
    TopicsControllerListTopicSubscriptionsResponse$Outbound,
    z.ZodTypeDef,
    TopicsControllerListTopicSubscriptionsResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.ListTopicSubscriptionsResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerListTopicSubscriptionsResponse$ {
  /** @deprecated use `TopicsControllerListTopicSubscriptionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerListTopicSubscriptionsResponse$inboundSchema;
  /** @deprecated use `TopicsControllerListTopicSubscriptionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerListTopicSubscriptionsResponse$outboundSchema;
  /** @deprecated use `TopicsControllerListTopicSubscriptionsResponse$Outbound` instead. */
  export type Outbound =
    TopicsControllerListTopicSubscriptionsResponse$Outbound;
}

export function topicsControllerListTopicSubscriptionsResponseToJSON(
  topicsControllerListTopicSubscriptionsResponse:
    TopicsControllerListTopicSubscriptionsResponse,
): string {
  return JSON.stringify(
    TopicsControllerListTopicSubscriptionsResponse$outboundSchema.parse(
      topicsControllerListTopicSubscriptionsResponse,
    ),
  );
}

export function topicsControllerListTopicSubscriptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  TopicsControllerListTopicSubscriptionsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerListTopicSubscriptionsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TopicsControllerListTopicSubscriptionsResponse' from JSON`,
  );
}
