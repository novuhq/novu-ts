/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IntegrationsControllerAutoConfigureIntegrationRequest = {
  integrationId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type IntegrationsControllerAutoConfigureIntegrationResponse = {
  headers: { [k: string]: Array<string> };
  result: components.AutoConfigureIntegrationResponseDto;
};

/** @internal */
export const IntegrationsControllerAutoConfigureIntegrationRequest$inboundSchema:
  z.ZodType<
    IntegrationsControllerAutoConfigureIntegrationRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    integrationId: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type IntegrationsControllerAutoConfigureIntegrationRequest$Outbound = {
  integrationId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const IntegrationsControllerAutoConfigureIntegrationRequest$outboundSchema:
  z.ZodType<
    IntegrationsControllerAutoConfigureIntegrationRequest$Outbound,
    z.ZodTypeDef,
    IntegrationsControllerAutoConfigureIntegrationRequest
  > = z.object({
    integrationId: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsControllerAutoConfigureIntegrationRequest$ {
  /** @deprecated use `IntegrationsControllerAutoConfigureIntegrationRequest$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsControllerAutoConfigureIntegrationRequest$inboundSchema;
  /** @deprecated use `IntegrationsControllerAutoConfigureIntegrationRequest$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsControllerAutoConfigureIntegrationRequest$outboundSchema;
  /** @deprecated use `IntegrationsControllerAutoConfigureIntegrationRequest$Outbound` instead. */
  export type Outbound =
    IntegrationsControllerAutoConfigureIntegrationRequest$Outbound;
}

export function integrationsControllerAutoConfigureIntegrationRequestToJSON(
  integrationsControllerAutoConfigureIntegrationRequest:
    IntegrationsControllerAutoConfigureIntegrationRequest,
): string {
  return JSON.stringify(
    IntegrationsControllerAutoConfigureIntegrationRequest$outboundSchema.parse(
      integrationsControllerAutoConfigureIntegrationRequest,
    ),
  );
}

export function integrationsControllerAutoConfigureIntegrationRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  IntegrationsControllerAutoConfigureIntegrationRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationsControllerAutoConfigureIntegrationRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IntegrationsControllerAutoConfigureIntegrationRequest' from JSON`,
  );
}

/** @internal */
export const IntegrationsControllerAutoConfigureIntegrationResponse$inboundSchema:
  z.ZodType<
    IntegrationsControllerAutoConfigureIntegrationResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.AutoConfigureIntegrationResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type IntegrationsControllerAutoConfigureIntegrationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.AutoConfigureIntegrationResponseDto$Outbound;
};

/** @internal */
export const IntegrationsControllerAutoConfigureIntegrationResponse$outboundSchema:
  z.ZodType<
    IntegrationsControllerAutoConfigureIntegrationResponse$Outbound,
    z.ZodTypeDef,
    IntegrationsControllerAutoConfigureIntegrationResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.AutoConfigureIntegrationResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationsControllerAutoConfigureIntegrationResponse$ {
  /** @deprecated use `IntegrationsControllerAutoConfigureIntegrationResponse$inboundSchema` instead. */
  export const inboundSchema =
    IntegrationsControllerAutoConfigureIntegrationResponse$inboundSchema;
  /** @deprecated use `IntegrationsControllerAutoConfigureIntegrationResponse$outboundSchema` instead. */
  export const outboundSchema =
    IntegrationsControllerAutoConfigureIntegrationResponse$outboundSchema;
  /** @deprecated use `IntegrationsControllerAutoConfigureIntegrationResponse$Outbound` instead. */
  export type Outbound =
    IntegrationsControllerAutoConfigureIntegrationResponse$Outbound;
}

export function integrationsControllerAutoConfigureIntegrationResponseToJSON(
  integrationsControllerAutoConfigureIntegrationResponse:
    IntegrationsControllerAutoConfigureIntegrationResponse,
): string {
  return JSON.stringify(
    IntegrationsControllerAutoConfigureIntegrationResponse$outboundSchema.parse(
      integrationsControllerAutoConfigureIntegrationResponse,
    ),
  );
}

export function integrationsControllerAutoConfigureIntegrationResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  IntegrationsControllerAutoConfigureIntegrationResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IntegrationsControllerAutoConfigureIntegrationResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'IntegrationsControllerAutoConfigureIntegrationResponse' from JSON`,
  );
}
