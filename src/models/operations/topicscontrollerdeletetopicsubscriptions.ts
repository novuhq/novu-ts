/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TopicsControllerDeleteTopicSubscriptionsRequest = {
  /**
   * The key identifier of the topic
   */
  topicKey: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  deleteTopicSubscriptionsRequestDto:
    components.DeleteTopicSubscriptionsRequestDto;
};

export type TopicsControllerDeleteTopicSubscriptionsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.DeleteTopicSubscriptionsResponseDto;
};

/** @internal */
export const TopicsControllerDeleteTopicSubscriptionsRequest$inboundSchema:
  z.ZodType<
    TopicsControllerDeleteTopicSubscriptionsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    topicKey: z.string(),
    "idempotency-key": z.string().optional(),
    DeleteTopicSubscriptionsRequestDto:
      components.DeleteTopicSubscriptionsRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "DeleteTopicSubscriptionsRequestDto":
        "deleteTopicSubscriptionsRequestDto",
    });
  });

/** @internal */
export type TopicsControllerDeleteTopicSubscriptionsRequest$Outbound = {
  topicKey: string;
  "idempotency-key"?: string | undefined;
  DeleteTopicSubscriptionsRequestDto:
    components.DeleteTopicSubscriptionsRequestDto$Outbound;
};

/** @internal */
export const TopicsControllerDeleteTopicSubscriptionsRequest$outboundSchema:
  z.ZodType<
    TopicsControllerDeleteTopicSubscriptionsRequest$Outbound,
    z.ZodTypeDef,
    TopicsControllerDeleteTopicSubscriptionsRequest
  > = z.object({
    topicKey: z.string(),
    idempotencyKey: z.string().optional(),
    deleteTopicSubscriptionsRequestDto:
      components.DeleteTopicSubscriptionsRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      deleteTopicSubscriptionsRequestDto: "DeleteTopicSubscriptionsRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerDeleteTopicSubscriptionsRequest$ {
  /** @deprecated use `TopicsControllerDeleteTopicSubscriptionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerDeleteTopicSubscriptionsRequest$inboundSchema;
  /** @deprecated use `TopicsControllerDeleteTopicSubscriptionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerDeleteTopicSubscriptionsRequest$outboundSchema;
  /** @deprecated use `TopicsControllerDeleteTopicSubscriptionsRequest$Outbound` instead. */
  export type Outbound =
    TopicsControllerDeleteTopicSubscriptionsRequest$Outbound;
}

export function topicsControllerDeleteTopicSubscriptionsRequestToJSON(
  topicsControllerDeleteTopicSubscriptionsRequest:
    TopicsControllerDeleteTopicSubscriptionsRequest,
): string {
  return JSON.stringify(
    TopicsControllerDeleteTopicSubscriptionsRequest$outboundSchema.parse(
      topicsControllerDeleteTopicSubscriptionsRequest,
    ),
  );
}

export function topicsControllerDeleteTopicSubscriptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TopicsControllerDeleteTopicSubscriptionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerDeleteTopicSubscriptionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TopicsControllerDeleteTopicSubscriptionsRequest' from JSON`,
  );
}

/** @internal */
export const TopicsControllerDeleteTopicSubscriptionsResponse$inboundSchema:
  z.ZodType<
    TopicsControllerDeleteTopicSubscriptionsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.DeleteTopicSubscriptionsResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type TopicsControllerDeleteTopicSubscriptionsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.DeleteTopicSubscriptionsResponseDto$Outbound;
};

/** @internal */
export const TopicsControllerDeleteTopicSubscriptionsResponse$outboundSchema:
  z.ZodType<
    TopicsControllerDeleteTopicSubscriptionsResponse$Outbound,
    z.ZodTypeDef,
    TopicsControllerDeleteTopicSubscriptionsResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.DeleteTopicSubscriptionsResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerDeleteTopicSubscriptionsResponse$ {
  /** @deprecated use `TopicsControllerDeleteTopicSubscriptionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerDeleteTopicSubscriptionsResponse$inboundSchema;
  /** @deprecated use `TopicsControllerDeleteTopicSubscriptionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerDeleteTopicSubscriptionsResponse$outboundSchema;
  /** @deprecated use `TopicsControllerDeleteTopicSubscriptionsResponse$Outbound` instead. */
  export type Outbound =
    TopicsControllerDeleteTopicSubscriptionsResponse$Outbound;
}

export function topicsControllerDeleteTopicSubscriptionsResponseToJSON(
  topicsControllerDeleteTopicSubscriptionsResponse:
    TopicsControllerDeleteTopicSubscriptionsResponse,
): string {
  return JSON.stringify(
    TopicsControllerDeleteTopicSubscriptionsResponse$outboundSchema.parse(
      topicsControllerDeleteTopicSubscriptionsResponse,
    ),
  );
}

export function topicsControllerDeleteTopicSubscriptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  TopicsControllerDeleteTopicSubscriptionsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerDeleteTopicSubscriptionsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TopicsControllerDeleteTopicSubscriptionsResponse' from JSON`,
  );
}
