/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TopicsControllerUpdateTopicRequest = {
  /**
   * The key identifier of the topic
   */
  topicKey: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  updateTopicRequestDto: components.UpdateTopicRequestDto;
};

export type TopicsControllerUpdateTopicResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TopicResponseDto;
};

/** @internal */
export const TopicsControllerUpdateTopicRequest$inboundSchema: z.ZodType<
  TopicsControllerUpdateTopicRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  topicKey: z.string(),
  "idempotency-key": z.string().optional(),
  UpdateTopicRequestDto: components.UpdateTopicRequestDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "UpdateTopicRequestDto": "updateTopicRequestDto",
  });
});

/** @internal */
export type TopicsControllerUpdateTopicRequest$Outbound = {
  topicKey: string;
  "idempotency-key"?: string | undefined;
  UpdateTopicRequestDto: components.UpdateTopicRequestDto$Outbound;
};

/** @internal */
export const TopicsControllerUpdateTopicRequest$outboundSchema: z.ZodType<
  TopicsControllerUpdateTopicRequest$Outbound,
  z.ZodTypeDef,
  TopicsControllerUpdateTopicRequest
> = z.object({
  topicKey: z.string(),
  idempotencyKey: z.string().optional(),
  updateTopicRequestDto: components.UpdateTopicRequestDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    updateTopicRequestDto: "UpdateTopicRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerUpdateTopicRequest$ {
  /** @deprecated use `TopicsControllerUpdateTopicRequest$inboundSchema` instead. */
  export const inboundSchema = TopicsControllerUpdateTopicRequest$inboundSchema;
  /** @deprecated use `TopicsControllerUpdateTopicRequest$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerUpdateTopicRequest$outboundSchema;
  /** @deprecated use `TopicsControllerUpdateTopicRequest$Outbound` instead. */
  export type Outbound = TopicsControllerUpdateTopicRequest$Outbound;
}

export function topicsControllerUpdateTopicRequestToJSON(
  topicsControllerUpdateTopicRequest: TopicsControllerUpdateTopicRequest,
): string {
  return JSON.stringify(
    TopicsControllerUpdateTopicRequest$outboundSchema.parse(
      topicsControllerUpdateTopicRequest,
    ),
  );
}

export function topicsControllerUpdateTopicRequestFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerUpdateTopicRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerUpdateTopicRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerUpdateTopicRequest' from JSON`,
  );
}

/** @internal */
export const TopicsControllerUpdateTopicResponse$inboundSchema: z.ZodType<
  TopicsControllerUpdateTopicResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.TopicResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type TopicsControllerUpdateTopicResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TopicResponseDto$Outbound;
};

/** @internal */
export const TopicsControllerUpdateTopicResponse$outboundSchema: z.ZodType<
  TopicsControllerUpdateTopicResponse$Outbound,
  z.ZodTypeDef,
  TopicsControllerUpdateTopicResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.TopicResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerUpdateTopicResponse$ {
  /** @deprecated use `TopicsControllerUpdateTopicResponse$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerUpdateTopicResponse$inboundSchema;
  /** @deprecated use `TopicsControllerUpdateTopicResponse$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerUpdateTopicResponse$outboundSchema;
  /** @deprecated use `TopicsControllerUpdateTopicResponse$Outbound` instead. */
  export type Outbound = TopicsControllerUpdateTopicResponse$Outbound;
}

export function topicsControllerUpdateTopicResponseToJSON(
  topicsControllerUpdateTopicResponse: TopicsControllerUpdateTopicResponse,
): string {
  return JSON.stringify(
    TopicsControllerUpdateTopicResponse$outboundSchema.parse(
      topicsControllerUpdateTopicResponse,
    ),
  );
}

export function topicsControllerUpdateTopicResponseFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerUpdateTopicResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerUpdateTopicResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerUpdateTopicResponse' from JSON`,
  );
}
