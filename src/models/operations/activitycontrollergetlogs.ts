/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivityControllerGetLogsRequest = {
  /**
   * Page number for pagination
   */
  page?: number | undefined;
  /**
   * Number of items per page
   */
  limit?: number | undefined;
  /**
   * Filter by HTTP status codes
   */
  statusCodes?: Array<number> | undefined;
  /**
   * Filter by request URL
   */
  url?: string | undefined;
  /**
   * Filter by URL pattern
   */
  urlPattern?: string | undefined;
  /**
   * Filter by transaction identifier
   */
  transactionId?: string | undefined;
  /**
   * Filter requests created after this timestamp (Unix timestamp)
   */
  createdGte?: number | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const ActivityControllerGetLogsRequest$inboundSchema: z.ZodType<
  ActivityControllerGetLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().optional(),
  limit: z.number().optional(),
  statusCodes: z.array(z.number()).optional(),
  url: z.string().optional(),
  url_pattern: z.string().optional(),
  transactionId: z.string().optional(),
  createdGte: z.number().optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "url_pattern": "urlPattern",
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ActivityControllerGetLogsRequest$Outbound = {
  page?: number | undefined;
  limit?: number | undefined;
  statusCodes?: Array<number> | undefined;
  url?: string | undefined;
  url_pattern?: string | undefined;
  transactionId?: string | undefined;
  createdGte?: number | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ActivityControllerGetLogsRequest$outboundSchema: z.ZodType<
  ActivityControllerGetLogsRequest$Outbound,
  z.ZodTypeDef,
  ActivityControllerGetLogsRequest
> = z.object({
  page: z.number().optional(),
  limit: z.number().optional(),
  statusCodes: z.array(z.number()).optional(),
  url: z.string().optional(),
  urlPattern: z.string().optional(),
  transactionId: z.string().optional(),
  createdGte: z.number().optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    urlPattern: "url_pattern",
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityControllerGetLogsRequest$ {
  /** @deprecated use `ActivityControllerGetLogsRequest$inboundSchema` instead. */
  export const inboundSchema = ActivityControllerGetLogsRequest$inboundSchema;
  /** @deprecated use `ActivityControllerGetLogsRequest$outboundSchema` instead. */
  export const outboundSchema = ActivityControllerGetLogsRequest$outboundSchema;
  /** @deprecated use `ActivityControllerGetLogsRequest$Outbound` instead. */
  export type Outbound = ActivityControllerGetLogsRequest$Outbound;
}

export function activityControllerGetLogsRequestToJSON(
  activityControllerGetLogsRequest: ActivityControllerGetLogsRequest,
): string {
  return JSON.stringify(
    ActivityControllerGetLogsRequest$outboundSchema.parse(
      activityControllerGetLogsRequest,
    ),
  );
}

export function activityControllerGetLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ActivityControllerGetLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityControllerGetLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityControllerGetLogsRequest' from JSON`,
  );
}
