/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerUpdateSubscriberChannelRequest = {
  subscriberId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  updateSubscriberChannelRequestDto:
    components.UpdateSubscriberChannelRequestDto;
};

export type SubscribersControllerUpdateSubscriberChannelResponse = {
  headers: { [k: string]: Array<string> };
  result: components.SubscriberResponseDto;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberChannelRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberChannelRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    "idempotency-key": z.string().optional(),
    UpdateSubscriberChannelRequestDto:
      components.UpdateSubscriberChannelRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "UpdateSubscriberChannelRequestDto": "updateSubscriberChannelRequestDto",
    });
  });

/** @internal */
export type SubscribersControllerUpdateSubscriberChannelRequest$Outbound = {
  subscriberId: string;
  "idempotency-key"?: string | undefined;
  UpdateSubscriberChannelRequestDto:
    components.UpdateSubscriberChannelRequestDto$Outbound;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberChannelRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberChannelRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberChannelRequest
  > = z.object({
    subscriberId: z.string(),
    idempotencyKey: z.string().optional(),
    updateSubscriberChannelRequestDto:
      components.UpdateSubscriberChannelRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      updateSubscriberChannelRequestDto: "UpdateSubscriberChannelRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberChannelRequest$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberChannelRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberChannelRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberChannelRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberChannelRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberChannelRequest$Outbound` instead. */
  export type Outbound =
    SubscribersControllerUpdateSubscriberChannelRequest$Outbound;
}

export function subscribersControllerUpdateSubscriberChannelRequestToJSON(
  subscribersControllerUpdateSubscriberChannelRequest:
    SubscribersControllerUpdateSubscriberChannelRequest,
): string {
  return JSON.stringify(
    SubscribersControllerUpdateSubscriberChannelRequest$outboundSchema.parse(
      subscribersControllerUpdateSubscriberChannelRequest,
    ),
  );
}

export function subscribersControllerUpdateSubscriberChannelRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerUpdateSubscriberChannelRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerUpdateSubscriberChannelRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerUpdateSubscriberChannelRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerUpdateSubscriberChannelResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberChannelResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.SubscriberResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerUpdateSubscriberChannelResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.SubscriberResponseDto$Outbound;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberChannelResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberChannelResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberChannelResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.SubscriberResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberChannelResponse$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberChannelResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberChannelResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberChannelResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberChannelResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberChannelResponse$Outbound` instead. */
  export type Outbound =
    SubscribersControllerUpdateSubscriberChannelResponse$Outbound;
}

export function subscribersControllerUpdateSubscriberChannelResponseToJSON(
  subscribersControllerUpdateSubscriberChannelResponse:
    SubscribersControllerUpdateSubscriberChannelResponse,
): string {
  return JSON.stringify(
    SubscribersControllerUpdateSubscriberChannelResponse$outboundSchema.parse(
      subscribersControllerUpdateSubscriberChannelResponse,
    ),
  );
}

export function subscribersControllerUpdateSubscriberChannelResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerUpdateSubscriberChannelResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerUpdateSubscriberChannelResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerUpdateSubscriberChannelResponse' from JSON`,
  );
}
