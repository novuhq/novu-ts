/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LayoutsControllerGetUsageRequest = {
  layoutId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type LayoutsControllerGetUsageResponse = {
  headers: { [k: string]: Array<string> };
  result: components.GetLayoutUsageResponseDto;
};

/** @internal */
export const LayoutsControllerGetUsageRequest$inboundSchema: z.ZodType<
  LayoutsControllerGetUsageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  layoutId: z.string(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type LayoutsControllerGetUsageRequest$Outbound = {
  layoutId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const LayoutsControllerGetUsageRequest$outboundSchema: z.ZodType<
  LayoutsControllerGetUsageRequest$Outbound,
  z.ZodTypeDef,
  LayoutsControllerGetUsageRequest
> = z.object({
  layoutId: z.string(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerGetUsageRequest$ {
  /** @deprecated use `LayoutsControllerGetUsageRequest$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerGetUsageRequest$inboundSchema;
  /** @deprecated use `LayoutsControllerGetUsageRequest$outboundSchema` instead. */
  export const outboundSchema = LayoutsControllerGetUsageRequest$outboundSchema;
  /** @deprecated use `LayoutsControllerGetUsageRequest$Outbound` instead. */
  export type Outbound = LayoutsControllerGetUsageRequest$Outbound;
}

export function layoutsControllerGetUsageRequestToJSON(
  layoutsControllerGetUsageRequest: LayoutsControllerGetUsageRequest,
): string {
  return JSON.stringify(
    LayoutsControllerGetUsageRequest$outboundSchema.parse(
      layoutsControllerGetUsageRequest,
    ),
  );
}

export function layoutsControllerGetUsageRequestFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerGetUsageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerGetUsageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerGetUsageRequest' from JSON`,
  );
}

/** @internal */
export const LayoutsControllerGetUsageResponse$inboundSchema: z.ZodType<
  LayoutsControllerGetUsageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.GetLayoutUsageResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type LayoutsControllerGetUsageResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.GetLayoutUsageResponseDto$Outbound;
};

/** @internal */
export const LayoutsControllerGetUsageResponse$outboundSchema: z.ZodType<
  LayoutsControllerGetUsageResponse$Outbound,
  z.ZodTypeDef,
  LayoutsControllerGetUsageResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.GetLayoutUsageResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerGetUsageResponse$ {
  /** @deprecated use `LayoutsControllerGetUsageResponse$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerGetUsageResponse$inboundSchema;
  /** @deprecated use `LayoutsControllerGetUsageResponse$outboundSchema` instead. */
  export const outboundSchema =
    LayoutsControllerGetUsageResponse$outboundSchema;
  /** @deprecated use `LayoutsControllerGetUsageResponse$Outbound` instead. */
  export type Outbound = LayoutsControllerGetUsageResponse$Outbound;
}

export function layoutsControllerGetUsageResponseToJSON(
  layoutsControllerGetUsageResponse: LayoutsControllerGetUsageResponse,
): string {
  return JSON.stringify(
    LayoutsControllerGetUsageResponse$outboundSchema.parse(
      layoutsControllerGetUsageResponse,
    ),
  );
}

export function layoutsControllerGetUsageResponseFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerGetUsageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerGetUsageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerGetUsageResponse' from JSON`,
  );
}
