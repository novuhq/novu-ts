/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContextsControllerGetContextRequest = {
  /**
   * Context ID
   */
  id: string;
  /**
   * Context type
   */
  type: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type ContextsControllerGetContextResponse = {
  headers: { [k: string]: Array<string> };
  result: components.GetContextResponseDto;
};

/** @internal */
export const ContextsControllerGetContextRequest$inboundSchema: z.ZodType<
  ContextsControllerGetContextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ContextsControllerGetContextRequest$Outbound = {
  id: string;
  type: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ContextsControllerGetContextRequest$outboundSchema: z.ZodType<
  ContextsControllerGetContextRequest$Outbound,
  z.ZodTypeDef,
  ContextsControllerGetContextRequest
> = z.object({
  id: z.string(),
  type: z.string(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerGetContextRequest$ {
  /** @deprecated use `ContextsControllerGetContextRequest$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerGetContextRequest$inboundSchema;
  /** @deprecated use `ContextsControllerGetContextRequest$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerGetContextRequest$outboundSchema;
  /** @deprecated use `ContextsControllerGetContextRequest$Outbound` instead. */
  export type Outbound = ContextsControllerGetContextRequest$Outbound;
}

export function contextsControllerGetContextRequestToJSON(
  contextsControllerGetContextRequest: ContextsControllerGetContextRequest,
): string {
  return JSON.stringify(
    ContextsControllerGetContextRequest$outboundSchema.parse(
      contextsControllerGetContextRequest,
    ),
  );
}

export function contextsControllerGetContextRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContextsControllerGetContextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerGetContextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextsControllerGetContextRequest' from JSON`,
  );
}

/** @internal */
export const ContextsControllerGetContextResponse$inboundSchema: z.ZodType<
  ContextsControllerGetContextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.GetContextResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ContextsControllerGetContextResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.GetContextResponseDto$Outbound;
};

/** @internal */
export const ContextsControllerGetContextResponse$outboundSchema: z.ZodType<
  ContextsControllerGetContextResponse$Outbound,
  z.ZodTypeDef,
  ContextsControllerGetContextResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.GetContextResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerGetContextResponse$ {
  /** @deprecated use `ContextsControllerGetContextResponse$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerGetContextResponse$inboundSchema;
  /** @deprecated use `ContextsControllerGetContextResponse$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerGetContextResponse$outboundSchema;
  /** @deprecated use `ContextsControllerGetContextResponse$Outbound` instead. */
  export type Outbound = ContextsControllerGetContextResponse$Outbound;
}

export function contextsControllerGetContextResponseToJSON(
  contextsControllerGetContextResponse: ContextsControllerGetContextResponse,
): string {
  return JSON.stringify(
    ContextsControllerGetContextResponse$outboundSchema.parse(
      contextsControllerGetContextResponse,
    ),
  );
}

export function contextsControllerGetContextResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContextsControllerGetContextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerGetContextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextsControllerGetContextResponse' from JSON`,
  );
}
