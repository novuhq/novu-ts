/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Resource type
 */
export const TranslationControllerGetTranslationGroupEndpointPathParamResourceType =
  {
    Workflow: "workflow",
  } as const;
/**
 * Resource type
 */
export type TranslationControllerGetTranslationGroupEndpointPathParamResourceType =
  ClosedEnum<
    typeof TranslationControllerGetTranslationGroupEndpointPathParamResourceType
  >;

export type TranslationControllerGetTranslationGroupEndpointRequest = {
  /**
   * Resource type
   */
  resourceType:
    TranslationControllerGetTranslationGroupEndpointPathParamResourceType;
  /**
   * Resource ID
   */
  resourceId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const TranslationControllerGetTranslationGroupEndpointPathParamResourceType$inboundSchema:
  z.ZodNativeEnum<
    typeof TranslationControllerGetTranslationGroupEndpointPathParamResourceType
  > = z.nativeEnum(
    TranslationControllerGetTranslationGroupEndpointPathParamResourceType,
  );

/** @internal */
export const TranslationControllerGetTranslationGroupEndpointPathParamResourceType$outboundSchema:
  z.ZodNativeEnum<
    typeof TranslationControllerGetTranslationGroupEndpointPathParamResourceType
  > =
    TranslationControllerGetTranslationGroupEndpointPathParamResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationControllerGetTranslationGroupEndpointPathParamResourceType$ {
  /** @deprecated use `TranslationControllerGetTranslationGroupEndpointPathParamResourceType$inboundSchema` instead. */
  export const inboundSchema =
    TranslationControllerGetTranslationGroupEndpointPathParamResourceType$inboundSchema;
  /** @deprecated use `TranslationControllerGetTranslationGroupEndpointPathParamResourceType$outboundSchema` instead. */
  export const outboundSchema =
    TranslationControllerGetTranslationGroupEndpointPathParamResourceType$outboundSchema;
}

/** @internal */
export const TranslationControllerGetTranslationGroupEndpointRequest$inboundSchema:
  z.ZodType<
    TranslationControllerGetTranslationGroupEndpointRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resourceType:
      TranslationControllerGetTranslationGroupEndpointPathParamResourceType$inboundSchema,
    resourceId: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type TranslationControllerGetTranslationGroupEndpointRequest$Outbound = {
  resourceType: string;
  resourceId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const TranslationControllerGetTranslationGroupEndpointRequest$outboundSchema:
  z.ZodType<
    TranslationControllerGetTranslationGroupEndpointRequest$Outbound,
    z.ZodTypeDef,
    TranslationControllerGetTranslationGroupEndpointRequest
  > = z.object({
    resourceType:
      TranslationControllerGetTranslationGroupEndpointPathParamResourceType$outboundSchema,
    resourceId: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationControllerGetTranslationGroupEndpointRequest$ {
  /** @deprecated use `TranslationControllerGetTranslationGroupEndpointRequest$inboundSchema` instead. */
  export const inboundSchema =
    TranslationControllerGetTranslationGroupEndpointRequest$inboundSchema;
  /** @deprecated use `TranslationControllerGetTranslationGroupEndpointRequest$outboundSchema` instead. */
  export const outboundSchema =
    TranslationControllerGetTranslationGroupEndpointRequest$outboundSchema;
  /** @deprecated use `TranslationControllerGetTranslationGroupEndpointRequest$Outbound` instead. */
  export type Outbound =
    TranslationControllerGetTranslationGroupEndpointRequest$Outbound;
}

export function translationControllerGetTranslationGroupEndpointRequestToJSON(
  translationControllerGetTranslationGroupEndpointRequest:
    TranslationControllerGetTranslationGroupEndpointRequest,
): string {
  return JSON.stringify(
    TranslationControllerGetTranslationGroupEndpointRequest$outboundSchema
      .parse(translationControllerGetTranslationGroupEndpointRequest),
  );
}

export function translationControllerGetTranslationGroupEndpointRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TranslationControllerGetTranslationGroupEndpointRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TranslationControllerGetTranslationGroupEndpointRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TranslationControllerGetTranslationGroupEndpointRequest' from JSON`,
  );
}
