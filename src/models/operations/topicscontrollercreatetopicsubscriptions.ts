/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TopicsControllerCreateTopicSubscriptionsRequest = {
  /**
   * The key identifier of the topic
   */
  topicKey: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  createTopicSubscriptionsRequestDto:
    components.CreateTopicSubscriptionsRequestDto;
};

export type TopicsControllerCreateTopicSubscriptionsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.CreateTopicSubscriptionsResponseDto;
};

/** @internal */
export const TopicsControllerCreateTopicSubscriptionsRequest$inboundSchema:
  z.ZodType<
    TopicsControllerCreateTopicSubscriptionsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    topicKey: z.string(),
    "idempotency-key": z.string().optional(),
    CreateTopicSubscriptionsRequestDto:
      components.CreateTopicSubscriptionsRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "CreateTopicSubscriptionsRequestDto":
        "createTopicSubscriptionsRequestDto",
    });
  });

/** @internal */
export type TopicsControllerCreateTopicSubscriptionsRequest$Outbound = {
  topicKey: string;
  "idempotency-key"?: string | undefined;
  CreateTopicSubscriptionsRequestDto:
    components.CreateTopicSubscriptionsRequestDto$Outbound;
};

/** @internal */
export const TopicsControllerCreateTopicSubscriptionsRequest$outboundSchema:
  z.ZodType<
    TopicsControllerCreateTopicSubscriptionsRequest$Outbound,
    z.ZodTypeDef,
    TopicsControllerCreateTopicSubscriptionsRequest
  > = z.object({
    topicKey: z.string(),
    idempotencyKey: z.string().optional(),
    createTopicSubscriptionsRequestDto:
      components.CreateTopicSubscriptionsRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      createTopicSubscriptionsRequestDto: "CreateTopicSubscriptionsRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerCreateTopicSubscriptionsRequest$ {
  /** @deprecated use `TopicsControllerCreateTopicSubscriptionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerCreateTopicSubscriptionsRequest$inboundSchema;
  /** @deprecated use `TopicsControllerCreateTopicSubscriptionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerCreateTopicSubscriptionsRequest$outboundSchema;
  /** @deprecated use `TopicsControllerCreateTopicSubscriptionsRequest$Outbound` instead. */
  export type Outbound =
    TopicsControllerCreateTopicSubscriptionsRequest$Outbound;
}

export function topicsControllerCreateTopicSubscriptionsRequestToJSON(
  topicsControllerCreateTopicSubscriptionsRequest:
    TopicsControllerCreateTopicSubscriptionsRequest,
): string {
  return JSON.stringify(
    TopicsControllerCreateTopicSubscriptionsRequest$outboundSchema.parse(
      topicsControllerCreateTopicSubscriptionsRequest,
    ),
  );
}

export function topicsControllerCreateTopicSubscriptionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TopicsControllerCreateTopicSubscriptionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerCreateTopicSubscriptionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TopicsControllerCreateTopicSubscriptionsRequest' from JSON`,
  );
}

/** @internal */
export const TopicsControllerCreateTopicSubscriptionsResponse$inboundSchema:
  z.ZodType<
    TopicsControllerCreateTopicSubscriptionsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.CreateTopicSubscriptionsResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type TopicsControllerCreateTopicSubscriptionsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.CreateTopicSubscriptionsResponseDto$Outbound;
};

/** @internal */
export const TopicsControllerCreateTopicSubscriptionsResponse$outboundSchema:
  z.ZodType<
    TopicsControllerCreateTopicSubscriptionsResponse$Outbound,
    z.ZodTypeDef,
    TopicsControllerCreateTopicSubscriptionsResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.CreateTopicSubscriptionsResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerCreateTopicSubscriptionsResponse$ {
  /** @deprecated use `TopicsControllerCreateTopicSubscriptionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerCreateTopicSubscriptionsResponse$inboundSchema;
  /** @deprecated use `TopicsControllerCreateTopicSubscriptionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerCreateTopicSubscriptionsResponse$outboundSchema;
  /** @deprecated use `TopicsControllerCreateTopicSubscriptionsResponse$Outbound` instead. */
  export type Outbound =
    TopicsControllerCreateTopicSubscriptionsResponse$Outbound;
}

export function topicsControllerCreateTopicSubscriptionsResponseToJSON(
  topicsControllerCreateTopicSubscriptionsResponse:
    TopicsControllerCreateTopicSubscriptionsResponse,
): string {
  return JSON.stringify(
    TopicsControllerCreateTopicSubscriptionsResponse$outboundSchema.parse(
      topicsControllerCreateTopicSubscriptionsResponse,
    ),
  );
}

export function topicsControllerCreateTopicSubscriptionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  TopicsControllerCreateTopicSubscriptionsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerCreateTopicSubscriptionsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TopicsControllerCreateTopicSubscriptionsResponse' from JSON`,
  );
}
