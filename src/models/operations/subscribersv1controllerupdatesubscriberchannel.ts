/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersV1ControllerUpdateSubscriberChannelRequest = {
  subscriberId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  updateSubscriberChannelRequestDto:
    components.UpdateSubscriberChannelRequestDto;
};

export type SubscribersV1ControllerUpdateSubscriberChannelResponse = {
  headers: { [k: string]: Array<string> };
  result: components.SubscriberResponseDto;
};

/** @internal */
export const SubscribersV1ControllerUpdateSubscriberChannelRequest$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerUpdateSubscriberChannelRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    "idempotency-key": z.string().optional(),
    UpdateSubscriberChannelRequestDto:
      components.UpdateSubscriberChannelRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "UpdateSubscriberChannelRequestDto": "updateSubscriberChannelRequestDto",
    });
  });

/** @internal */
export type SubscribersV1ControllerUpdateSubscriberChannelRequest$Outbound = {
  subscriberId: string;
  "idempotency-key"?: string | undefined;
  UpdateSubscriberChannelRequestDto:
    components.UpdateSubscriberChannelRequestDto$Outbound;
};

/** @internal */
export const SubscribersV1ControllerUpdateSubscriberChannelRequest$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerUpdateSubscriberChannelRequest$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerUpdateSubscriberChannelRequest
  > = z.object({
    subscriberId: z.string(),
    idempotencyKey: z.string().optional(),
    updateSubscriberChannelRequestDto:
      components.UpdateSubscriberChannelRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      updateSubscriberChannelRequestDto: "UpdateSubscriberChannelRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerUpdateSubscriberChannelRequest$ {
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberChannelRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerUpdateSubscriberChannelRequest$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberChannelRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerUpdateSubscriberChannelRequest$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberChannelRequest$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerUpdateSubscriberChannelRequest$Outbound;
}

export function subscribersV1ControllerUpdateSubscriberChannelRequestToJSON(
  subscribersV1ControllerUpdateSubscriberChannelRequest:
    SubscribersV1ControllerUpdateSubscriberChannelRequest,
): string {
  return JSON.stringify(
    SubscribersV1ControllerUpdateSubscriberChannelRequest$outboundSchema.parse(
      subscribersV1ControllerUpdateSubscriberChannelRequest,
    ),
  );
}

export function subscribersV1ControllerUpdateSubscriberChannelRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerUpdateSubscriberChannelRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerUpdateSubscriberChannelRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersV1ControllerUpdateSubscriberChannelRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersV1ControllerUpdateSubscriberChannelResponse$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerUpdateSubscriberChannelResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.SubscriberResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersV1ControllerUpdateSubscriberChannelResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.SubscriberResponseDto$Outbound;
};

/** @internal */
export const SubscribersV1ControllerUpdateSubscriberChannelResponse$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerUpdateSubscriberChannelResponse$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerUpdateSubscriberChannelResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.SubscriberResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerUpdateSubscriberChannelResponse$ {
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberChannelResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerUpdateSubscriberChannelResponse$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberChannelResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerUpdateSubscriberChannelResponse$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberChannelResponse$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerUpdateSubscriberChannelResponse$Outbound;
}

export function subscribersV1ControllerUpdateSubscriberChannelResponseToJSON(
  subscribersV1ControllerUpdateSubscriberChannelResponse:
    SubscribersV1ControllerUpdateSubscriberChannelResponse,
): string {
  return JSON.stringify(
    SubscribersV1ControllerUpdateSubscriberChannelResponse$outboundSchema.parse(
      subscribersV1ControllerUpdateSubscriberChannelResponse,
    ),
  );
}

export function subscribersV1ControllerUpdateSubscriberChannelResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerUpdateSubscriberChannelResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerUpdateSubscriberChannelResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersV1ControllerUpdateSubscriberChannelResponse' from JSON`,
  );
}
