/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowControllerUpdateRequest = {
  workflowId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  /**
   * Workflow update details
   */
  updateWorkflowDto: components.UpdateWorkflowDto;
};

export type WorkflowControllerUpdateResponse = {
  headers: { [k: string]: Array<string> };
  result: components.WorkflowResponseDto;
};

/** @internal */
export const WorkflowControllerUpdateRequest$inboundSchema: z.ZodType<
  WorkflowControllerUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflowId: z.string(),
  "idempotency-key": z.string().optional(),
  UpdateWorkflowDto: components.UpdateWorkflowDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "UpdateWorkflowDto": "updateWorkflowDto",
  });
});

/** @internal */
export type WorkflowControllerUpdateRequest$Outbound = {
  workflowId: string;
  "idempotency-key"?: string | undefined;
  UpdateWorkflowDto: components.UpdateWorkflowDto$Outbound;
};

/** @internal */
export const WorkflowControllerUpdateRequest$outboundSchema: z.ZodType<
  WorkflowControllerUpdateRequest$Outbound,
  z.ZodTypeDef,
  WorkflowControllerUpdateRequest
> = z.object({
  workflowId: z.string(),
  idempotencyKey: z.string().optional(),
  updateWorkflowDto: components.UpdateWorkflowDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    updateWorkflowDto: "UpdateWorkflowDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerUpdateRequest$ {
  /** @deprecated use `WorkflowControllerUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = WorkflowControllerUpdateRequest$inboundSchema;
  /** @deprecated use `WorkflowControllerUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = WorkflowControllerUpdateRequest$outboundSchema;
  /** @deprecated use `WorkflowControllerUpdateRequest$Outbound` instead. */
  export type Outbound = WorkflowControllerUpdateRequest$Outbound;
}

export function workflowControllerUpdateRequestToJSON(
  workflowControllerUpdateRequest: WorkflowControllerUpdateRequest,
): string {
  return JSON.stringify(
    WorkflowControllerUpdateRequest$outboundSchema.parse(
      workflowControllerUpdateRequest,
    ),
  );
}

export function workflowControllerUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowControllerUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowControllerUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowControllerUpdateRequest' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerUpdateResponse$inboundSchema: z.ZodType<
  WorkflowControllerUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.WorkflowResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type WorkflowControllerUpdateResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.WorkflowResponseDto$Outbound;
};

/** @internal */
export const WorkflowControllerUpdateResponse$outboundSchema: z.ZodType<
  WorkflowControllerUpdateResponse$Outbound,
  z.ZodTypeDef,
  WorkflowControllerUpdateResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.WorkflowResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerUpdateResponse$ {
  /** @deprecated use `WorkflowControllerUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = WorkflowControllerUpdateResponse$inboundSchema;
  /** @deprecated use `WorkflowControllerUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = WorkflowControllerUpdateResponse$outboundSchema;
  /** @deprecated use `WorkflowControllerUpdateResponse$Outbound` instead. */
  export type Outbound = WorkflowControllerUpdateResponse$Outbound;
}

export function workflowControllerUpdateResponseToJSON(
  workflowControllerUpdateResponse: WorkflowControllerUpdateResponse,
): string {
  return JSON.stringify(
    WorkflowControllerUpdateResponse$outboundSchema.parse(
      workflowControllerUpdateResponse,
    ),
  );
}

export function workflowControllerUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowControllerUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowControllerUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowControllerUpdateResponse' from JSON`,
  );
}
