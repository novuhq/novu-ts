/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationGroupsControllerUpdateNotificationGroupRequest = {
  id: string;
  createNotificationGroupRequestDto:
    components.CreateNotificationGroupRequestDto;
};

export type NotificationGroupsControllerUpdateNotificationGroupResponse = {
  headers: { [k: string]: Array<string> };
  result: components.NotificationGroupResponseDto;
};

/** @internal */
export const NotificationGroupsControllerUpdateNotificationGroupRequest$inboundSchema:
  z.ZodType<
    NotificationGroupsControllerUpdateNotificationGroupRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    CreateNotificationGroupRequestDto:
      components.CreateNotificationGroupRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "CreateNotificationGroupRequestDto": "createNotificationGroupRequestDto",
    });
  });

/** @internal */
export type NotificationGroupsControllerUpdateNotificationGroupRequest$Outbound =
  {
    id: string;
    CreateNotificationGroupRequestDto:
      components.CreateNotificationGroupRequestDto$Outbound;
  };

/** @internal */
export const NotificationGroupsControllerUpdateNotificationGroupRequest$outboundSchema:
  z.ZodType<
    NotificationGroupsControllerUpdateNotificationGroupRequest$Outbound,
    z.ZodTypeDef,
    NotificationGroupsControllerUpdateNotificationGroupRequest
  > = z.object({
    id: z.string(),
    createNotificationGroupRequestDto:
      components.CreateNotificationGroupRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      createNotificationGroupRequestDto: "CreateNotificationGroupRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationGroupsControllerUpdateNotificationGroupRequest$ {
  /** @deprecated use `NotificationGroupsControllerUpdateNotificationGroupRequest$inboundSchema` instead. */
  export const inboundSchema =
    NotificationGroupsControllerUpdateNotificationGroupRequest$inboundSchema;
  /** @deprecated use `NotificationGroupsControllerUpdateNotificationGroupRequest$outboundSchema` instead. */
  export const outboundSchema =
    NotificationGroupsControllerUpdateNotificationGroupRequest$outboundSchema;
  /** @deprecated use `NotificationGroupsControllerUpdateNotificationGroupRequest$Outbound` instead. */
  export type Outbound =
    NotificationGroupsControllerUpdateNotificationGroupRequest$Outbound;
}

export function notificationGroupsControllerUpdateNotificationGroupRequestToJSON(
  notificationGroupsControllerUpdateNotificationGroupRequest:
    NotificationGroupsControllerUpdateNotificationGroupRequest,
): string {
  return JSON.stringify(
    NotificationGroupsControllerUpdateNotificationGroupRequest$outboundSchema
      .parse(notificationGroupsControllerUpdateNotificationGroupRequest),
  );
}

export function notificationGroupsControllerUpdateNotificationGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationGroupsControllerUpdateNotificationGroupRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationGroupsControllerUpdateNotificationGroupRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'NotificationGroupsControllerUpdateNotificationGroupRequest' from JSON`,
  );
}

/** @internal */
export const NotificationGroupsControllerUpdateNotificationGroupResponse$inboundSchema:
  z.ZodType<
    NotificationGroupsControllerUpdateNotificationGroupResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.NotificationGroupResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type NotificationGroupsControllerUpdateNotificationGroupResponse$Outbound =
  {
    Headers: { [k: string]: Array<string> };
    Result: components.NotificationGroupResponseDto$Outbound;
  };

/** @internal */
export const NotificationGroupsControllerUpdateNotificationGroupResponse$outboundSchema:
  z.ZodType<
    NotificationGroupsControllerUpdateNotificationGroupResponse$Outbound,
    z.ZodTypeDef,
    NotificationGroupsControllerUpdateNotificationGroupResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.NotificationGroupResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationGroupsControllerUpdateNotificationGroupResponse$ {
  /** @deprecated use `NotificationGroupsControllerUpdateNotificationGroupResponse$inboundSchema` instead. */
  export const inboundSchema =
    NotificationGroupsControllerUpdateNotificationGroupResponse$inboundSchema;
  /** @deprecated use `NotificationGroupsControllerUpdateNotificationGroupResponse$outboundSchema` instead. */
  export const outboundSchema =
    NotificationGroupsControllerUpdateNotificationGroupResponse$outboundSchema;
  /** @deprecated use `NotificationGroupsControllerUpdateNotificationGroupResponse$Outbound` instead. */
  export type Outbound =
    NotificationGroupsControllerUpdateNotificationGroupResponse$Outbound;
}

export function notificationGroupsControllerUpdateNotificationGroupResponseToJSON(
  notificationGroupsControllerUpdateNotificationGroupResponse:
    NotificationGroupsControllerUpdateNotificationGroupResponse,
): string {
  return JSON.stringify(
    NotificationGroupsControllerUpdateNotificationGroupResponse$outboundSchema
      .parse(notificationGroupsControllerUpdateNotificationGroupResponse),
  );
}

export function notificationGroupsControllerUpdateNotificationGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationGroupsControllerUpdateNotificationGroupResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationGroupsControllerUpdateNotificationGroupResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'NotificationGroupsControllerUpdateNotificationGroupResponse' from JSON`,
  );
}
