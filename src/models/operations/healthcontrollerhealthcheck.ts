/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HealthControllerHealthCheckRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type Info = {
  status: string;
  additionalProperties: { [k: string]: any };
};

export type ErrorT = {
  status: string;
  additionalProperties: { [k: string]: any };
};

export type Details = {
  status: string;
  additionalProperties: { [k: string]: any };
};

/**
 * The Health Check is successful
 */
export type HealthControllerHealthCheckResponseBody = {
  status?: string | undefined;
  info?: { [k: string]: Info } | null | undefined;
  error?: { [k: string]: ErrorT } | null | undefined;
  details?: { [k: string]: Details } | undefined;
};

/** @internal */
export const HealthControllerHealthCheckRequest$inboundSchema: z.ZodType<
  HealthControllerHealthCheckRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type HealthControllerHealthCheckRequest$Outbound = {
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const HealthControllerHealthCheckRequest$outboundSchema: z.ZodType<
  HealthControllerHealthCheckRequest$Outbound,
  z.ZodTypeDef,
  HealthControllerHealthCheckRequest
> = z.object({
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthControllerHealthCheckRequest$ {
  /** @deprecated use `HealthControllerHealthCheckRequest$inboundSchema` instead. */
  export const inboundSchema = HealthControllerHealthCheckRequest$inboundSchema;
  /** @deprecated use `HealthControllerHealthCheckRequest$outboundSchema` instead. */
  export const outboundSchema =
    HealthControllerHealthCheckRequest$outboundSchema;
  /** @deprecated use `HealthControllerHealthCheckRequest$Outbound` instead. */
  export type Outbound = HealthControllerHealthCheckRequest$Outbound;
}

export function healthControllerHealthCheckRequestToJSON(
  healthControllerHealthCheckRequest: HealthControllerHealthCheckRequest,
): string {
  return JSON.stringify(
    HealthControllerHealthCheckRequest$outboundSchema.parse(
      healthControllerHealthCheckRequest,
    ),
  );
}

export function healthControllerHealthCheckRequestFromJSON(
  jsonString: string,
): SafeParseResult<HealthControllerHealthCheckRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      HealthControllerHealthCheckRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HealthControllerHealthCheckRequest' from JSON`,
  );
}

/** @internal */
export const Info$inboundSchema: z.ZodType<Info, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      status: z.string(),
    }).catchall(z.any()),
    "additionalProperties",
  );

/** @internal */
export type Info$Outbound = {
  status: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Info$outboundSchema: z.ZodType<Info$Outbound, z.ZodTypeDef, Info> =
  z.object({
    status: z.string(),
    additionalProperties: z.record(z.any()),
  }).transform((v) => {
    return {
      ...v.additionalProperties,
      ...remap$(v, {
        additionalProperties: null,
      }),
    };
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Info$ {
  /** @deprecated use `Info$inboundSchema` instead. */
  export const inboundSchema = Info$inboundSchema;
  /** @deprecated use `Info$outboundSchema` instead. */
  export const outboundSchema = Info$outboundSchema;
  /** @deprecated use `Info$Outbound` instead. */
  export type Outbound = Info$Outbound;
}

export function infoToJSON(info: Info): string {
  return JSON.stringify(Info$outboundSchema.parse(info));
}

export function infoFromJSON(
  jsonString: string,
): SafeParseResult<Info, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Info$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Info' from JSON`,
  );
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      status: z.string(),
    }).catchall(z.any()),
    "additionalProperties",
  );

/** @internal */
export type ErrorT$Outbound = {
  status: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.object({
  status: z.string(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      status: z.string(),
    }).catchall(z.any()),
    "additionalProperties",
  );

/** @internal */
export type Details$Outbound = {
  status: string;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({
  status: z.string(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}

/** @internal */
export const HealthControllerHealthCheckResponseBody$inboundSchema: z.ZodType<
  HealthControllerHealthCheckResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
  info: z.nullable(z.record(z.lazy(() => Info$inboundSchema))).optional(),
  error: z.nullable(z.record(z.lazy(() => ErrorT$inboundSchema))).optional(),
  details: z.record(z.lazy(() => Details$inboundSchema)).optional(),
});

/** @internal */
export type HealthControllerHealthCheckResponseBody$Outbound = {
  status?: string | undefined;
  info?: { [k: string]: Info$Outbound } | null | undefined;
  error?: { [k: string]: ErrorT$Outbound } | null | undefined;
  details?: { [k: string]: Details$Outbound } | undefined;
};

/** @internal */
export const HealthControllerHealthCheckResponseBody$outboundSchema: z.ZodType<
  HealthControllerHealthCheckResponseBody$Outbound,
  z.ZodTypeDef,
  HealthControllerHealthCheckResponseBody
> = z.object({
  status: z.string().optional(),
  info: z.nullable(z.record(z.lazy(() => Info$outboundSchema))).optional(),
  error: z.nullable(z.record(z.lazy(() => ErrorT$outboundSchema))).optional(),
  details: z.record(z.lazy(() => Details$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthControllerHealthCheckResponseBody$ {
  /** @deprecated use `HealthControllerHealthCheckResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    HealthControllerHealthCheckResponseBody$inboundSchema;
  /** @deprecated use `HealthControllerHealthCheckResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    HealthControllerHealthCheckResponseBody$outboundSchema;
  /** @deprecated use `HealthControllerHealthCheckResponseBody$Outbound` instead. */
  export type Outbound = HealthControllerHealthCheckResponseBody$Outbound;
}

export function healthControllerHealthCheckResponseBodyToJSON(
  healthControllerHealthCheckResponseBody:
    HealthControllerHealthCheckResponseBody,
): string {
  return JSON.stringify(
    HealthControllerHealthCheckResponseBody$outboundSchema.parse(
      healthControllerHealthCheckResponseBody,
    ),
  );
}

export function healthControllerHealthCheckResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  HealthControllerHealthCheckResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      HealthControllerHealthCheckResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'HealthControllerHealthCheckResponseBody' from JSON`,
  );
}
