/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationGroupsControllerDeleteNotificationGroupRequest = {
  id: string;
};

export type NotificationGroupsControllerDeleteNotificationGroupResponse = {
  headers: { [k: string]: Array<string> };
  result: components.DeleteNotificationGroupResponseDto;
};

/** @internal */
export const NotificationGroupsControllerDeleteNotificationGroupRequest$inboundSchema:
  z.ZodType<
    NotificationGroupsControllerDeleteNotificationGroupRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
  });

/** @internal */
export type NotificationGroupsControllerDeleteNotificationGroupRequest$Outbound =
  {
    id: string;
  };

/** @internal */
export const NotificationGroupsControllerDeleteNotificationGroupRequest$outboundSchema:
  z.ZodType<
    NotificationGroupsControllerDeleteNotificationGroupRequest$Outbound,
    z.ZodTypeDef,
    NotificationGroupsControllerDeleteNotificationGroupRequest
  > = z.object({
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationGroupsControllerDeleteNotificationGroupRequest$ {
  /** @deprecated use `NotificationGroupsControllerDeleteNotificationGroupRequest$inboundSchema` instead. */
  export const inboundSchema =
    NotificationGroupsControllerDeleteNotificationGroupRequest$inboundSchema;
  /** @deprecated use `NotificationGroupsControllerDeleteNotificationGroupRequest$outboundSchema` instead. */
  export const outboundSchema =
    NotificationGroupsControllerDeleteNotificationGroupRequest$outboundSchema;
  /** @deprecated use `NotificationGroupsControllerDeleteNotificationGroupRequest$Outbound` instead. */
  export type Outbound =
    NotificationGroupsControllerDeleteNotificationGroupRequest$Outbound;
}

export function notificationGroupsControllerDeleteNotificationGroupRequestToJSON(
  notificationGroupsControllerDeleteNotificationGroupRequest:
    NotificationGroupsControllerDeleteNotificationGroupRequest,
): string {
  return JSON.stringify(
    NotificationGroupsControllerDeleteNotificationGroupRequest$outboundSchema
      .parse(notificationGroupsControllerDeleteNotificationGroupRequest),
  );
}

export function notificationGroupsControllerDeleteNotificationGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationGroupsControllerDeleteNotificationGroupRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationGroupsControllerDeleteNotificationGroupRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'NotificationGroupsControllerDeleteNotificationGroupRequest' from JSON`,
  );
}

/** @internal */
export const NotificationGroupsControllerDeleteNotificationGroupResponse$inboundSchema:
  z.ZodType<
    NotificationGroupsControllerDeleteNotificationGroupResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.DeleteNotificationGroupResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type NotificationGroupsControllerDeleteNotificationGroupResponse$Outbound =
  {
    Headers: { [k: string]: Array<string> };
    Result: components.DeleteNotificationGroupResponseDto$Outbound;
  };

/** @internal */
export const NotificationGroupsControllerDeleteNotificationGroupResponse$outboundSchema:
  z.ZodType<
    NotificationGroupsControllerDeleteNotificationGroupResponse$Outbound,
    z.ZodTypeDef,
    NotificationGroupsControllerDeleteNotificationGroupResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.DeleteNotificationGroupResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationGroupsControllerDeleteNotificationGroupResponse$ {
  /** @deprecated use `NotificationGroupsControllerDeleteNotificationGroupResponse$inboundSchema` instead. */
  export const inboundSchema =
    NotificationGroupsControllerDeleteNotificationGroupResponse$inboundSchema;
  /** @deprecated use `NotificationGroupsControllerDeleteNotificationGroupResponse$outboundSchema` instead. */
  export const outboundSchema =
    NotificationGroupsControllerDeleteNotificationGroupResponse$outboundSchema;
  /** @deprecated use `NotificationGroupsControllerDeleteNotificationGroupResponse$Outbound` instead. */
  export type Outbound =
    NotificationGroupsControllerDeleteNotificationGroupResponse$Outbound;
}

export function notificationGroupsControllerDeleteNotificationGroupResponseToJSON(
  notificationGroupsControllerDeleteNotificationGroupResponse:
    NotificationGroupsControllerDeleteNotificationGroupResponse,
): string {
  return JSON.stringify(
    NotificationGroupsControllerDeleteNotificationGroupResponse$outboundSchema
      .parse(notificationGroupsControllerDeleteNotificationGroupResponse),
  );
}

export function notificationGroupsControllerDeleteNotificationGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationGroupsControllerDeleteNotificationGroupResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationGroupsControllerDeleteNotificationGroupResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'NotificationGroupsControllerDeleteNotificationGroupResponse' from JSON`,
  );
}
