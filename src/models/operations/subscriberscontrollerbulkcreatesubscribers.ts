/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerBulkCreateSubscribersResponse = {
  headers: { [k: string]: Array<string> };
  result: components.BulkCreateSubscriberResponseDto;
};

/** @internal */
export const SubscribersControllerBulkCreateSubscribersResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerBulkCreateSubscribersResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.BulkCreateSubscriberResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerBulkCreateSubscribersResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.BulkCreateSubscriberResponseDto$Outbound;
};

/** @internal */
export const SubscribersControllerBulkCreateSubscribersResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerBulkCreateSubscribersResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerBulkCreateSubscribersResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.BulkCreateSubscriberResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerBulkCreateSubscribersResponse$ {
  /** @deprecated use `SubscribersControllerBulkCreateSubscribersResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerBulkCreateSubscribersResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerBulkCreateSubscribersResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerBulkCreateSubscribersResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerBulkCreateSubscribersResponse$Outbound` instead. */
  export type Outbound =
    SubscribersControllerBulkCreateSubscribersResponse$Outbound;
}

export function subscribersControllerBulkCreateSubscribersResponseToJSON(
  subscribersControllerBulkCreateSubscribersResponse:
    SubscribersControllerBulkCreateSubscribersResponse,
): string {
  return JSON.stringify(
    SubscribersControllerBulkCreateSubscribersResponse$outboundSchema.parse(
      subscribersControllerBulkCreateSubscribersResponse,
    ),
  );
}

export function subscribersControllerBulkCreateSubscribersResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerBulkCreateSubscribersResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerBulkCreateSubscribersResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerBulkCreateSubscribersResponse' from JSON`,
  );
}
