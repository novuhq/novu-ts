/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestingControllerIdempotencyRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  idempotencyBodyDto: components.IdempotencyBodyDto;
};

export type TestingControllerIdempotencyResponse = {
  headers: { [k: string]: Array<string> };
  result: components.IdempotencyResponse;
};

/** @internal */
export const TestingControllerIdempotencyRequest$inboundSchema: z.ZodType<
  TestingControllerIdempotencyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Idempotency-Key": z.string().optional(),
  IdempotencyBodyDto: components.IdempotencyBodyDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Idempotency-Key": "idempotencyKey",
    "IdempotencyBodyDto": "idempotencyBodyDto",
  });
});

/** @internal */
export type TestingControllerIdempotencyRequest$Outbound = {
  "Idempotency-Key"?: string | undefined;
  IdempotencyBodyDto: components.IdempotencyBodyDto$Outbound;
};

/** @internal */
export const TestingControllerIdempotencyRequest$outboundSchema: z.ZodType<
  TestingControllerIdempotencyRequest$Outbound,
  z.ZodTypeDef,
  TestingControllerIdempotencyRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  idempotencyBodyDto: components.IdempotencyBodyDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "Idempotency-Key",
    idempotencyBodyDto: "IdempotencyBodyDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestingControllerIdempotencyRequest$ {
  /** @deprecated use `TestingControllerIdempotencyRequest$inboundSchema` instead. */
  export const inboundSchema =
    TestingControllerIdempotencyRequest$inboundSchema;
  /** @deprecated use `TestingControllerIdempotencyRequest$outboundSchema` instead. */
  export const outboundSchema =
    TestingControllerIdempotencyRequest$outboundSchema;
  /** @deprecated use `TestingControllerIdempotencyRequest$Outbound` instead. */
  export type Outbound = TestingControllerIdempotencyRequest$Outbound;
}

export function testingControllerIdempotencyRequestToJSON(
  testingControllerIdempotencyRequest: TestingControllerIdempotencyRequest,
): string {
  return JSON.stringify(
    TestingControllerIdempotencyRequest$outboundSchema.parse(
      testingControllerIdempotencyRequest,
    ),
  );
}

export function testingControllerIdempotencyRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestingControllerIdempotencyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TestingControllerIdempotencyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestingControllerIdempotencyRequest' from JSON`,
  );
}

/** @internal */
export const TestingControllerIdempotencyResponse$inboundSchema: z.ZodType<
  TestingControllerIdempotencyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.IdempotencyResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type TestingControllerIdempotencyResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.IdempotencyResponse$Outbound;
};

/** @internal */
export const TestingControllerIdempotencyResponse$outboundSchema: z.ZodType<
  TestingControllerIdempotencyResponse$Outbound,
  z.ZodTypeDef,
  TestingControllerIdempotencyResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.IdempotencyResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestingControllerIdempotencyResponse$ {
  /** @deprecated use `TestingControllerIdempotencyResponse$inboundSchema` instead. */
  export const inboundSchema =
    TestingControllerIdempotencyResponse$inboundSchema;
  /** @deprecated use `TestingControllerIdempotencyResponse$outboundSchema` instead. */
  export const outboundSchema =
    TestingControllerIdempotencyResponse$outboundSchema;
  /** @deprecated use `TestingControllerIdempotencyResponse$Outbound` instead. */
  export type Outbound = TestingControllerIdempotencyResponse$Outbound;
}

export function testingControllerIdempotencyResponseToJSON(
  testingControllerIdempotencyResponse: TestingControllerIdempotencyResponse,
): string {
  return JSON.stringify(
    TestingControllerIdempotencyResponse$outboundSchema.parse(
      testingControllerIdempotencyResponse,
    ),
  );
}

export function testingControllerIdempotencyResponseFromJSON(
  jsonString: string,
): SafeParseResult<TestingControllerIdempotencyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TestingControllerIdempotencyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestingControllerIdempotencyResponse' from JSON`,
  );
}
