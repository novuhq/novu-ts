/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EventsControllerTriggerBulkRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  bulkTriggerEventDto: components.BulkTriggerEventDto;
};

export type EventsControllerTriggerBulkResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.TriggerEventResponseDto>;
};

/** @internal */
export const EventsControllerTriggerBulkRequest$inboundSchema: z.ZodType<
  EventsControllerTriggerBulkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  BulkTriggerEventDto: components.BulkTriggerEventDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "BulkTriggerEventDto": "bulkTriggerEventDto",
  });
});

/** @internal */
export type EventsControllerTriggerBulkRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  BulkTriggerEventDto: components.BulkTriggerEventDto$Outbound;
};

/** @internal */
export const EventsControllerTriggerBulkRequest$outboundSchema: z.ZodType<
  EventsControllerTriggerBulkRequest$Outbound,
  z.ZodTypeDef,
  EventsControllerTriggerBulkRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  bulkTriggerEventDto: components.BulkTriggerEventDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    bulkTriggerEventDto: "BulkTriggerEventDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsControllerTriggerBulkRequest$ {
  /** @deprecated use `EventsControllerTriggerBulkRequest$inboundSchema` instead. */
  export const inboundSchema = EventsControllerTriggerBulkRequest$inboundSchema;
  /** @deprecated use `EventsControllerTriggerBulkRequest$outboundSchema` instead. */
  export const outboundSchema =
    EventsControllerTriggerBulkRequest$outboundSchema;
  /** @deprecated use `EventsControllerTriggerBulkRequest$Outbound` instead. */
  export type Outbound = EventsControllerTriggerBulkRequest$Outbound;
}

export function eventsControllerTriggerBulkRequestToJSON(
  eventsControllerTriggerBulkRequest: EventsControllerTriggerBulkRequest,
): string {
  return JSON.stringify(
    EventsControllerTriggerBulkRequest$outboundSchema.parse(
      eventsControllerTriggerBulkRequest,
    ),
  );
}

export function eventsControllerTriggerBulkRequestFromJSON(
  jsonString: string,
): SafeParseResult<EventsControllerTriggerBulkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EventsControllerTriggerBulkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsControllerTriggerBulkRequest' from JSON`,
  );
}

/** @internal */
export const EventsControllerTriggerBulkResponse$inboundSchema: z.ZodType<
  EventsControllerTriggerBulkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.TriggerEventResponseDto$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type EventsControllerTriggerBulkResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.TriggerEventResponseDto$Outbound>;
};

/** @internal */
export const EventsControllerTriggerBulkResponse$outboundSchema: z.ZodType<
  EventsControllerTriggerBulkResponse$Outbound,
  z.ZodTypeDef,
  EventsControllerTriggerBulkResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.TriggerEventResponseDto$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsControllerTriggerBulkResponse$ {
  /** @deprecated use `EventsControllerTriggerBulkResponse$inboundSchema` instead. */
  export const inboundSchema =
    EventsControllerTriggerBulkResponse$inboundSchema;
  /** @deprecated use `EventsControllerTriggerBulkResponse$outboundSchema` instead. */
  export const outboundSchema =
    EventsControllerTriggerBulkResponse$outboundSchema;
  /** @deprecated use `EventsControllerTriggerBulkResponse$Outbound` instead. */
  export type Outbound = EventsControllerTriggerBulkResponse$Outbound;
}

export function eventsControllerTriggerBulkResponseToJSON(
  eventsControllerTriggerBulkResponse: EventsControllerTriggerBulkResponse,
): string {
  return JSON.stringify(
    EventsControllerTriggerBulkResponse$outboundSchema.parse(
      eventsControllerTriggerBulkResponse,
    ),
  );
}

export function eventsControllerTriggerBulkResponseFromJSON(
  jsonString: string,
): SafeParseResult<EventsControllerTriggerBulkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EventsControllerTriggerBulkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsControllerTriggerBulkResponse' from JSON`,
  );
}
