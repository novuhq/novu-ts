/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TopicsControllerAssignRequest = {
  /**
   * The topic key
   */
  topicKey: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  addSubscribersRequestDto: components.AddSubscribersRequestDto;
};

export type TopicsControllerAssignResponse = {
  headers: { [k: string]: Array<string> };
  result: components.AssignSubscriberToTopicDto;
};

/** @internal */
export const TopicsControllerAssignRequest$inboundSchema: z.ZodType<
  TopicsControllerAssignRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  topicKey: z.string(),
  "idempotency-key": z.string().optional(),
  AddSubscribersRequestDto: components.AddSubscribersRequestDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "AddSubscribersRequestDto": "addSubscribersRequestDto",
  });
});

/** @internal */
export type TopicsControllerAssignRequest$Outbound = {
  topicKey: string;
  "idempotency-key"?: string | undefined;
  AddSubscribersRequestDto: components.AddSubscribersRequestDto$Outbound;
};

/** @internal */
export const TopicsControllerAssignRequest$outboundSchema: z.ZodType<
  TopicsControllerAssignRequest$Outbound,
  z.ZodTypeDef,
  TopicsControllerAssignRequest
> = z.object({
  topicKey: z.string(),
  idempotencyKey: z.string().optional(),
  addSubscribersRequestDto: components.AddSubscribersRequestDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    addSubscribersRequestDto: "AddSubscribersRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerAssignRequest$ {
  /** @deprecated use `TopicsControllerAssignRequest$inboundSchema` instead. */
  export const inboundSchema = TopicsControllerAssignRequest$inboundSchema;
  /** @deprecated use `TopicsControllerAssignRequest$outboundSchema` instead. */
  export const outboundSchema = TopicsControllerAssignRequest$outboundSchema;
  /** @deprecated use `TopicsControllerAssignRequest$Outbound` instead. */
  export type Outbound = TopicsControllerAssignRequest$Outbound;
}

export function topicsControllerAssignRequestToJSON(
  topicsControllerAssignRequest: TopicsControllerAssignRequest,
): string {
  return JSON.stringify(
    TopicsControllerAssignRequest$outboundSchema.parse(
      topicsControllerAssignRequest,
    ),
  );
}

export function topicsControllerAssignRequestFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerAssignRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicsControllerAssignRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerAssignRequest' from JSON`,
  );
}

/** @internal */
export const TopicsControllerAssignResponse$inboundSchema: z.ZodType<
  TopicsControllerAssignResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.AssignSubscriberToTopicDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type TopicsControllerAssignResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.AssignSubscriberToTopicDto$Outbound;
};

/** @internal */
export const TopicsControllerAssignResponse$outboundSchema: z.ZodType<
  TopicsControllerAssignResponse$Outbound,
  z.ZodTypeDef,
  TopicsControllerAssignResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.AssignSubscriberToTopicDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerAssignResponse$ {
  /** @deprecated use `TopicsControllerAssignResponse$inboundSchema` instead. */
  export const inboundSchema = TopicsControllerAssignResponse$inboundSchema;
  /** @deprecated use `TopicsControllerAssignResponse$outboundSchema` instead. */
  export const outboundSchema = TopicsControllerAssignResponse$outboundSchema;
  /** @deprecated use `TopicsControllerAssignResponse$Outbound` instead. */
  export type Outbound = TopicsControllerAssignResponse$Outbound;
}

export function topicsControllerAssignResponseToJSON(
  topicsControllerAssignResponse: TopicsControllerAssignResponse,
): string {
  return JSON.stringify(
    TopicsControllerAssignResponse$outboundSchema.parse(
      topicsControllerAssignResponse,
    ),
  );
}

export function topicsControllerAssignResponseFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerAssignResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicsControllerAssignResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerAssignResponse' from JSON`,
  );
}
