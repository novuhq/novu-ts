/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerDeleteSubscriberCredentialsRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  subscriberId: string;
  providerId: string;
};

export type SubscribersControllerDeleteSubscriberCredentialsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ErrorDto;
};

/** @internal */
export const SubscribersControllerDeleteSubscriberCredentialsRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerDeleteSubscriberCredentialsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "Idempotency-Key": z.string().optional(),
    subscriberId: z.string(),
    providerId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "Idempotency-Key": "idempotencyKey",
    });
  });

/** @internal */
export type SubscribersControllerDeleteSubscriberCredentialsRequest$Outbound = {
  "Idempotency-Key"?: string | undefined;
  subscriberId: string;
  providerId: string;
};

/** @internal */
export const SubscribersControllerDeleteSubscriberCredentialsRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerDeleteSubscriberCredentialsRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerDeleteSubscriberCredentialsRequest
  > = z.object({
    idempotencyKey: z.string().optional(),
    subscriberId: z.string(),
    providerId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "Idempotency-Key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerDeleteSubscriberCredentialsRequest$ {
  /** @deprecated use `SubscribersControllerDeleteSubscriberCredentialsRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerDeleteSubscriberCredentialsRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerDeleteSubscriberCredentialsRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerDeleteSubscriberCredentialsRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerDeleteSubscriberCredentialsRequest$Outbound` instead. */
  export type Outbound =
    SubscribersControllerDeleteSubscriberCredentialsRequest$Outbound;
}

export function subscribersControllerDeleteSubscriberCredentialsRequestToJSON(
  subscribersControllerDeleteSubscriberCredentialsRequest:
    SubscribersControllerDeleteSubscriberCredentialsRequest,
): string {
  return JSON.stringify(
    SubscribersControllerDeleteSubscriberCredentialsRequest$outboundSchema
      .parse(subscribersControllerDeleteSubscriberCredentialsRequest),
  );
}

export function subscribersControllerDeleteSubscriberCredentialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerDeleteSubscriberCredentialsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerDeleteSubscriberCredentialsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersControllerDeleteSubscriberCredentialsRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerDeleteSubscriberCredentialsResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerDeleteSubscriberCredentialsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.ErrorDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerDeleteSubscriberCredentialsResponse$Outbound =
  {
    Headers: { [k: string]: Array<string> };
    Result: components.ErrorDto$Outbound;
  };

/** @internal */
export const SubscribersControllerDeleteSubscriberCredentialsResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerDeleteSubscriberCredentialsResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerDeleteSubscriberCredentialsResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.ErrorDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerDeleteSubscriberCredentialsResponse$ {
  /** @deprecated use `SubscribersControllerDeleteSubscriberCredentialsResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerDeleteSubscriberCredentialsResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerDeleteSubscriberCredentialsResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerDeleteSubscriberCredentialsResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerDeleteSubscriberCredentialsResponse$Outbound` instead. */
  export type Outbound =
    SubscribersControllerDeleteSubscriberCredentialsResponse$Outbound;
}

export function subscribersControllerDeleteSubscriberCredentialsResponseToJSON(
  subscribersControllerDeleteSubscriberCredentialsResponse:
    SubscribersControllerDeleteSubscriberCredentialsResponse,
): string {
  return JSON.stringify(
    SubscribersControllerDeleteSubscriberCredentialsResponse$outboundSchema
      .parse(subscribersControllerDeleteSubscriberCredentialsResponse),
  );
}

export function subscribersControllerDeleteSubscriberCredentialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerDeleteSubscriberCredentialsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerDeleteSubscriberCredentialsResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersControllerDeleteSubscriberCredentialsResponse' from JSON`,
  );
}
