/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerListSubscribersRequest = {
  page?: number | undefined;
  limit?: number | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type SubscribersControllerListSubscribersResponseBody = {
  /**
   * The current page of the paginated response
   */
  page: number;
  /**
   * Does the list have more items to fetch
   */
  hasMore: boolean;
  /**
   * Number of items on each page
   */
  pageSize: number;
  data: Array<components.SubscriberResponseDto>;
};

export type SubscribersControllerListSubscribersResponse = {
  headers: { [k: string]: Array<string> };
  result: SubscribersControllerListSubscribersResponseBody;
};

/** @internal */
export const SubscribersControllerListSubscribersRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerListSubscribersRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    page: z.number().optional(),
    limit: z.number().default(10),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type SubscribersControllerListSubscribersRequest$Outbound = {
  page?: number | undefined;
  limit: number;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const SubscribersControllerListSubscribersRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerListSubscribersRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerListSubscribersRequest
  > = z.object({
    page: z.number().optional(),
    limit: z.number().default(10),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerListSubscribersRequest$ {
  /** @deprecated use `SubscribersControllerListSubscribersRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerListSubscribersRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerListSubscribersRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerListSubscribersRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerListSubscribersRequest$Outbound` instead. */
  export type Outbound = SubscribersControllerListSubscribersRequest$Outbound;
}

export function subscribersControllerListSubscribersRequestToJSON(
  subscribersControllerListSubscribersRequest:
    SubscribersControllerListSubscribersRequest,
): string {
  return JSON.stringify(
    SubscribersControllerListSubscribersRequest$outboundSchema.parse(
      subscribersControllerListSubscribersRequest,
    ),
  );
}

export function subscribersControllerListSubscribersRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerListSubscribersRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerListSubscribersRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerListSubscribersRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerListSubscribersResponseBody$inboundSchema:
  z.ZodType<
    SubscribersControllerListSubscribersResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    page: z.number(),
    hasMore: z.boolean(),
    pageSize: z.number(),
    data: z.array(components.SubscriberResponseDto$inboundSchema),
  });

/** @internal */
export type SubscribersControllerListSubscribersResponseBody$Outbound = {
  page: number;
  hasMore: boolean;
  pageSize: number;
  data: Array<components.SubscriberResponseDto$Outbound>;
};

/** @internal */
export const SubscribersControllerListSubscribersResponseBody$outboundSchema:
  z.ZodType<
    SubscribersControllerListSubscribersResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerListSubscribersResponseBody
  > = z.object({
    page: z.number(),
    hasMore: z.boolean(),
    pageSize: z.number(),
    data: z.array(components.SubscriberResponseDto$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerListSubscribersResponseBody$ {
  /** @deprecated use `SubscribersControllerListSubscribersResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerListSubscribersResponseBody$inboundSchema;
  /** @deprecated use `SubscribersControllerListSubscribersResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerListSubscribersResponseBody$outboundSchema;
  /** @deprecated use `SubscribersControllerListSubscribersResponseBody$Outbound` instead. */
  export type Outbound =
    SubscribersControllerListSubscribersResponseBody$Outbound;
}

export function subscribersControllerListSubscribersResponseBodyToJSON(
  subscribersControllerListSubscribersResponseBody:
    SubscribersControllerListSubscribersResponseBody,
): string {
  return JSON.stringify(
    SubscribersControllerListSubscribersResponseBody$outboundSchema.parse(
      subscribersControllerListSubscribersResponseBody,
    ),
  );
}

export function subscribersControllerListSubscribersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerListSubscribersResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerListSubscribersResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerListSubscribersResponseBody' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerListSubscribersResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerListSubscribersResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.lazy(() =>
      SubscribersControllerListSubscribersResponseBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerListSubscribersResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: SubscribersControllerListSubscribersResponseBody$Outbound;
};

/** @internal */
export const SubscribersControllerListSubscribersResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerListSubscribersResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerListSubscribersResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.lazy(() =>
      SubscribersControllerListSubscribersResponseBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerListSubscribersResponse$ {
  /** @deprecated use `SubscribersControllerListSubscribersResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerListSubscribersResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerListSubscribersResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerListSubscribersResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerListSubscribersResponse$Outbound` instead. */
  export type Outbound = SubscribersControllerListSubscribersResponse$Outbound;
}

export function subscribersControllerListSubscribersResponseToJSON(
  subscribersControllerListSubscribersResponse:
    SubscribersControllerListSubscribersResponse,
): string {
  return JSON.stringify(
    SubscribersControllerListSubscribersResponse$outboundSchema.parse(
      subscribersControllerListSubscribersResponse,
    ),
  );
}

export function subscribersControllerListSubscribersResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerListSubscribersResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerListSubscribersResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerListSubscribersResponse' from JSON`,
  );
}
