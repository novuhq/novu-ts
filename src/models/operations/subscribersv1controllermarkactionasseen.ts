/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersV1ControllerMarkActionAsSeenRequest = {
  messageId: string;
  type?: any | undefined;
  subscriberId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  markMessageActionAsSeenDto: components.MarkMessageActionAsSeenDto;
};

export type SubscribersV1ControllerMarkActionAsSeenResponse = {
  headers: { [k: string]: Array<string> };
  result: components.MessageResponseDto;
};

/** @internal */
export const SubscribersV1ControllerMarkActionAsSeenRequest$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerMarkActionAsSeenRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    messageId: z.string(),
    type: z.any().optional(),
    subscriberId: z.string(),
    "idempotency-key": z.string().optional(),
    MarkMessageActionAsSeenDto:
      components.MarkMessageActionAsSeenDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "MarkMessageActionAsSeenDto": "markMessageActionAsSeenDto",
    });
  });

/** @internal */
export type SubscribersV1ControllerMarkActionAsSeenRequest$Outbound = {
  messageId: string;
  type?: any | undefined;
  subscriberId: string;
  "idempotency-key"?: string | undefined;
  MarkMessageActionAsSeenDto: components.MarkMessageActionAsSeenDto$Outbound;
};

/** @internal */
export const SubscribersV1ControllerMarkActionAsSeenRequest$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerMarkActionAsSeenRequest$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerMarkActionAsSeenRequest
  > = z.object({
    messageId: z.string(),
    type: z.any().optional(),
    subscriberId: z.string(),
    idempotencyKey: z.string().optional(),
    markMessageActionAsSeenDto:
      components.MarkMessageActionAsSeenDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      markMessageActionAsSeenDto: "MarkMessageActionAsSeenDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerMarkActionAsSeenRequest$ {
  /** @deprecated use `SubscribersV1ControllerMarkActionAsSeenRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerMarkActionAsSeenRequest$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerMarkActionAsSeenRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerMarkActionAsSeenRequest$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerMarkActionAsSeenRequest$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerMarkActionAsSeenRequest$Outbound;
}

export function subscribersV1ControllerMarkActionAsSeenRequestToJSON(
  subscribersV1ControllerMarkActionAsSeenRequest:
    SubscribersV1ControllerMarkActionAsSeenRequest,
): string {
  return JSON.stringify(
    SubscribersV1ControllerMarkActionAsSeenRequest$outboundSchema.parse(
      subscribersV1ControllerMarkActionAsSeenRequest,
    ),
  );
}

export function subscribersV1ControllerMarkActionAsSeenRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerMarkActionAsSeenRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerMarkActionAsSeenRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersV1ControllerMarkActionAsSeenRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersV1ControllerMarkActionAsSeenResponse$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerMarkActionAsSeenResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())).default({}),
    Result: components.MessageResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersV1ControllerMarkActionAsSeenResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.MessageResponseDto$Outbound;
};

/** @internal */
export const SubscribersV1ControllerMarkActionAsSeenResponse$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerMarkActionAsSeenResponse$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerMarkActionAsSeenResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.MessageResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerMarkActionAsSeenResponse$ {
  /** @deprecated use `SubscribersV1ControllerMarkActionAsSeenResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerMarkActionAsSeenResponse$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerMarkActionAsSeenResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerMarkActionAsSeenResponse$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerMarkActionAsSeenResponse$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerMarkActionAsSeenResponse$Outbound;
}

export function subscribersV1ControllerMarkActionAsSeenResponseToJSON(
  subscribersV1ControllerMarkActionAsSeenResponse:
    SubscribersV1ControllerMarkActionAsSeenResponse,
): string {
  return JSON.stringify(
    SubscribersV1ControllerMarkActionAsSeenResponse$outboundSchema.parse(
      subscribersV1ControllerMarkActionAsSeenResponse,
    ),
  );
}

export function subscribersV1ControllerMarkActionAsSeenResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerMarkActionAsSeenResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerMarkActionAsSeenResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersV1ControllerMarkActionAsSeenResponse' from JSON`,
  );
}
