/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContextsControllerCreateContextRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  createContextRequestDto: components.CreateContextRequestDto;
};

export type ContextsControllerCreateContextResponse = {
  headers: { [k: string]: Array<string> };
  result: components.GetContextResponseDto;
};

/** @internal */
export const ContextsControllerCreateContextRequest$inboundSchema: z.ZodType<
  ContextsControllerCreateContextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  CreateContextRequestDto: components.CreateContextRequestDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "CreateContextRequestDto": "createContextRequestDto",
  });
});

/** @internal */
export type ContextsControllerCreateContextRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  CreateContextRequestDto: components.CreateContextRequestDto$Outbound;
};

/** @internal */
export const ContextsControllerCreateContextRequest$outboundSchema: z.ZodType<
  ContextsControllerCreateContextRequest$Outbound,
  z.ZodTypeDef,
  ContextsControllerCreateContextRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  createContextRequestDto: components.CreateContextRequestDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    createContextRequestDto: "CreateContextRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerCreateContextRequest$ {
  /** @deprecated use `ContextsControllerCreateContextRequest$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerCreateContextRequest$inboundSchema;
  /** @deprecated use `ContextsControllerCreateContextRequest$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerCreateContextRequest$outboundSchema;
  /** @deprecated use `ContextsControllerCreateContextRequest$Outbound` instead. */
  export type Outbound = ContextsControllerCreateContextRequest$Outbound;
}

export function contextsControllerCreateContextRequestToJSON(
  contextsControllerCreateContextRequest:
    ContextsControllerCreateContextRequest,
): string {
  return JSON.stringify(
    ContextsControllerCreateContextRequest$outboundSchema.parse(
      contextsControllerCreateContextRequest,
    ),
  );
}

export function contextsControllerCreateContextRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContextsControllerCreateContextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerCreateContextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextsControllerCreateContextRequest' from JSON`,
  );
}

/** @internal */
export const ContextsControllerCreateContextResponse$inboundSchema: z.ZodType<
  ContextsControllerCreateContextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.GetContextResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ContextsControllerCreateContextResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.GetContextResponseDto$Outbound;
};

/** @internal */
export const ContextsControllerCreateContextResponse$outboundSchema: z.ZodType<
  ContextsControllerCreateContextResponse$Outbound,
  z.ZodTypeDef,
  ContextsControllerCreateContextResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.GetContextResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerCreateContextResponse$ {
  /** @deprecated use `ContextsControllerCreateContextResponse$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerCreateContextResponse$inboundSchema;
  /** @deprecated use `ContextsControllerCreateContextResponse$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerCreateContextResponse$outboundSchema;
  /** @deprecated use `ContextsControllerCreateContextResponse$Outbound` instead. */
  export type Outbound = ContextsControllerCreateContextResponse$Outbound;
}

export function contextsControllerCreateContextResponseToJSON(
  contextsControllerCreateContextResponse:
    ContextsControllerCreateContextResponse,
): string {
  return JSON.stringify(
    ContextsControllerCreateContextResponse$outboundSchema.parse(
      contextsControllerCreateContextResponse,
    ),
  );
}

export function contextsControllerCreateContextResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ContextsControllerCreateContextResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerCreateContextResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ContextsControllerCreateContextResponse' from JSON`,
  );
}
