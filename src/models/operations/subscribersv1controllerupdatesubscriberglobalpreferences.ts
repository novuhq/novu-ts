/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest = {
  subscriberId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  updateSubscriberGlobalPreferencesRequestDto:
    components.UpdateSubscriberGlobalPreferencesRequestDto;
};

export type SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse = {
  headers: { [k: string]: Array<string> };
  result: components.UpdateSubscriberPreferenceGlobalResponseDto;
};

/** @internal */
export const SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    "idempotency-key": z.string().optional(),
    UpdateSubscriberGlobalPreferencesRequestDto:
      components.UpdateSubscriberGlobalPreferencesRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "UpdateSubscriberGlobalPreferencesRequestDto":
        "updateSubscriberGlobalPreferencesRequestDto",
    });
  });

/** @internal */
export type SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$Outbound =
  {
    subscriberId: string;
    "idempotency-key"?: string | undefined;
    UpdateSubscriberGlobalPreferencesRequestDto:
      components.UpdateSubscriberGlobalPreferencesRequestDto$Outbound;
  };

/** @internal */
export const SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest
  > = z.object({
    subscriberId: z.string(),
    idempotencyKey: z.string().optional(),
    updateSubscriberGlobalPreferencesRequestDto:
      components.UpdateSubscriberGlobalPreferencesRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      updateSubscriberGlobalPreferencesRequestDto:
        "UpdateSubscriberGlobalPreferencesRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$ {
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$Outbound;
}

export function subscribersV1ControllerUpdateSubscriberGlobalPreferencesRequestToJSON(
  subscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest:
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest,
): string {
  return JSON.stringify(
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$outboundSchema
      .parse(subscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest),
  );
}

export function subscribersV1ControllerUpdateSubscriberGlobalPreferencesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersV1ControllerUpdateSubscriberGlobalPreferencesRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result:
      components.UpdateSubscriberPreferenceGlobalResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$Outbound =
  {
    Headers: { [k: string]: Array<string> };
    Result: components.UpdateSubscriberPreferenceGlobalResponseDto$Outbound;
  };

/** @internal */
export const SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result:
      components.UpdateSubscriberPreferenceGlobalResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$ {
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$Outbound;
}

export function subscribersV1ControllerUpdateSubscriberGlobalPreferencesResponseToJSON(
  subscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse:
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse,
): string {
  return JSON.stringify(
    SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$outboundSchema
      .parse(subscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse),
  );
}

export function subscribersV1ControllerUpdateSubscriberGlobalPreferencesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersV1ControllerUpdateSubscriberGlobalPreferencesResponse' from JSON`,
  );
}
