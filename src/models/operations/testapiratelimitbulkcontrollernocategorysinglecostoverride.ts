/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest =
  {
    /**
     * A header for idempotency purposes
     */
    idempotencyKey?: string | undefined;
  };

/** @internal */
export const TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$inboundSchema:
  z.ZodType<
    TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$Outbound =
  {
    "idempotency-key"?: string | undefined;
  };

/** @internal */
export const TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$outboundSchema:
  z.ZodType<
    TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$Outbound,
    z.ZodTypeDef,
    TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest
  > = z.object({
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$ {
  /** @deprecated use `TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$inboundSchema` instead. */
  export const inboundSchema =
    TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$inboundSchema;
  /** @deprecated use `TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$outboundSchema` instead. */
  export const outboundSchema =
    TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$outboundSchema;
  /** @deprecated use `TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$Outbound` instead. */
  export type Outbound =
    TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$Outbound;
}

export function testApiRateLimitBulkControllerNoCategorySingleCostOverrideRequestToJSON(
  testApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest:
    TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest,
): string {
  return JSON.stringify(
    TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$outboundSchema
      .parse(testApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest),
  );
}

export function testApiRateLimitBulkControllerNoCategorySingleCostOverrideRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TestApiRateLimitBulkControllerNoCategorySingleCostOverrideRequest' from JSON`,
  );
}
