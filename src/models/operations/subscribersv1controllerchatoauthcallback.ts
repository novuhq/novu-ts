/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersV1ControllerChatOauthCallbackRequest = {
  subscriberId: string;
  providerId?: any | undefined;
  /**
   * HMAC hash for the request
   */
  hmacHash: string;
  /**
   * The ID of the environment, must be a valid MongoDB ID
   */
  environmentId: string;
  /**
   * Optional integration identifier
   */
  integrationIdentifier?: string | undefined;
  /**
   * Optional authorization code returned from the OAuth provider
   */
  code: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type SubscribersV1ControllerChatOauthCallbackResponseResult =
  | string
  | string;

export type SubscribersV1ControllerChatOauthCallbackResponse = {
  headers: { [k: string]: Array<string> };
  result: string | string;
};

/** @internal */
export const SubscribersV1ControllerChatOauthCallbackRequest$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatOauthCallbackRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    providerId: z.any().optional(),
    hmacHash: z.string(),
    environmentId: z.string(),
    integrationIdentifier: z.string().optional(),
    code: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type SubscribersV1ControllerChatOauthCallbackRequest$Outbound = {
  subscriberId: string;
  providerId?: any | undefined;
  hmacHash: string;
  environmentId: string;
  integrationIdentifier?: string | undefined;
  code: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const SubscribersV1ControllerChatOauthCallbackRequest$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatOauthCallbackRequest$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerChatOauthCallbackRequest
  > = z.object({
    subscriberId: z.string(),
    providerId: z.any().optional(),
    hmacHash: z.string(),
    environmentId: z.string(),
    integrationIdentifier: z.string().optional(),
    code: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerChatOauthCallbackRequest$ {
  /** @deprecated use `SubscribersV1ControllerChatOauthCallbackRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerChatOauthCallbackRequest$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatOauthCallbackRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerChatOauthCallbackRequest$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatOauthCallbackRequest$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerChatOauthCallbackRequest$Outbound;
}

export function subscribersV1ControllerChatOauthCallbackRequestToJSON(
  subscribersV1ControllerChatOauthCallbackRequest:
    SubscribersV1ControllerChatOauthCallbackRequest,
): string {
  return JSON.stringify(
    SubscribersV1ControllerChatOauthCallbackRequest$outboundSchema.parse(
      subscribersV1ControllerChatOauthCallbackRequest,
    ),
  );
}

export function subscribersV1ControllerChatOauthCallbackRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerChatOauthCallbackRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerChatOauthCallbackRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersV1ControllerChatOauthCallbackRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersV1ControllerChatOauthCallbackResponseResult$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatOauthCallbackResponseResult,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.string()]);

/** @internal */
export type SubscribersV1ControllerChatOauthCallbackResponseResult$Outbound =
  | string
  | string;

/** @internal */
export const SubscribersV1ControllerChatOauthCallbackResponseResult$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatOauthCallbackResponseResult$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerChatOauthCallbackResponseResult
  > = z.union([z.string(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerChatOauthCallbackResponseResult$ {
  /** @deprecated use `SubscribersV1ControllerChatOauthCallbackResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerChatOauthCallbackResponseResult$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatOauthCallbackResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerChatOauthCallbackResponseResult$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatOauthCallbackResponseResult$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerChatOauthCallbackResponseResult$Outbound;
}

export function subscribersV1ControllerChatOauthCallbackResponseResultToJSON(
  subscribersV1ControllerChatOauthCallbackResponseResult:
    SubscribersV1ControllerChatOauthCallbackResponseResult,
): string {
  return JSON.stringify(
    SubscribersV1ControllerChatOauthCallbackResponseResult$outboundSchema.parse(
      subscribersV1ControllerChatOauthCallbackResponseResult,
    ),
  );
}

export function subscribersV1ControllerChatOauthCallbackResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerChatOauthCallbackResponseResult,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerChatOauthCallbackResponseResult$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersV1ControllerChatOauthCallbackResponseResult' from JSON`,
  );
}

/** @internal */
export const SubscribersV1ControllerChatOauthCallbackResponse$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatOauthCallbackResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.union([z.string(), z.string()]),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersV1ControllerChatOauthCallbackResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: string | string;
};

/** @internal */
export const SubscribersV1ControllerChatOauthCallbackResponse$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatOauthCallbackResponse$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerChatOauthCallbackResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.union([z.string(), z.string()]),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerChatOauthCallbackResponse$ {
  /** @deprecated use `SubscribersV1ControllerChatOauthCallbackResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerChatOauthCallbackResponse$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatOauthCallbackResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerChatOauthCallbackResponse$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatOauthCallbackResponse$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerChatOauthCallbackResponse$Outbound;
}

export function subscribersV1ControllerChatOauthCallbackResponseToJSON(
  subscribersV1ControllerChatOauthCallbackResponse:
    SubscribersV1ControllerChatOauthCallbackResponse,
): string {
  return JSON.stringify(
    SubscribersV1ControllerChatOauthCallbackResponse$outboundSchema.parse(
      subscribersV1ControllerChatOauthCallbackResponse,
    ),
  );
}

export function subscribersV1ControllerChatOauthCallbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerChatOauthCallbackResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerChatOauthCallbackResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersV1ControllerChatOauthCallbackResponse' from JSON`,
  );
}
