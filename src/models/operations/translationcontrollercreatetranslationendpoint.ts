/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TranslationControllerCreateTranslationEndpointRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  createTranslationRequestDto: components.CreateTranslationRequestDto;
};

/** @internal */
export const TranslationControllerCreateTranslationEndpointRequest$inboundSchema:
  z.ZodType<
    TranslationControllerCreateTranslationEndpointRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "idempotency-key": z.string().optional(),
    CreateTranslationRequestDto:
      components.CreateTranslationRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "CreateTranslationRequestDto": "createTranslationRequestDto",
    });
  });

/** @internal */
export type TranslationControllerCreateTranslationEndpointRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  CreateTranslationRequestDto: components.CreateTranslationRequestDto$Outbound;
};

/** @internal */
export const TranslationControllerCreateTranslationEndpointRequest$outboundSchema:
  z.ZodType<
    TranslationControllerCreateTranslationEndpointRequest$Outbound,
    z.ZodTypeDef,
    TranslationControllerCreateTranslationEndpointRequest
  > = z.object({
    idempotencyKey: z.string().optional(),
    createTranslationRequestDto:
      components.CreateTranslationRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      createTranslationRequestDto: "CreateTranslationRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationControllerCreateTranslationEndpointRequest$ {
  /** @deprecated use `TranslationControllerCreateTranslationEndpointRequest$inboundSchema` instead. */
  export const inboundSchema =
    TranslationControllerCreateTranslationEndpointRequest$inboundSchema;
  /** @deprecated use `TranslationControllerCreateTranslationEndpointRequest$outboundSchema` instead. */
  export const outboundSchema =
    TranslationControllerCreateTranslationEndpointRequest$outboundSchema;
  /** @deprecated use `TranslationControllerCreateTranslationEndpointRequest$Outbound` instead. */
  export type Outbound =
    TranslationControllerCreateTranslationEndpointRequest$Outbound;
}

export function translationControllerCreateTranslationEndpointRequestToJSON(
  translationControllerCreateTranslationEndpointRequest:
    TranslationControllerCreateTranslationEndpointRequest,
): string {
  return JSON.stringify(
    TranslationControllerCreateTranslationEndpointRequest$outboundSchema.parse(
      translationControllerCreateTranslationEndpointRequest,
    ),
  );
}

export function translationControllerCreateTranslationEndpointRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TranslationControllerCreateTranslationEndpointRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TranslationControllerCreateTranslationEndpointRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TranslationControllerCreateTranslationEndpointRequest' from JSON`,
  );
}
