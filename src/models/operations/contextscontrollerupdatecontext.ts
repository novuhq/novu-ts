/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContextsControllerUpdateContextRequest = {
  /**
   * Context ID
   */
  id: string;
  /**
   * Context type
   */
  type: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  updateContextRequestDto: components.UpdateContextRequestDto;
};

export type ContextsControllerUpdateContextResponse = {
  headers: { [k: string]: Array<string> };
  result: components.GetContextResponseDto;
};

/** @internal */
export const ContextsControllerUpdateContextRequest$inboundSchema: z.ZodType<
  ContextsControllerUpdateContextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  "idempotency-key": z.string().optional(),
  UpdateContextRequestDto: components.UpdateContextRequestDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "UpdateContextRequestDto": "updateContextRequestDto",
  });
});

/** @internal */
export type ContextsControllerUpdateContextRequest$Outbound = {
  id: string;
  type: string;
  "idempotency-key"?: string | undefined;
  UpdateContextRequestDto: components.UpdateContextRequestDto$Outbound;
};

/** @internal */
export const ContextsControllerUpdateContextRequest$outboundSchema: z.ZodType<
  ContextsControllerUpdateContextRequest$Outbound,
  z.ZodTypeDef,
  ContextsControllerUpdateContextRequest
> = z.object({
  id: z.string(),
  type: z.string(),
  idempotencyKey: z.string().optional(),
  updateContextRequestDto: components.UpdateContextRequestDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    updateContextRequestDto: "UpdateContextRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerUpdateContextRequest$ {
  /** @deprecated use `ContextsControllerUpdateContextRequest$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerUpdateContextRequest$inboundSchema;
  /** @deprecated use `ContextsControllerUpdateContextRequest$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerUpdateContextRequest$outboundSchema;
  /** @deprecated use `ContextsControllerUpdateContextRequest$Outbound` instead. */
  export type Outbound = ContextsControllerUpdateContextRequest$Outbound;
}

export function contextsControllerUpdateContextRequestToJSON(
  contextsControllerUpdateContextRequest:
    ContextsControllerUpdateContextRequest,
): string {
  return JSON.stringify(
    ContextsControllerUpdateContextRequest$outboundSchema.parse(
      contextsControllerUpdateContextRequest,
    ),
  );
}

export function contextsControllerUpdateContextRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContextsControllerUpdateContextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerUpdateContextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextsControllerUpdateContextRequest' from JSON`,
  );
}

/** @internal */
export const ContextsControllerUpdateContextResponse$inboundSchema: z.ZodType<
  ContextsControllerUpdateContextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.GetContextResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ContextsControllerUpdateContextResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.GetContextResponseDto$Outbound;
};

/** @internal */
export const ContextsControllerUpdateContextResponse$outboundSchema: z.ZodType<
  ContextsControllerUpdateContextResponse$Outbound,
  z.ZodTypeDef,
  ContextsControllerUpdateContextResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.GetContextResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerUpdateContextResponse$ {
  /** @deprecated use `ContextsControllerUpdateContextResponse$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerUpdateContextResponse$inboundSchema;
  /** @deprecated use `ContextsControllerUpdateContextResponse$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerUpdateContextResponse$outboundSchema;
  /** @deprecated use `ContextsControllerUpdateContextResponse$Outbound` instead. */
  export type Outbound = ContextsControllerUpdateContextResponse$Outbound;
}

export function contextsControllerUpdateContextResponseToJSON(
  contextsControllerUpdateContextResponse:
    ContextsControllerUpdateContextResponse,
): string {
  return JSON.stringify(
    ContextsControllerUpdateContextResponse$outboundSchema.parse(
      contextsControllerUpdateContextResponse,
    ),
  );
}

export function contextsControllerUpdateContextResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ContextsControllerUpdateContextResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerUpdateContextResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ContextsControllerUpdateContextResponse' from JSON`,
  );
}
