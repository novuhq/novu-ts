/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InboundWebhooksControllerHandleWebhookRequest = {
  environmentId: string;
  integrationId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const InboundWebhooksControllerHandleWebhookRequest$inboundSchema:
  z.ZodType<
    InboundWebhooksControllerHandleWebhookRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    environmentId: z.string(),
    integrationId: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type InboundWebhooksControllerHandleWebhookRequest$Outbound = {
  environmentId: string;
  integrationId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const InboundWebhooksControllerHandleWebhookRequest$outboundSchema:
  z.ZodType<
    InboundWebhooksControllerHandleWebhookRequest$Outbound,
    z.ZodTypeDef,
    InboundWebhooksControllerHandleWebhookRequest
  > = z.object({
    environmentId: z.string(),
    integrationId: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InboundWebhooksControllerHandleWebhookRequest$ {
  /** @deprecated use `InboundWebhooksControllerHandleWebhookRequest$inboundSchema` instead. */
  export const inboundSchema =
    InboundWebhooksControllerHandleWebhookRequest$inboundSchema;
  /** @deprecated use `InboundWebhooksControllerHandleWebhookRequest$outboundSchema` instead. */
  export const outboundSchema =
    InboundWebhooksControllerHandleWebhookRequest$outboundSchema;
  /** @deprecated use `InboundWebhooksControllerHandleWebhookRequest$Outbound` instead. */
  export type Outbound = InboundWebhooksControllerHandleWebhookRequest$Outbound;
}

export function inboundWebhooksControllerHandleWebhookRequestToJSON(
  inboundWebhooksControllerHandleWebhookRequest:
    InboundWebhooksControllerHandleWebhookRequest,
): string {
  return JSON.stringify(
    InboundWebhooksControllerHandleWebhookRequest$outboundSchema.parse(
      inboundWebhooksControllerHandleWebhookRequest,
    ),
  );
}

export function inboundWebhooksControllerHandleWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  InboundWebhooksControllerHandleWebhookRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InboundWebhooksControllerHandleWebhookRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InboundWebhooksControllerHandleWebhookRequest' from JSON`,
  );
}
