/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LayoutsControllerCreateRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  /**
   * Layout creation details
   */
  createLayoutDto: components.CreateLayoutDto;
};

export type LayoutsControllerCreateResponse = {
  headers: { [k: string]: Array<string> };
  result: components.LayoutResponseDto;
};

/** @internal */
export const LayoutsControllerCreateRequest$inboundSchema: z.ZodType<
  LayoutsControllerCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  CreateLayoutDto: components.CreateLayoutDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "CreateLayoutDto": "createLayoutDto",
  });
});

/** @internal */
export type LayoutsControllerCreateRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  CreateLayoutDto: components.CreateLayoutDto$Outbound;
};

/** @internal */
export const LayoutsControllerCreateRequest$outboundSchema: z.ZodType<
  LayoutsControllerCreateRequest$Outbound,
  z.ZodTypeDef,
  LayoutsControllerCreateRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  createLayoutDto: components.CreateLayoutDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    createLayoutDto: "CreateLayoutDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerCreateRequest$ {
  /** @deprecated use `LayoutsControllerCreateRequest$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerCreateRequest$inboundSchema;
  /** @deprecated use `LayoutsControllerCreateRequest$outboundSchema` instead. */
  export const outboundSchema = LayoutsControllerCreateRequest$outboundSchema;
  /** @deprecated use `LayoutsControllerCreateRequest$Outbound` instead. */
  export type Outbound = LayoutsControllerCreateRequest$Outbound;
}

export function layoutsControllerCreateRequestToJSON(
  layoutsControllerCreateRequest: LayoutsControllerCreateRequest,
): string {
  return JSON.stringify(
    LayoutsControllerCreateRequest$outboundSchema.parse(
      layoutsControllerCreateRequest,
    ),
  );
}

export function layoutsControllerCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerCreateRequest' from JSON`,
  );
}

/** @internal */
export const LayoutsControllerCreateResponse$inboundSchema: z.ZodType<
  LayoutsControllerCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.LayoutResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type LayoutsControllerCreateResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.LayoutResponseDto$Outbound;
};

/** @internal */
export const LayoutsControllerCreateResponse$outboundSchema: z.ZodType<
  LayoutsControllerCreateResponse$Outbound,
  z.ZodTypeDef,
  LayoutsControllerCreateResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.LayoutResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerCreateResponse$ {
  /** @deprecated use `LayoutsControllerCreateResponse$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerCreateResponse$inboundSchema;
  /** @deprecated use `LayoutsControllerCreateResponse$outboundSchema` instead. */
  export const outboundSchema = LayoutsControllerCreateResponse$outboundSchema;
  /** @deprecated use `LayoutsControllerCreateResponse$Outbound` instead. */
  export type Outbound = LayoutsControllerCreateResponse$Outbound;
}

export function layoutsControllerCreateResponseToJSON(
  layoutsControllerCreateResponse: LayoutsControllerCreateResponse,
): string {
  return JSON.stringify(
    LayoutsControllerCreateResponse$outboundSchema.parse(
      layoutsControllerCreateResponse,
    ),
  );
}

export function layoutsControllerCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerCreateResponse' from JSON`,
  );
}
