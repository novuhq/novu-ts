/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MessagesControllerGetMessagesRequest = {
  /**
   * Channel type through which the message is sent
   */
  channel?: components.ChannelTypeEnum | undefined;
  subscriberId?: string | undefined;
  transactionId?: Array<string> | undefined;
  page?: number | undefined;
  limit?: number | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type MessagesControllerGetMessagesResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ActivitiesResponseDto;
};

/** @internal */
export const MessagesControllerGetMessagesRequest$inboundSchema: z.ZodType<
  MessagesControllerGetMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel: components.ChannelTypeEnum$inboundSchema.optional(),
  subscriberId: z.string().optional(),
  transactionId: z.array(z.string()).optional(),
  page: z.number().default(0),
  limit: z.number().default(10),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type MessagesControllerGetMessagesRequest$Outbound = {
  channel?: string | undefined;
  subscriberId?: string | undefined;
  transactionId?: Array<string> | undefined;
  page: number;
  limit: number;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const MessagesControllerGetMessagesRequest$outboundSchema: z.ZodType<
  MessagesControllerGetMessagesRequest$Outbound,
  z.ZodTypeDef,
  MessagesControllerGetMessagesRequest
> = z.object({
  channel: components.ChannelTypeEnum$outboundSchema.optional(),
  subscriberId: z.string().optional(),
  transactionId: z.array(z.string()).optional(),
  page: z.number().default(0),
  limit: z.number().default(10),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesControllerGetMessagesRequest$ {
  /** @deprecated use `MessagesControllerGetMessagesRequest$inboundSchema` instead. */
  export const inboundSchema =
    MessagesControllerGetMessagesRequest$inboundSchema;
  /** @deprecated use `MessagesControllerGetMessagesRequest$outboundSchema` instead. */
  export const outboundSchema =
    MessagesControllerGetMessagesRequest$outboundSchema;
  /** @deprecated use `MessagesControllerGetMessagesRequest$Outbound` instead. */
  export type Outbound = MessagesControllerGetMessagesRequest$Outbound;
}

export function messagesControllerGetMessagesRequestToJSON(
  messagesControllerGetMessagesRequest: MessagesControllerGetMessagesRequest,
): string {
  return JSON.stringify(
    MessagesControllerGetMessagesRequest$outboundSchema.parse(
      messagesControllerGetMessagesRequest,
    ),
  );
}

export function messagesControllerGetMessagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<MessagesControllerGetMessagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MessagesControllerGetMessagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagesControllerGetMessagesRequest' from JSON`,
  );
}

/** @internal */
export const MessagesControllerGetMessagesResponse$inboundSchema: z.ZodType<
  MessagesControllerGetMessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ActivitiesResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type MessagesControllerGetMessagesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ActivitiesResponseDto$Outbound;
};

/** @internal */
export const MessagesControllerGetMessagesResponse$outboundSchema: z.ZodType<
  MessagesControllerGetMessagesResponse$Outbound,
  z.ZodTypeDef,
  MessagesControllerGetMessagesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ActivitiesResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesControllerGetMessagesResponse$ {
  /** @deprecated use `MessagesControllerGetMessagesResponse$inboundSchema` instead. */
  export const inboundSchema =
    MessagesControllerGetMessagesResponse$inboundSchema;
  /** @deprecated use `MessagesControllerGetMessagesResponse$outboundSchema` instead. */
  export const outboundSchema =
    MessagesControllerGetMessagesResponse$outboundSchema;
  /** @deprecated use `MessagesControllerGetMessagesResponse$Outbound` instead. */
  export type Outbound = MessagesControllerGetMessagesResponse$Outbound;
}

export function messagesControllerGetMessagesResponseToJSON(
  messagesControllerGetMessagesResponse: MessagesControllerGetMessagesResponse,
): string {
  return JSON.stringify(
    MessagesControllerGetMessagesResponse$outboundSchema.parse(
      messagesControllerGetMessagesResponse,
    ),
  );
}

export function messagesControllerGetMessagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<MessagesControllerGetMessagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MessagesControllerGetMessagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagesControllerGetMessagesResponse' from JSON`,
  );
}
