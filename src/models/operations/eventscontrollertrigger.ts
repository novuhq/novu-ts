/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EventsControllerTriggerRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  triggerEventRequestDto: components.TriggerEventRequestDto;
};

export type EventsControllerTriggerResponseResult =
  | components.TriggerEventResponseDto
  | components.ErrorDto;

export type EventsControllerTriggerResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TriggerEventResponseDto | components.ErrorDto;
};

/** @internal */
export const EventsControllerTriggerRequest$inboundSchema: z.ZodType<
  EventsControllerTriggerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Idempotency-Key": z.string().optional(),
  TriggerEventRequestDto: components.TriggerEventRequestDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Idempotency-Key": "idempotencyKey",
    "TriggerEventRequestDto": "triggerEventRequestDto",
  });
});

/** @internal */
export type EventsControllerTriggerRequest$Outbound = {
  "Idempotency-Key"?: string | undefined;
  TriggerEventRequestDto: components.TriggerEventRequestDto$Outbound;
};

/** @internal */
export const EventsControllerTriggerRequest$outboundSchema: z.ZodType<
  EventsControllerTriggerRequest$Outbound,
  z.ZodTypeDef,
  EventsControllerTriggerRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  triggerEventRequestDto: components.TriggerEventRequestDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "Idempotency-Key",
    triggerEventRequestDto: "TriggerEventRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsControllerTriggerRequest$ {
  /** @deprecated use `EventsControllerTriggerRequest$inboundSchema` instead. */
  export const inboundSchema = EventsControllerTriggerRequest$inboundSchema;
  /** @deprecated use `EventsControllerTriggerRequest$outboundSchema` instead. */
  export const outboundSchema = EventsControllerTriggerRequest$outboundSchema;
  /** @deprecated use `EventsControllerTriggerRequest$Outbound` instead. */
  export type Outbound = EventsControllerTriggerRequest$Outbound;
}

export function eventsControllerTriggerRequestToJSON(
  eventsControllerTriggerRequest: EventsControllerTriggerRequest,
): string {
  return JSON.stringify(
    EventsControllerTriggerRequest$outboundSchema.parse(
      eventsControllerTriggerRequest,
    ),
  );
}

export function eventsControllerTriggerRequestFromJSON(
  jsonString: string,
): SafeParseResult<EventsControllerTriggerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsControllerTriggerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsControllerTriggerRequest' from JSON`,
  );
}

/** @internal */
export const EventsControllerTriggerResponseResult$inboundSchema: z.ZodType<
  EventsControllerTriggerResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.TriggerEventResponseDto$inboundSchema,
  components.ErrorDto$inboundSchema,
]);

/** @internal */
export type EventsControllerTriggerResponseResult$Outbound =
  | components.TriggerEventResponseDto$Outbound
  | components.ErrorDto$Outbound;

/** @internal */
export const EventsControllerTriggerResponseResult$outboundSchema: z.ZodType<
  EventsControllerTriggerResponseResult$Outbound,
  z.ZodTypeDef,
  EventsControllerTriggerResponseResult
> = z.union([
  components.TriggerEventResponseDto$outboundSchema,
  components.ErrorDto$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsControllerTriggerResponseResult$ {
  /** @deprecated use `EventsControllerTriggerResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    EventsControllerTriggerResponseResult$inboundSchema;
  /** @deprecated use `EventsControllerTriggerResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    EventsControllerTriggerResponseResult$outboundSchema;
  /** @deprecated use `EventsControllerTriggerResponseResult$Outbound` instead. */
  export type Outbound = EventsControllerTriggerResponseResult$Outbound;
}

export function eventsControllerTriggerResponseResultToJSON(
  eventsControllerTriggerResponseResult: EventsControllerTriggerResponseResult,
): string {
  return JSON.stringify(
    EventsControllerTriggerResponseResult$outboundSchema.parse(
      eventsControllerTriggerResponseResult,
    ),
  );
}

export function eventsControllerTriggerResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<EventsControllerTriggerResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EventsControllerTriggerResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsControllerTriggerResponseResult' from JSON`,
  );
}

/** @internal */
export const EventsControllerTriggerResponse$inboundSchema: z.ZodType<
  EventsControllerTriggerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    components.TriggerEventResponseDto$inboundSchema,
    components.ErrorDto$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type EventsControllerTriggerResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    | components.TriggerEventResponseDto$Outbound
    | components.ErrorDto$Outbound;
};

/** @internal */
export const EventsControllerTriggerResponse$outboundSchema: z.ZodType<
  EventsControllerTriggerResponse$Outbound,
  z.ZodTypeDef,
  EventsControllerTriggerResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    components.TriggerEventResponseDto$outboundSchema,
    components.ErrorDto$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsControllerTriggerResponse$ {
  /** @deprecated use `EventsControllerTriggerResponse$inboundSchema` instead. */
  export const inboundSchema = EventsControllerTriggerResponse$inboundSchema;
  /** @deprecated use `EventsControllerTriggerResponse$outboundSchema` instead. */
  export const outboundSchema = EventsControllerTriggerResponse$outboundSchema;
  /** @deprecated use `EventsControllerTriggerResponse$Outbound` instead. */
  export type Outbound = EventsControllerTriggerResponse$Outbound;
}

export function eventsControllerTriggerResponseToJSON(
  eventsControllerTriggerResponse: EventsControllerTriggerResponse,
): string {
  return JSON.stringify(
    EventsControllerTriggerResponse$outboundSchema.parse(
      eventsControllerTriggerResponse,
    ),
  );
}

export function eventsControllerTriggerResponseFromJSON(
  jsonString: string,
): SafeParseResult<EventsControllerTriggerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsControllerTriggerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsControllerTriggerResponse' from JSON`,
  );
}
