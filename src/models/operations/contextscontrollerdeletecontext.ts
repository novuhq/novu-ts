/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ContextsControllerDeleteContextRequest = {
  /**
   * Context ID
   */
  id: string;
  /**
   * Context type
   */
  type: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type ContextsControllerDeleteContextResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const ContextsControllerDeleteContextRequest$inboundSchema: z.ZodType<
  ContextsControllerDeleteContextRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ContextsControllerDeleteContextRequest$Outbound = {
  id: string;
  type: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ContextsControllerDeleteContextRequest$outboundSchema: z.ZodType<
  ContextsControllerDeleteContextRequest$Outbound,
  z.ZodTypeDef,
  ContextsControllerDeleteContextRequest
> = z.object({
  id: z.string(),
  type: z.string(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerDeleteContextRequest$ {
  /** @deprecated use `ContextsControllerDeleteContextRequest$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerDeleteContextRequest$inboundSchema;
  /** @deprecated use `ContextsControllerDeleteContextRequest$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerDeleteContextRequest$outboundSchema;
  /** @deprecated use `ContextsControllerDeleteContextRequest$Outbound` instead. */
  export type Outbound = ContextsControllerDeleteContextRequest$Outbound;
}

export function contextsControllerDeleteContextRequestToJSON(
  contextsControllerDeleteContextRequest:
    ContextsControllerDeleteContextRequest,
): string {
  return JSON.stringify(
    ContextsControllerDeleteContextRequest$outboundSchema.parse(
      contextsControllerDeleteContextRequest,
    ),
  );
}

export function contextsControllerDeleteContextRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContextsControllerDeleteContextRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerDeleteContextRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextsControllerDeleteContextRequest' from JSON`,
  );
}

/** @internal */
export const ContextsControllerDeleteContextResponse$inboundSchema: z.ZodType<
  ContextsControllerDeleteContextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type ContextsControllerDeleteContextResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const ContextsControllerDeleteContextResponse$outboundSchema: z.ZodType<
  ContextsControllerDeleteContextResponse$Outbound,
  z.ZodTypeDef,
  ContextsControllerDeleteContextResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerDeleteContextResponse$ {
  /** @deprecated use `ContextsControllerDeleteContextResponse$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerDeleteContextResponse$inboundSchema;
  /** @deprecated use `ContextsControllerDeleteContextResponse$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerDeleteContextResponse$outboundSchema;
  /** @deprecated use `ContextsControllerDeleteContextResponse$Outbound` instead. */
  export type Outbound = ContextsControllerDeleteContextResponse$Outbound;
}

export function contextsControllerDeleteContextResponseToJSON(
  contextsControllerDeleteContextResponse:
    ContextsControllerDeleteContextResponse,
): string {
  return JSON.stringify(
    ContextsControllerDeleteContextResponse$outboundSchema.parse(
      contextsControllerDeleteContextResponse,
    ),
  );
}

export function contextsControllerDeleteContextResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  ContextsControllerDeleteContextResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerDeleteContextResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ContextsControllerDeleteContextResponse' from JSON`,
  );
}
