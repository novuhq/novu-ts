/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type SubscribersControllerMarkAllUnreadAsReadRequest = {
    subscriberId: string;
    markAllMessageAsRequestDto: components.MarkAllMessageAsRequestDto;
};

/** @internal */
export const SubscribersControllerMarkAllUnreadAsReadRequest$inboundSchema: z.ZodType<
    SubscribersControllerMarkAllUnreadAsReadRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        subscriberId: z.string(),
        MarkAllMessageAsRequestDto: components.MarkAllMessageAsRequestDto$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            MarkAllMessageAsRequestDto: "markAllMessageAsRequestDto",
        });
    });

/** @internal */
export type SubscribersControllerMarkAllUnreadAsReadRequest$Outbound = {
    subscriberId: string;
    MarkAllMessageAsRequestDto: components.MarkAllMessageAsRequestDto$Outbound;
};

/** @internal */
export const SubscribersControllerMarkAllUnreadAsReadRequest$outboundSchema: z.ZodType<
    SubscribersControllerMarkAllUnreadAsReadRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerMarkAllUnreadAsReadRequest
> = z
    .object({
        subscriberId: z.string(),
        markAllMessageAsRequestDto: components.MarkAllMessageAsRequestDto$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            markAllMessageAsRequestDto: "MarkAllMessageAsRequestDto",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerMarkAllUnreadAsReadRequest$ {
    /** @deprecated use `SubscribersControllerMarkAllUnreadAsReadRequest$inboundSchema` instead. */
    export const inboundSchema = SubscribersControllerMarkAllUnreadAsReadRequest$inboundSchema;
    /** @deprecated use `SubscribersControllerMarkAllUnreadAsReadRequest$outboundSchema` instead. */
    export const outboundSchema = SubscribersControllerMarkAllUnreadAsReadRequest$outboundSchema;
    /** @deprecated use `SubscribersControllerMarkAllUnreadAsReadRequest$Outbound` instead. */
    export type Outbound = SubscribersControllerMarkAllUnreadAsReadRequest$Outbound;
}
