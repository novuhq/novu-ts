/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerUpdateSubscriberPreferencesRequest = {
  subscriberId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  patchSubscriberPreferencesDto: components.PatchSubscriberPreferencesDto;
};

export type SubscribersControllerUpdateSubscriberPreferencesResponse = {
  headers: { [k: string]: Array<string> };
  result: components.GetSubscriberPreferencesDto;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberPreferencesRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberPreferencesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    "idempotency-key": z.string().optional(),
    PatchSubscriberPreferencesDto:
      components.PatchSubscriberPreferencesDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "PatchSubscriberPreferencesDto": "patchSubscriberPreferencesDto",
    });
  });

/** @internal */
export type SubscribersControllerUpdateSubscriberPreferencesRequest$Outbound = {
  subscriberId: string;
  "idempotency-key"?: string | undefined;
  PatchSubscriberPreferencesDto:
    components.PatchSubscriberPreferencesDto$Outbound;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberPreferencesRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberPreferencesRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberPreferencesRequest
  > = z.object({
    subscriberId: z.string(),
    idempotencyKey: z.string().optional(),
    patchSubscriberPreferencesDto:
      components.PatchSubscriberPreferencesDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      patchSubscriberPreferencesDto: "PatchSubscriberPreferencesDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberPreferencesRequest$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferencesRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberPreferencesRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferencesRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberPreferencesRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferencesRequest$Outbound` instead. */
  export type Outbound =
    SubscribersControllerUpdateSubscriberPreferencesRequest$Outbound;
}

export function subscribersControllerUpdateSubscriberPreferencesRequestToJSON(
  subscribersControllerUpdateSubscriberPreferencesRequest:
    SubscribersControllerUpdateSubscriberPreferencesRequest,
): string {
  return JSON.stringify(
    SubscribersControllerUpdateSubscriberPreferencesRequest$outboundSchema
      .parse(subscribersControllerUpdateSubscriberPreferencesRequest),
  );
}

export function subscribersControllerUpdateSubscriberPreferencesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerUpdateSubscriberPreferencesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerUpdateSubscriberPreferencesRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersControllerUpdateSubscriberPreferencesRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerUpdateSubscriberPreferencesResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberPreferencesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.GetSubscriberPreferencesDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerUpdateSubscriberPreferencesResponse$Outbound =
  {
    Headers: { [k: string]: Array<string> };
    Result: components.GetSubscriberPreferencesDto$Outbound;
  };

/** @internal */
export const SubscribersControllerUpdateSubscriberPreferencesResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberPreferencesResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberPreferencesResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.GetSubscriberPreferencesDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberPreferencesResponse$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferencesResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberPreferencesResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferencesResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberPreferencesResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferencesResponse$Outbound` instead. */
  export type Outbound =
    SubscribersControllerUpdateSubscriberPreferencesResponse$Outbound;
}

export function subscribersControllerUpdateSubscriberPreferencesResponseToJSON(
  subscribersControllerUpdateSubscriberPreferencesResponse:
    SubscribersControllerUpdateSubscriberPreferencesResponse,
): string {
  return JSON.stringify(
    SubscribersControllerUpdateSubscriberPreferencesResponse$outboundSchema
      .parse(subscribersControllerUpdateSubscriberPreferencesResponse),
  );
}

export function subscribersControllerUpdateSubscriberPreferencesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerUpdateSubscriberPreferencesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerUpdateSubscriberPreferencesResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersControllerUpdateSubscriberPreferencesResponse' from JSON`,
  );
}
