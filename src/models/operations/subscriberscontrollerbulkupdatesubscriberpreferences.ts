/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerBulkUpdateSubscriberPreferencesRequest = {
  subscriberId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  bulkUpdateSubscriberPreferencesDto:
    components.BulkUpdateSubscriberPreferencesDto;
};

export type SubscribersControllerBulkUpdateSubscriberPreferencesResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.GetPreferencesResponseDto>;
};

/** @internal */
export const SubscribersControllerBulkUpdateSubscriberPreferencesRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerBulkUpdateSubscriberPreferencesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    "idempotency-key": z.string().optional(),
    BulkUpdateSubscriberPreferencesDto:
      components.BulkUpdateSubscriberPreferencesDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "BulkUpdateSubscriberPreferencesDto":
        "bulkUpdateSubscriberPreferencesDto",
    });
  });

/** @internal */
export type SubscribersControllerBulkUpdateSubscriberPreferencesRequest$Outbound =
  {
    subscriberId: string;
    "idempotency-key"?: string | undefined;
    BulkUpdateSubscriberPreferencesDto:
      components.BulkUpdateSubscriberPreferencesDto$Outbound;
  };

/** @internal */
export const SubscribersControllerBulkUpdateSubscriberPreferencesRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerBulkUpdateSubscriberPreferencesRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerBulkUpdateSubscriberPreferencesRequest
  > = z.object({
    subscriberId: z.string(),
    idempotencyKey: z.string().optional(),
    bulkUpdateSubscriberPreferencesDto:
      components.BulkUpdateSubscriberPreferencesDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      bulkUpdateSubscriberPreferencesDto: "BulkUpdateSubscriberPreferencesDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerBulkUpdateSubscriberPreferencesRequest$ {
  /** @deprecated use `SubscribersControllerBulkUpdateSubscriberPreferencesRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerBulkUpdateSubscriberPreferencesRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerBulkUpdateSubscriberPreferencesRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerBulkUpdateSubscriberPreferencesRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerBulkUpdateSubscriberPreferencesRequest$Outbound` instead. */
  export type Outbound =
    SubscribersControllerBulkUpdateSubscriberPreferencesRequest$Outbound;
}

export function subscribersControllerBulkUpdateSubscriberPreferencesRequestToJSON(
  subscribersControllerBulkUpdateSubscriberPreferencesRequest:
    SubscribersControllerBulkUpdateSubscriberPreferencesRequest,
): string {
  return JSON.stringify(
    SubscribersControllerBulkUpdateSubscriberPreferencesRequest$outboundSchema
      .parse(subscribersControllerBulkUpdateSubscriberPreferencesRequest),
  );
}

export function subscribersControllerBulkUpdateSubscriberPreferencesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerBulkUpdateSubscriberPreferencesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerBulkUpdateSubscriberPreferencesRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersControllerBulkUpdateSubscriberPreferencesRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerBulkUpdateSubscriberPreferencesResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerBulkUpdateSubscriberPreferencesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.array(components.GetPreferencesResponseDto$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerBulkUpdateSubscriberPreferencesResponse$Outbound =
  {
    Headers: { [k: string]: Array<string> };
    Result: Array<components.GetPreferencesResponseDto$Outbound>;
  };

/** @internal */
export const SubscribersControllerBulkUpdateSubscriberPreferencesResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerBulkUpdateSubscriberPreferencesResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerBulkUpdateSubscriberPreferencesResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.array(components.GetPreferencesResponseDto$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerBulkUpdateSubscriberPreferencesResponse$ {
  /** @deprecated use `SubscribersControllerBulkUpdateSubscriberPreferencesResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerBulkUpdateSubscriberPreferencesResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerBulkUpdateSubscriberPreferencesResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerBulkUpdateSubscriberPreferencesResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerBulkUpdateSubscriberPreferencesResponse$Outbound` instead. */
  export type Outbound =
    SubscribersControllerBulkUpdateSubscriberPreferencesResponse$Outbound;
}

export function subscribersControllerBulkUpdateSubscriberPreferencesResponseToJSON(
  subscribersControllerBulkUpdateSubscriberPreferencesResponse:
    SubscribersControllerBulkUpdateSubscriberPreferencesResponse,
): string {
  return JSON.stringify(
    SubscribersControllerBulkUpdateSubscriberPreferencesResponse$outboundSchema
      .parse(subscribersControllerBulkUpdateSubscriberPreferencesResponse),
  );
}

export function subscribersControllerBulkUpdateSubscriberPreferencesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerBulkUpdateSubscriberPreferencesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerBulkUpdateSubscriberPreferencesResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersControllerBulkUpdateSubscriberPreferencesResponse' from JSON`,
  );
}
