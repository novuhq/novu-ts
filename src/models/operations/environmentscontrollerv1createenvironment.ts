/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnvironmentsControllerV1CreateEnvironmentRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  createEnvironmentRequestDto: components.CreateEnvironmentRequestDto;
};

export type EnvironmentsControllerV1CreateEnvironmentResponse = {
  headers: { [k: string]: Array<string> };
  result: components.EnvironmentResponseDto;
};

/** @internal */
export const EnvironmentsControllerV1CreateEnvironmentRequest$inboundSchema:
  z.ZodType<
    EnvironmentsControllerV1CreateEnvironmentRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "idempotency-key": z.string().optional(),
    CreateEnvironmentRequestDto:
      components.CreateEnvironmentRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "CreateEnvironmentRequestDto": "createEnvironmentRequestDto",
    });
  });

/** @internal */
export type EnvironmentsControllerV1CreateEnvironmentRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  CreateEnvironmentRequestDto: components.CreateEnvironmentRequestDto$Outbound;
};

/** @internal */
export const EnvironmentsControllerV1CreateEnvironmentRequest$outboundSchema:
  z.ZodType<
    EnvironmentsControllerV1CreateEnvironmentRequest$Outbound,
    z.ZodTypeDef,
    EnvironmentsControllerV1CreateEnvironmentRequest
  > = z.object({
    idempotencyKey: z.string().optional(),
    createEnvironmentRequestDto:
      components.CreateEnvironmentRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      createEnvironmentRequestDto: "CreateEnvironmentRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentsControllerV1CreateEnvironmentRequest$ {
  /** @deprecated use `EnvironmentsControllerV1CreateEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentsControllerV1CreateEnvironmentRequest$inboundSchema;
  /** @deprecated use `EnvironmentsControllerV1CreateEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentsControllerV1CreateEnvironmentRequest$outboundSchema;
  /** @deprecated use `EnvironmentsControllerV1CreateEnvironmentRequest$Outbound` instead. */
  export type Outbound =
    EnvironmentsControllerV1CreateEnvironmentRequest$Outbound;
}

export function environmentsControllerV1CreateEnvironmentRequestToJSON(
  environmentsControllerV1CreateEnvironmentRequest:
    EnvironmentsControllerV1CreateEnvironmentRequest,
): string {
  return JSON.stringify(
    EnvironmentsControllerV1CreateEnvironmentRequest$outboundSchema.parse(
      environmentsControllerV1CreateEnvironmentRequest,
    ),
  );
}

export function environmentsControllerV1CreateEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentsControllerV1CreateEnvironmentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentsControllerV1CreateEnvironmentRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentsControllerV1CreateEnvironmentRequest' from JSON`,
  );
}

/** @internal */
export const EnvironmentsControllerV1CreateEnvironmentResponse$inboundSchema:
  z.ZodType<
    EnvironmentsControllerV1CreateEnvironmentResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.EnvironmentResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type EnvironmentsControllerV1CreateEnvironmentResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.EnvironmentResponseDto$Outbound;
};

/** @internal */
export const EnvironmentsControllerV1CreateEnvironmentResponse$outboundSchema:
  z.ZodType<
    EnvironmentsControllerV1CreateEnvironmentResponse$Outbound,
    z.ZodTypeDef,
    EnvironmentsControllerV1CreateEnvironmentResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.EnvironmentResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentsControllerV1CreateEnvironmentResponse$ {
  /** @deprecated use `EnvironmentsControllerV1CreateEnvironmentResponse$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentsControllerV1CreateEnvironmentResponse$inboundSchema;
  /** @deprecated use `EnvironmentsControllerV1CreateEnvironmentResponse$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentsControllerV1CreateEnvironmentResponse$outboundSchema;
  /** @deprecated use `EnvironmentsControllerV1CreateEnvironmentResponse$Outbound` instead. */
  export type Outbound =
    EnvironmentsControllerV1CreateEnvironmentResponse$Outbound;
}

export function environmentsControllerV1CreateEnvironmentResponseToJSON(
  environmentsControllerV1CreateEnvironmentResponse:
    EnvironmentsControllerV1CreateEnvironmentResponse,
): string {
  return JSON.stringify(
    EnvironmentsControllerV1CreateEnvironmentResponse$outboundSchema.parse(
      environmentsControllerV1CreateEnvironmentResponse,
    ),
  );
}

export function environmentsControllerV1CreateEnvironmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentsControllerV1CreateEnvironmentResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentsControllerV1CreateEnvironmentResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentsControllerV1CreateEnvironmentResponse' from JSON`,
  );
}
