/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LayoutsControllerDeleteRequest = {
  /**
   * The unique identifier of the layout
   */
  layoutId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type LayoutsControllerDeleteResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const LayoutsControllerDeleteRequest$inboundSchema: z.ZodType<
  LayoutsControllerDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  layoutId: z.string(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type LayoutsControllerDeleteRequest$Outbound = {
  layoutId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const LayoutsControllerDeleteRequest$outboundSchema: z.ZodType<
  LayoutsControllerDeleteRequest$Outbound,
  z.ZodTypeDef,
  LayoutsControllerDeleteRequest
> = z.object({
  layoutId: z.string(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerDeleteRequest$ {
  /** @deprecated use `LayoutsControllerDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerDeleteRequest$inboundSchema;
  /** @deprecated use `LayoutsControllerDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = LayoutsControllerDeleteRequest$outboundSchema;
  /** @deprecated use `LayoutsControllerDeleteRequest$Outbound` instead. */
  export type Outbound = LayoutsControllerDeleteRequest$Outbound;
}

export function layoutsControllerDeleteRequestToJSON(
  layoutsControllerDeleteRequest: LayoutsControllerDeleteRequest,
): string {
  return JSON.stringify(
    LayoutsControllerDeleteRequest$outboundSchema.parse(
      layoutsControllerDeleteRequest,
    ),
  );
}

export function layoutsControllerDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerDeleteRequest' from JSON`,
  );
}

/** @internal */
export const LayoutsControllerDeleteResponse$inboundSchema: z.ZodType<
  LayoutsControllerDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type LayoutsControllerDeleteResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const LayoutsControllerDeleteResponse$outboundSchema: z.ZodType<
  LayoutsControllerDeleteResponse$Outbound,
  z.ZodTypeDef,
  LayoutsControllerDeleteResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerDeleteResponse$ {
  /** @deprecated use `LayoutsControllerDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerDeleteResponse$inboundSchema;
  /** @deprecated use `LayoutsControllerDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = LayoutsControllerDeleteResponse$outboundSchema;
  /** @deprecated use `LayoutsControllerDeleteResponse$Outbound` instead. */
  export type Outbound = LayoutsControllerDeleteResponse$Outbound;
}

export function layoutsControllerDeleteResponseToJSON(
  layoutsControllerDeleteResponse: LayoutsControllerDeleteResponse,
): string {
  return JSON.stringify(
    LayoutsControllerDeleteResponse$outboundSchema.parse(
      layoutsControllerDeleteResponse,
    ),
  );
}

export function layoutsControllerDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerDeleteResponse' from JSON`,
  );
}
