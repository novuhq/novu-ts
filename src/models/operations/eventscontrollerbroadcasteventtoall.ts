/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EventsControllerBroadcastEventToAllRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  triggerEventToAllRequestDto: components.TriggerEventToAllRequestDto;
};

export type EventsControllerBroadcastEventToAllResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TriggerEventResponseDto;
};

/** @internal */
export const EventsControllerBroadcastEventToAllRequest$inboundSchema:
  z.ZodType<EventsControllerBroadcastEventToAllRequest, z.ZodTypeDef, unknown> =
    z.object({
      "idempotency-key": z.string().optional(),
      TriggerEventToAllRequestDto:
        components.TriggerEventToAllRequestDto$inboundSchema,
    }).transform((v) => {
      return remap$(v, {
        "idempotency-key": "idempotencyKey",
        "TriggerEventToAllRequestDto": "triggerEventToAllRequestDto",
      });
    });

/** @internal */
export type EventsControllerBroadcastEventToAllRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  TriggerEventToAllRequestDto: components.TriggerEventToAllRequestDto$Outbound;
};

/** @internal */
export const EventsControllerBroadcastEventToAllRequest$outboundSchema:
  z.ZodType<
    EventsControllerBroadcastEventToAllRequest$Outbound,
    z.ZodTypeDef,
    EventsControllerBroadcastEventToAllRequest
  > = z.object({
    idempotencyKey: z.string().optional(),
    triggerEventToAllRequestDto:
      components.TriggerEventToAllRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      triggerEventToAllRequestDto: "TriggerEventToAllRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsControllerBroadcastEventToAllRequest$ {
  /** @deprecated use `EventsControllerBroadcastEventToAllRequest$inboundSchema` instead. */
  export const inboundSchema =
    EventsControllerBroadcastEventToAllRequest$inboundSchema;
  /** @deprecated use `EventsControllerBroadcastEventToAllRequest$outboundSchema` instead. */
  export const outboundSchema =
    EventsControllerBroadcastEventToAllRequest$outboundSchema;
  /** @deprecated use `EventsControllerBroadcastEventToAllRequest$Outbound` instead. */
  export type Outbound = EventsControllerBroadcastEventToAllRequest$Outbound;
}

export function eventsControllerBroadcastEventToAllRequestToJSON(
  eventsControllerBroadcastEventToAllRequest:
    EventsControllerBroadcastEventToAllRequest,
): string {
  return JSON.stringify(
    EventsControllerBroadcastEventToAllRequest$outboundSchema.parse(
      eventsControllerBroadcastEventToAllRequest,
    ),
  );
}

export function eventsControllerBroadcastEventToAllRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  EventsControllerBroadcastEventToAllRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EventsControllerBroadcastEventToAllRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EventsControllerBroadcastEventToAllRequest' from JSON`,
  );
}

/** @internal */
export const EventsControllerBroadcastEventToAllResponse$inboundSchema:
  z.ZodType<
    EventsControllerBroadcastEventToAllResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.TriggerEventResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type EventsControllerBroadcastEventToAllResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TriggerEventResponseDto$Outbound;
};

/** @internal */
export const EventsControllerBroadcastEventToAllResponse$outboundSchema:
  z.ZodType<
    EventsControllerBroadcastEventToAllResponse$Outbound,
    z.ZodTypeDef,
    EventsControllerBroadcastEventToAllResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.TriggerEventResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsControllerBroadcastEventToAllResponse$ {
  /** @deprecated use `EventsControllerBroadcastEventToAllResponse$inboundSchema` instead. */
  export const inboundSchema =
    EventsControllerBroadcastEventToAllResponse$inboundSchema;
  /** @deprecated use `EventsControllerBroadcastEventToAllResponse$outboundSchema` instead. */
  export const outboundSchema =
    EventsControllerBroadcastEventToAllResponse$outboundSchema;
  /** @deprecated use `EventsControllerBroadcastEventToAllResponse$Outbound` instead. */
  export type Outbound = EventsControllerBroadcastEventToAllResponse$Outbound;
}

export function eventsControllerBroadcastEventToAllResponseToJSON(
  eventsControllerBroadcastEventToAllResponse:
    EventsControllerBroadcastEventToAllResponse,
): string {
  return JSON.stringify(
    EventsControllerBroadcastEventToAllResponse$outboundSchema.parse(
      eventsControllerBroadcastEventToAllResponse,
    ),
  );
}

export function eventsControllerBroadcastEventToAllResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  EventsControllerBroadcastEventToAllResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EventsControllerBroadcastEventToAllResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EventsControllerBroadcastEventToAllResponse' from JSON`,
  );
}
