/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Direction of sorting
 */
export const OrderDirection = {
  Asc: "ASC",
  Desc: "DESC",
} as const;
/**
 * Direction of sorting
 */
export type OrderDirection = ClosedEnum<typeof OrderDirection>;

export type ContextsControllerListContextsRequest = {
  /**
   * Cursor for pagination indicating the starting point after which to fetch results.
   */
  after?: string | undefined;
  /**
   * Cursor for pagination indicating the ending point before which to fetch results.
   */
  before?: string | undefined;
  /**
   * Limit the number of items to return
   */
  limit?: number | undefined;
  /**
   * Direction of sorting
   */
  orderDirection?: OrderDirection | undefined;
  /**
   * Field to order by
   */
  orderBy?: string | undefined;
  /**
   * Include cursor item in response
   */
  includeCursor?: boolean | undefined;
  /**
   * Filter contexts by id
   */
  id?: string | undefined;
  /**
   * Search contexts by type or id (supports partial matching across both fields)
   */
  search?: string | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type ContextsControllerListContextsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ListContextsResponseDto;
};

/** @internal */
export const OrderDirection$inboundSchema: z.ZodNativeEnum<
  typeof OrderDirection
> = z.nativeEnum(OrderDirection);

/** @internal */
export const OrderDirection$outboundSchema: z.ZodNativeEnum<
  typeof OrderDirection
> = OrderDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderDirection$ {
  /** @deprecated use `OrderDirection$inboundSchema` instead. */
  export const inboundSchema = OrderDirection$inboundSchema;
  /** @deprecated use `OrderDirection$outboundSchema` instead. */
  export const outboundSchema = OrderDirection$outboundSchema;
}

/** @internal */
export const ContextsControllerListContextsRequest$inboundSchema: z.ZodType<
  ContextsControllerListContextsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  orderDirection: OrderDirection$inboundSchema.optional(),
  orderBy: z.string().optional(),
  includeCursor: z.boolean().optional(),
  id: z.string().optional(),
  search: z.string().optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type ContextsControllerListContextsRequest$Outbound = {
  after?: string | undefined;
  before?: string | undefined;
  limit?: number | undefined;
  orderDirection?: string | undefined;
  orderBy?: string | undefined;
  includeCursor?: boolean | undefined;
  id?: string | undefined;
  search?: string | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const ContextsControllerListContextsRequest$outboundSchema: z.ZodType<
  ContextsControllerListContextsRequest$Outbound,
  z.ZodTypeDef,
  ContextsControllerListContextsRequest
> = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  orderDirection: OrderDirection$outboundSchema.optional(),
  orderBy: z.string().optional(),
  includeCursor: z.boolean().optional(),
  id: z.string().optional(),
  search: z.string().optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerListContextsRequest$ {
  /** @deprecated use `ContextsControllerListContextsRequest$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerListContextsRequest$inboundSchema;
  /** @deprecated use `ContextsControllerListContextsRequest$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerListContextsRequest$outboundSchema;
  /** @deprecated use `ContextsControllerListContextsRequest$Outbound` instead. */
  export type Outbound = ContextsControllerListContextsRequest$Outbound;
}

export function contextsControllerListContextsRequestToJSON(
  contextsControllerListContextsRequest: ContextsControllerListContextsRequest,
): string {
  return JSON.stringify(
    ContextsControllerListContextsRequest$outboundSchema.parse(
      contextsControllerListContextsRequest,
    ),
  );
}

export function contextsControllerListContextsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ContextsControllerListContextsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerListContextsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextsControllerListContextsRequest' from JSON`,
  );
}

/** @internal */
export const ContextsControllerListContextsResponse$inboundSchema: z.ZodType<
  ContextsControllerListContextsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: components.ListContextsResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ContextsControllerListContextsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ListContextsResponseDto$Outbound;
};

/** @internal */
export const ContextsControllerListContextsResponse$outboundSchema: z.ZodType<
  ContextsControllerListContextsResponse$Outbound,
  z.ZodTypeDef,
  ContextsControllerListContextsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ListContextsResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextsControllerListContextsResponse$ {
  /** @deprecated use `ContextsControllerListContextsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ContextsControllerListContextsResponse$inboundSchema;
  /** @deprecated use `ContextsControllerListContextsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ContextsControllerListContextsResponse$outboundSchema;
  /** @deprecated use `ContextsControllerListContextsResponse$Outbound` instead. */
  export type Outbound = ContextsControllerListContextsResponse$Outbound;
}

export function contextsControllerListContextsResponseToJSON(
  contextsControllerListContextsResponse:
    ContextsControllerListContextsResponse,
): string {
  return JSON.stringify(
    ContextsControllerListContextsResponse$outboundSchema.parse(
      contextsControllerListContextsResponse,
    ),
  );
}

export function contextsControllerListContextsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContextsControllerListContextsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContextsControllerListContextsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContextsControllerListContextsResponse' from JSON`,
  );
}
