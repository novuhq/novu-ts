/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TopicsControllerUpsertTopicRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  createUpdateTopicRequestDto: components.CreateUpdateTopicRequestDto;
};

export type TopicsControllerUpsertTopicResponse = {
  headers: { [k: string]: Array<string> };
  result: components.TopicResponseDto;
};

/** @internal */
export const TopicsControllerUpsertTopicRequest$inboundSchema: z.ZodType<
  TopicsControllerUpsertTopicRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  CreateUpdateTopicRequestDto:
    components.CreateUpdateTopicRequestDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "CreateUpdateTopicRequestDto": "createUpdateTopicRequestDto",
  });
});

/** @internal */
export type TopicsControllerUpsertTopicRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  CreateUpdateTopicRequestDto: components.CreateUpdateTopicRequestDto$Outbound;
};

/** @internal */
export const TopicsControllerUpsertTopicRequest$outboundSchema: z.ZodType<
  TopicsControllerUpsertTopicRequest$Outbound,
  z.ZodTypeDef,
  TopicsControllerUpsertTopicRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  createUpdateTopicRequestDto:
    components.CreateUpdateTopicRequestDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    createUpdateTopicRequestDto: "CreateUpdateTopicRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerUpsertTopicRequest$ {
  /** @deprecated use `TopicsControllerUpsertTopicRequest$inboundSchema` instead. */
  export const inboundSchema = TopicsControllerUpsertTopicRequest$inboundSchema;
  /** @deprecated use `TopicsControllerUpsertTopicRequest$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerUpsertTopicRequest$outboundSchema;
  /** @deprecated use `TopicsControllerUpsertTopicRequest$Outbound` instead. */
  export type Outbound = TopicsControllerUpsertTopicRequest$Outbound;
}

export function topicsControllerUpsertTopicRequestToJSON(
  topicsControllerUpsertTopicRequest: TopicsControllerUpsertTopicRequest,
): string {
  return JSON.stringify(
    TopicsControllerUpsertTopicRequest$outboundSchema.parse(
      topicsControllerUpsertTopicRequest,
    ),
  );
}

export function topicsControllerUpsertTopicRequestFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerUpsertTopicRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerUpsertTopicRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerUpsertTopicRequest' from JSON`,
  );
}

/** @internal */
export const TopicsControllerUpsertTopicResponse$inboundSchema: z.ZodType<
  TopicsControllerUpsertTopicResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.TopicResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type TopicsControllerUpsertTopicResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.TopicResponseDto$Outbound;
};

/** @internal */
export const TopicsControllerUpsertTopicResponse$outboundSchema: z.ZodType<
  TopicsControllerUpsertTopicResponse$Outbound,
  z.ZodTypeDef,
  TopicsControllerUpsertTopicResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.TopicResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerUpsertTopicResponse$ {
  /** @deprecated use `TopicsControllerUpsertTopicResponse$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerUpsertTopicResponse$inboundSchema;
  /** @deprecated use `TopicsControllerUpsertTopicResponse$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerUpsertTopicResponse$outboundSchema;
  /** @deprecated use `TopicsControllerUpsertTopicResponse$Outbound` instead. */
  export type Outbound = TopicsControllerUpsertTopicResponse$Outbound;
}

export function topicsControllerUpsertTopicResponseToJSON(
  topicsControllerUpsertTopicResponse: TopicsControllerUpsertTopicResponse,
): string {
  return JSON.stringify(
    TopicsControllerUpsertTopicResponse$outboundSchema.parse(
      topicsControllerUpsertTopicResponse,
    ),
  );
}

export function topicsControllerUpsertTopicResponseFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerUpsertTopicResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerUpsertTopicResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerUpsertTopicResponse' from JSON`,
  );
}
