/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerModifySubscriberChannelRequest = {
  subscriberId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  updateSubscriberChannelRequestDto:
    components.UpdateSubscriberChannelRequestDto;
};

export type SubscribersControllerModifySubscriberChannelResponse = {
  headers: { [k: string]: Array<string> };
  result: components.SubscriberResponseDto;
};

/** @internal */
export const SubscribersControllerModifySubscriberChannelRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerModifySubscriberChannelRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    "idempotency-key": z.string().optional(),
    UpdateSubscriberChannelRequestDto:
      components.UpdateSubscriberChannelRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "UpdateSubscriberChannelRequestDto": "updateSubscriberChannelRequestDto",
    });
  });

/** @internal */
export type SubscribersControllerModifySubscriberChannelRequest$Outbound = {
  subscriberId: string;
  "idempotency-key"?: string | undefined;
  UpdateSubscriberChannelRequestDto:
    components.UpdateSubscriberChannelRequestDto$Outbound;
};

/** @internal */
export const SubscribersControllerModifySubscriberChannelRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerModifySubscriberChannelRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerModifySubscriberChannelRequest
  > = z.object({
    subscriberId: z.string(),
    idempotencyKey: z.string().optional(),
    updateSubscriberChannelRequestDto:
      components.UpdateSubscriberChannelRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      updateSubscriberChannelRequestDto: "UpdateSubscriberChannelRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerModifySubscriberChannelRequest$ {
  /** @deprecated use `SubscribersControllerModifySubscriberChannelRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerModifySubscriberChannelRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerModifySubscriberChannelRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerModifySubscriberChannelRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerModifySubscriberChannelRequest$Outbound` instead. */
  export type Outbound =
    SubscribersControllerModifySubscriberChannelRequest$Outbound;
}

export function subscribersControllerModifySubscriberChannelRequestToJSON(
  subscribersControllerModifySubscriberChannelRequest:
    SubscribersControllerModifySubscriberChannelRequest,
): string {
  return JSON.stringify(
    SubscribersControllerModifySubscriberChannelRequest$outboundSchema.parse(
      subscribersControllerModifySubscriberChannelRequest,
    ),
  );
}

export function subscribersControllerModifySubscriberChannelRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerModifySubscriberChannelRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerModifySubscriberChannelRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerModifySubscriberChannelRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerModifySubscriberChannelResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerModifySubscriberChannelResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.SubscriberResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerModifySubscriberChannelResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.SubscriberResponseDto$Outbound;
};

/** @internal */
export const SubscribersControllerModifySubscriberChannelResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerModifySubscriberChannelResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerModifySubscriberChannelResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.SubscriberResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerModifySubscriberChannelResponse$ {
  /** @deprecated use `SubscribersControllerModifySubscriberChannelResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerModifySubscriberChannelResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerModifySubscriberChannelResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerModifySubscriberChannelResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerModifySubscriberChannelResponse$Outbound` instead. */
  export type Outbound =
    SubscribersControllerModifySubscriberChannelResponse$Outbound;
}

export function subscribersControllerModifySubscriberChannelResponseToJSON(
  subscribersControllerModifySubscriberChannelResponse:
    SubscribersControllerModifySubscriberChannelResponse,
): string {
  return JSON.stringify(
    SubscribersControllerModifySubscriberChannelResponse$outboundSchema.parse(
      subscribersControllerModifySubscriberChannelResponse,
    ),
  );
}

export function subscribersControllerModifySubscriberChannelResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerModifySubscriberChannelResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerModifySubscriberChannelResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerModifySubscriberChannelResponse' from JSON`,
  );
}
