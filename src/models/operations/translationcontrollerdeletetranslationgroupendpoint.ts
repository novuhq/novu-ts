/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Resource type
 */
export const ResourceType = {
  Workflow: "workflow",
} as const;
/**
 * Resource type
 */
export type ResourceType = ClosedEnum<typeof ResourceType>;

export type TranslationControllerDeleteTranslationGroupEndpointRequest = {
  /**
   * Resource type
   */
  resourceType: ResourceType;
  /**
   * Resource ID
   */
  resourceId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const ResourceType$inboundSchema: z.ZodNativeEnum<typeof ResourceType> =
  z.nativeEnum(ResourceType);

/** @internal */
export const ResourceType$outboundSchema: z.ZodNativeEnum<typeof ResourceType> =
  ResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceType$ {
  /** @deprecated use `ResourceType$inboundSchema` instead. */
  export const inboundSchema = ResourceType$inboundSchema;
  /** @deprecated use `ResourceType$outboundSchema` instead. */
  export const outboundSchema = ResourceType$outboundSchema;
}

/** @internal */
export const TranslationControllerDeleteTranslationGroupEndpointRequest$inboundSchema:
  z.ZodType<
    TranslationControllerDeleteTranslationGroupEndpointRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resourceType: ResourceType$inboundSchema,
    resourceId: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type TranslationControllerDeleteTranslationGroupEndpointRequest$Outbound =
  {
    resourceType: string;
    resourceId: string;
    "idempotency-key"?: string | undefined;
  };

/** @internal */
export const TranslationControllerDeleteTranslationGroupEndpointRequest$outboundSchema:
  z.ZodType<
    TranslationControllerDeleteTranslationGroupEndpointRequest$Outbound,
    z.ZodTypeDef,
    TranslationControllerDeleteTranslationGroupEndpointRequest
  > = z.object({
    resourceType: ResourceType$outboundSchema,
    resourceId: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationControllerDeleteTranslationGroupEndpointRequest$ {
  /** @deprecated use `TranslationControllerDeleteTranslationGroupEndpointRequest$inboundSchema` instead. */
  export const inboundSchema =
    TranslationControllerDeleteTranslationGroupEndpointRequest$inboundSchema;
  /** @deprecated use `TranslationControllerDeleteTranslationGroupEndpointRequest$outboundSchema` instead. */
  export const outboundSchema =
    TranslationControllerDeleteTranslationGroupEndpointRequest$outboundSchema;
  /** @deprecated use `TranslationControllerDeleteTranslationGroupEndpointRequest$Outbound` instead. */
  export type Outbound =
    TranslationControllerDeleteTranslationGroupEndpointRequest$Outbound;
}

export function translationControllerDeleteTranslationGroupEndpointRequestToJSON(
  translationControllerDeleteTranslationGroupEndpointRequest:
    TranslationControllerDeleteTranslationGroupEndpointRequest,
): string {
  return JSON.stringify(
    TranslationControllerDeleteTranslationGroupEndpointRequest$outboundSchema
      .parse(translationControllerDeleteTranslationGroupEndpointRequest),
  );
}

export function translationControllerDeleteTranslationGroupEndpointRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TranslationControllerDeleteTranslationGroupEndpointRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TranslationControllerDeleteTranslationGroupEndpointRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TranslationControllerDeleteTranslationGroupEndpointRequest' from JSON`,
  );
}
