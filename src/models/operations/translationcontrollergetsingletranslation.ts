/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Resource type
 */
export const PathParamResourceType = {
  Workflow: "workflow",
} as const;
/**
 * Resource type
 */
export type PathParamResourceType = ClosedEnum<typeof PathParamResourceType>;

export type TranslationControllerGetSingleTranslationRequest = {
  /**
   * Resource type
   */
  resourceType: PathParamResourceType;
  /**
   * Resource ID
   */
  resourceId: string;
  /**
   * Locale code
   */
  locale: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const PathParamResourceType$inboundSchema: z.ZodNativeEnum<
  typeof PathParamResourceType
> = z.nativeEnum(PathParamResourceType);

/** @internal */
export const PathParamResourceType$outboundSchema: z.ZodNativeEnum<
  typeof PathParamResourceType
> = PathParamResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PathParamResourceType$ {
  /** @deprecated use `PathParamResourceType$inboundSchema` instead. */
  export const inboundSchema = PathParamResourceType$inboundSchema;
  /** @deprecated use `PathParamResourceType$outboundSchema` instead. */
  export const outboundSchema = PathParamResourceType$outboundSchema;
}

/** @internal */
export const TranslationControllerGetSingleTranslationRequest$inboundSchema:
  z.ZodType<
    TranslationControllerGetSingleTranslationRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resourceType: PathParamResourceType$inboundSchema,
    resourceId: z.string(),
    locale: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type TranslationControllerGetSingleTranslationRequest$Outbound = {
  resourceType: string;
  resourceId: string;
  locale: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const TranslationControllerGetSingleTranslationRequest$outboundSchema:
  z.ZodType<
    TranslationControllerGetSingleTranslationRequest$Outbound,
    z.ZodTypeDef,
    TranslationControllerGetSingleTranslationRequest
  > = z.object({
    resourceType: PathParamResourceType$outboundSchema,
    resourceId: z.string(),
    locale: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationControllerGetSingleTranslationRequest$ {
  /** @deprecated use `TranslationControllerGetSingleTranslationRequest$inboundSchema` instead. */
  export const inboundSchema =
    TranslationControllerGetSingleTranslationRequest$inboundSchema;
  /** @deprecated use `TranslationControllerGetSingleTranslationRequest$outboundSchema` instead. */
  export const outboundSchema =
    TranslationControllerGetSingleTranslationRequest$outboundSchema;
  /** @deprecated use `TranslationControllerGetSingleTranslationRequest$Outbound` instead. */
  export type Outbound =
    TranslationControllerGetSingleTranslationRequest$Outbound;
}

export function translationControllerGetSingleTranslationRequestToJSON(
  translationControllerGetSingleTranslationRequest:
    TranslationControllerGetSingleTranslationRequest,
): string {
  return JSON.stringify(
    TranslationControllerGetSingleTranslationRequest$outboundSchema.parse(
      translationControllerGetSingleTranslationRequest,
    ),
  );
}

export function translationControllerGetSingleTranslationRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TranslationControllerGetSingleTranslationRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TranslationControllerGetSingleTranslationRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TranslationControllerGetSingleTranslationRequest' from JSON`,
  );
}
