/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SupportControllerCreateThreadRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  createSupportThreadDto: components.CreateSupportThreadDto;
};

/** @internal */
export const SupportControllerCreateThreadRequest$inboundSchema: z.ZodType<
  SupportControllerCreateThreadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "idempotency-key": z.string().optional(),
  CreateSupportThreadDto: components.CreateSupportThreadDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "CreateSupportThreadDto": "createSupportThreadDto",
  });
});

/** @internal */
export type SupportControllerCreateThreadRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  CreateSupportThreadDto: components.CreateSupportThreadDto$Outbound;
};

/** @internal */
export const SupportControllerCreateThreadRequest$outboundSchema: z.ZodType<
  SupportControllerCreateThreadRequest$Outbound,
  z.ZodTypeDef,
  SupportControllerCreateThreadRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  createSupportThreadDto: components.CreateSupportThreadDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    createSupportThreadDto: "CreateSupportThreadDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportControllerCreateThreadRequest$ {
  /** @deprecated use `SupportControllerCreateThreadRequest$inboundSchema` instead. */
  export const inboundSchema =
    SupportControllerCreateThreadRequest$inboundSchema;
  /** @deprecated use `SupportControllerCreateThreadRequest$outboundSchema` instead. */
  export const outboundSchema =
    SupportControllerCreateThreadRequest$outboundSchema;
  /** @deprecated use `SupportControllerCreateThreadRequest$Outbound` instead. */
  export type Outbound = SupportControllerCreateThreadRequest$Outbound;
}

export function supportControllerCreateThreadRequestToJSON(
  supportControllerCreateThreadRequest: SupportControllerCreateThreadRequest,
): string {
  return JSON.stringify(
    SupportControllerCreateThreadRequest$outboundSchema.parse(
      supportControllerCreateThreadRequest,
    ),
  );
}

export function supportControllerCreateThreadRequestFromJSON(
  jsonString: string,
): SafeParseResult<SupportControllerCreateThreadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SupportControllerCreateThreadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportControllerCreateThreadRequest' from JSON`,
  );
}
