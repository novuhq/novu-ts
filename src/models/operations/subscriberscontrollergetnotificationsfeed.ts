/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type SubscribersControllerGetNotificationsFeedRequest = {
    subscriberId: string;
    page?: number | undefined;
    limit?: number | undefined;
    read?: boolean | undefined;
    seen?: boolean | undefined;
    /**
     * Base64 encoded string of the partial payload JSON object
     */
    payload?: string | undefined;
};

export type SubscribersControllerGetNotificationsFeedResponseBody = {
    data: Array<components.FeedResponseDto>;
    /**
     * Does the list have more items to fetch
     */
    hasMore: boolean;
    /**
     * The current page of the paginated response
     */
    page: number;
    /**
     * Number of items on each page
     */
    pageSize: number;
};

/** @internal */
export const SubscribersControllerGetNotificationsFeedRequest$inboundSchema: z.ZodType<
    SubscribersControllerGetNotificationsFeedRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    subscriberId: z.string(),
    page: z.number().optional(),
    limit: z.number().default(10),
    read: z.boolean().optional(),
    seen: z.boolean().optional(),
    payload: z.string().optional(),
});

/** @internal */
export type SubscribersControllerGetNotificationsFeedRequest$Outbound = {
    subscriberId: string;
    page?: number | undefined;
    limit: number;
    read?: boolean | undefined;
    seen?: boolean | undefined;
    payload?: string | undefined;
};

/** @internal */
export const SubscribersControllerGetNotificationsFeedRequest$outboundSchema: z.ZodType<
    SubscribersControllerGetNotificationsFeedRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerGetNotificationsFeedRequest
> = z.object({
    subscriberId: z.string(),
    page: z.number().optional(),
    limit: z.number().default(10),
    read: z.boolean().optional(),
    seen: z.boolean().optional(),
    payload: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerGetNotificationsFeedRequest$ {
    /** @deprecated use `SubscribersControllerGetNotificationsFeedRequest$inboundSchema` instead. */
    export const inboundSchema = SubscribersControllerGetNotificationsFeedRequest$inboundSchema;
    /** @deprecated use `SubscribersControllerGetNotificationsFeedRequest$outboundSchema` instead. */
    export const outboundSchema = SubscribersControllerGetNotificationsFeedRequest$outboundSchema;
    /** @deprecated use `SubscribersControllerGetNotificationsFeedRequest$Outbound` instead. */
    export type Outbound = SubscribersControllerGetNotificationsFeedRequest$Outbound;
}

/** @internal */
export const SubscribersControllerGetNotificationsFeedResponseBody$inboundSchema: z.ZodType<
    SubscribersControllerGetNotificationsFeedResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    data: z.array(components.FeedResponseDto$inboundSchema),
    hasMore: z.boolean(),
    page: z.number(),
    pageSize: z.number(),
});

/** @internal */
export type SubscribersControllerGetNotificationsFeedResponseBody$Outbound = {
    data: Array<components.FeedResponseDto$Outbound>;
    hasMore: boolean;
    page: number;
    pageSize: number;
};

/** @internal */
export const SubscribersControllerGetNotificationsFeedResponseBody$outboundSchema: z.ZodType<
    SubscribersControllerGetNotificationsFeedResponseBody$Outbound,
    z.ZodTypeDef,
    SubscribersControllerGetNotificationsFeedResponseBody
> = z.object({
    data: z.array(components.FeedResponseDto$outboundSchema),
    hasMore: z.boolean(),
    page: z.number(),
    pageSize: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerGetNotificationsFeedResponseBody$ {
    /** @deprecated use `SubscribersControllerGetNotificationsFeedResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        SubscribersControllerGetNotificationsFeedResponseBody$inboundSchema;
    /** @deprecated use `SubscribersControllerGetNotificationsFeedResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        SubscribersControllerGetNotificationsFeedResponseBody$outboundSchema;
    /** @deprecated use `SubscribersControllerGetNotificationsFeedResponseBody$Outbound` instead. */
    export type Outbound = SubscribersControllerGetNotificationsFeedResponseBody$Outbound;
}
