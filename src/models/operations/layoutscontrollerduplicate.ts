/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LayoutsControllerDuplicateRequest = {
  layoutId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  duplicateLayoutDto: components.DuplicateLayoutDto;
};

export type LayoutsControllerDuplicateResponse = {
  headers: { [k: string]: Array<string> };
  result: components.LayoutResponseDto;
};

/** @internal */
export const LayoutsControllerDuplicateRequest$inboundSchema: z.ZodType<
  LayoutsControllerDuplicateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  layoutId: z.string(),
  "idempotency-key": z.string().optional(),
  DuplicateLayoutDto: components.DuplicateLayoutDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "DuplicateLayoutDto": "duplicateLayoutDto",
  });
});

/** @internal */
export type LayoutsControllerDuplicateRequest$Outbound = {
  layoutId: string;
  "idempotency-key"?: string | undefined;
  DuplicateLayoutDto: components.DuplicateLayoutDto$Outbound;
};

/** @internal */
export const LayoutsControllerDuplicateRequest$outboundSchema: z.ZodType<
  LayoutsControllerDuplicateRequest$Outbound,
  z.ZodTypeDef,
  LayoutsControllerDuplicateRequest
> = z.object({
  layoutId: z.string(),
  idempotencyKey: z.string().optional(),
  duplicateLayoutDto: components.DuplicateLayoutDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    duplicateLayoutDto: "DuplicateLayoutDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerDuplicateRequest$ {
  /** @deprecated use `LayoutsControllerDuplicateRequest$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerDuplicateRequest$inboundSchema;
  /** @deprecated use `LayoutsControllerDuplicateRequest$outboundSchema` instead. */
  export const outboundSchema =
    LayoutsControllerDuplicateRequest$outboundSchema;
  /** @deprecated use `LayoutsControllerDuplicateRequest$Outbound` instead. */
  export type Outbound = LayoutsControllerDuplicateRequest$Outbound;
}

export function layoutsControllerDuplicateRequestToJSON(
  layoutsControllerDuplicateRequest: LayoutsControllerDuplicateRequest,
): string {
  return JSON.stringify(
    LayoutsControllerDuplicateRequest$outboundSchema.parse(
      layoutsControllerDuplicateRequest,
    ),
  );
}

export function layoutsControllerDuplicateRequestFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerDuplicateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerDuplicateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerDuplicateRequest' from JSON`,
  );
}

/** @internal */
export const LayoutsControllerDuplicateResponse$inboundSchema: z.ZodType<
  LayoutsControllerDuplicateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.LayoutResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type LayoutsControllerDuplicateResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.LayoutResponseDto$Outbound;
};

/** @internal */
export const LayoutsControllerDuplicateResponse$outboundSchema: z.ZodType<
  LayoutsControllerDuplicateResponse$Outbound,
  z.ZodTypeDef,
  LayoutsControllerDuplicateResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.LayoutResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerDuplicateResponse$ {
  /** @deprecated use `LayoutsControllerDuplicateResponse$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerDuplicateResponse$inboundSchema;
  /** @deprecated use `LayoutsControllerDuplicateResponse$outboundSchema` instead. */
  export const outboundSchema =
    LayoutsControllerDuplicateResponse$outboundSchema;
  /** @deprecated use `LayoutsControllerDuplicateResponse$Outbound` instead. */
  export type Outbound = LayoutsControllerDuplicateResponse$Outbound;
}

export function layoutsControllerDuplicateResponseToJSON(
  layoutsControllerDuplicateResponse: LayoutsControllerDuplicateResponse,
): string {
  return JSON.stringify(
    LayoutsControllerDuplicateResponse$outboundSchema.parse(
      layoutsControllerDuplicateResponse,
    ),
  );
}

export function layoutsControllerDuplicateResponseFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerDuplicateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      LayoutsControllerDuplicateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerDuplicateResponse' from JSON`,
  );
}
