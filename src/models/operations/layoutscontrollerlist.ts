/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LayoutsControllerListRequest = {
  /**
   * Number of items to return per page
   */
  limit?: number | undefined;
  /**
   * Number of items to skip before starting to return results
   */
  offset?: number | undefined;
  /**
   * Direction of sorting
   */
  orderDirection?: components.DirectionEnum | undefined;
  /**
   * Field to sort the results by
   */
  orderBy?: components.LayoutResponseDtoSortField | undefined;
  /**
   * Search query to filter layouts
   */
  query?: string | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type LayoutsControllerListResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ListLayoutResponseDto;
};

/** @internal */
export const LayoutsControllerListRequest$inboundSchema: z.ZodType<
  LayoutsControllerListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().optional(),
  offset: z.number().optional(),
  orderDirection: components.DirectionEnum$inboundSchema.optional(),
  orderBy: components.LayoutResponseDtoSortField$inboundSchema.optional(),
  query: z.string().optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type LayoutsControllerListRequest$Outbound = {
  limit?: number | undefined;
  offset?: number | undefined;
  orderDirection?: string | undefined;
  orderBy?: string | undefined;
  query?: string | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const LayoutsControllerListRequest$outboundSchema: z.ZodType<
  LayoutsControllerListRequest$Outbound,
  z.ZodTypeDef,
  LayoutsControllerListRequest
> = z.object({
  limit: z.number().optional(),
  offset: z.number().optional(),
  orderDirection: components.DirectionEnum$outboundSchema.optional(),
  orderBy: components.LayoutResponseDtoSortField$outboundSchema.optional(),
  query: z.string().optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerListRequest$ {
  /** @deprecated use `LayoutsControllerListRequest$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerListRequest$inboundSchema;
  /** @deprecated use `LayoutsControllerListRequest$outboundSchema` instead. */
  export const outboundSchema = LayoutsControllerListRequest$outboundSchema;
  /** @deprecated use `LayoutsControllerListRequest$Outbound` instead. */
  export type Outbound = LayoutsControllerListRequest$Outbound;
}

export function layoutsControllerListRequestToJSON(
  layoutsControllerListRequest: LayoutsControllerListRequest,
): string {
  return JSON.stringify(
    LayoutsControllerListRequest$outboundSchema.parse(
      layoutsControllerListRequest,
    ),
  );
}

export function layoutsControllerListRequestFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerListRequest' from JSON`,
  );
}

/** @internal */
export const LayoutsControllerListResponse$inboundSchema: z.ZodType<
  LayoutsControllerListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ListLayoutResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type LayoutsControllerListResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ListLayoutResponseDto$Outbound;
};

/** @internal */
export const LayoutsControllerListResponse$outboundSchema: z.ZodType<
  LayoutsControllerListResponse$Outbound,
  z.ZodTypeDef,
  LayoutsControllerListResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ListLayoutResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerListResponse$ {
  /** @deprecated use `LayoutsControllerListResponse$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerListResponse$inboundSchema;
  /** @deprecated use `LayoutsControllerListResponse$outboundSchema` instead. */
  export const outboundSchema = LayoutsControllerListResponse$outboundSchema;
  /** @deprecated use `LayoutsControllerListResponse$Outbound` instead. */
  export type Outbound = LayoutsControllerListResponse$Outbound;
}

export function layoutsControllerListResponseToJSON(
  layoutsControllerListResponse: LayoutsControllerListResponse,
): string {
  return JSON.stringify(
    LayoutsControllerListResponse$outboundSchema.parse(
      layoutsControllerListResponse,
    ),
  );
}

export function layoutsControllerListResponseFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerListResponse' from JSON`,
  );
}
