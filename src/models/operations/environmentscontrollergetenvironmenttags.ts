/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnvironmentsControllerGetEnvironmentTagsRequest = {
  /**
   * Environment internal ID (MongoDB ObjectId) or identifier
   */
  environmentId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type EnvironmentsControllerGetEnvironmentTagsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.GetEnvironmentTagsDto>;
};

/** @internal */
export const EnvironmentsControllerGetEnvironmentTagsRequest$inboundSchema:
  z.ZodType<
    EnvironmentsControllerGetEnvironmentTagsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    environmentId: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type EnvironmentsControllerGetEnvironmentTagsRequest$Outbound = {
  environmentId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const EnvironmentsControllerGetEnvironmentTagsRequest$outboundSchema:
  z.ZodType<
    EnvironmentsControllerGetEnvironmentTagsRequest$Outbound,
    z.ZodTypeDef,
    EnvironmentsControllerGetEnvironmentTagsRequest
  > = z.object({
    environmentId: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentsControllerGetEnvironmentTagsRequest$ {
  /** @deprecated use `EnvironmentsControllerGetEnvironmentTagsRequest$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentsControllerGetEnvironmentTagsRequest$inboundSchema;
  /** @deprecated use `EnvironmentsControllerGetEnvironmentTagsRequest$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentsControllerGetEnvironmentTagsRequest$outboundSchema;
  /** @deprecated use `EnvironmentsControllerGetEnvironmentTagsRequest$Outbound` instead. */
  export type Outbound =
    EnvironmentsControllerGetEnvironmentTagsRequest$Outbound;
}

export function environmentsControllerGetEnvironmentTagsRequestToJSON(
  environmentsControllerGetEnvironmentTagsRequest:
    EnvironmentsControllerGetEnvironmentTagsRequest,
): string {
  return JSON.stringify(
    EnvironmentsControllerGetEnvironmentTagsRequest$outboundSchema.parse(
      environmentsControllerGetEnvironmentTagsRequest,
    ),
  );
}

export function environmentsControllerGetEnvironmentTagsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentsControllerGetEnvironmentTagsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentsControllerGetEnvironmentTagsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentsControllerGetEnvironmentTagsRequest' from JSON`,
  );
}

/** @internal */
export const EnvironmentsControllerGetEnvironmentTagsResponse$inboundSchema:
  z.ZodType<
    EnvironmentsControllerGetEnvironmentTagsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.array(components.GetEnvironmentTagsDto$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type EnvironmentsControllerGetEnvironmentTagsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.GetEnvironmentTagsDto$Outbound>;
};

/** @internal */
export const EnvironmentsControllerGetEnvironmentTagsResponse$outboundSchema:
  z.ZodType<
    EnvironmentsControllerGetEnvironmentTagsResponse$Outbound,
    z.ZodTypeDef,
    EnvironmentsControllerGetEnvironmentTagsResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.array(components.GetEnvironmentTagsDto$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentsControllerGetEnvironmentTagsResponse$ {
  /** @deprecated use `EnvironmentsControllerGetEnvironmentTagsResponse$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentsControllerGetEnvironmentTagsResponse$inboundSchema;
  /** @deprecated use `EnvironmentsControllerGetEnvironmentTagsResponse$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentsControllerGetEnvironmentTagsResponse$outboundSchema;
  /** @deprecated use `EnvironmentsControllerGetEnvironmentTagsResponse$Outbound` instead. */
  export type Outbound =
    EnvironmentsControllerGetEnvironmentTagsResponse$Outbound;
}

export function environmentsControllerGetEnvironmentTagsResponseToJSON(
  environmentsControllerGetEnvironmentTagsResponse:
    EnvironmentsControllerGetEnvironmentTagsResponse,
): string {
  return JSON.stringify(
    EnvironmentsControllerGetEnvironmentTagsResponse$outboundSchema.parse(
      environmentsControllerGetEnvironmentTagsResponse,
    ),
  );
}

export function environmentsControllerGetEnvironmentTagsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentsControllerGetEnvironmentTagsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentsControllerGetEnvironmentTagsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvironmentsControllerGetEnvironmentTagsResponse' from JSON`,
  );
}
