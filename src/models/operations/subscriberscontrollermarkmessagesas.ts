/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerMarkMessagesAsRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  subscriberId: string;
  messageMarkAsRequestDto: components.MessageMarkAsRequestDto;
};

export type SubscribersControllerMarkMessagesAsResponseResult =
  | components.ErrorDto
  | Array<components.MessageResponseDto>;

export type SubscribersControllerMarkMessagesAsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ErrorDto | Array<components.MessageResponseDto>;
};

/** @internal */
export const SubscribersControllerMarkMessagesAsRequest$inboundSchema:
  z.ZodType<SubscribersControllerMarkMessagesAsRequest, z.ZodTypeDef, unknown> =
    z.object({
      "Idempotency-Key": z.string().optional(),
      subscriberId: z.string(),
      MessageMarkAsRequestDto: components.MessageMarkAsRequestDto$inboundSchema,
    }).transform((v) => {
      return remap$(v, {
        "Idempotency-Key": "idempotencyKey",
        "MessageMarkAsRequestDto": "messageMarkAsRequestDto",
      });
    });

/** @internal */
export type SubscribersControllerMarkMessagesAsRequest$Outbound = {
  "Idempotency-Key"?: string | undefined;
  subscriberId: string;
  MessageMarkAsRequestDto: components.MessageMarkAsRequestDto$Outbound;
};

/** @internal */
export const SubscribersControllerMarkMessagesAsRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerMarkMessagesAsRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerMarkMessagesAsRequest
  > = z.object({
    idempotencyKey: z.string().optional(),
    subscriberId: z.string(),
    messageMarkAsRequestDto: components.MessageMarkAsRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "Idempotency-Key",
      messageMarkAsRequestDto: "MessageMarkAsRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerMarkMessagesAsRequest$ {
  /** @deprecated use `SubscribersControllerMarkMessagesAsRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerMarkMessagesAsRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerMarkMessagesAsRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerMarkMessagesAsRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerMarkMessagesAsRequest$Outbound` instead. */
  export type Outbound = SubscribersControllerMarkMessagesAsRequest$Outbound;
}

export function subscribersControllerMarkMessagesAsRequestToJSON(
  subscribersControllerMarkMessagesAsRequest:
    SubscribersControllerMarkMessagesAsRequest,
): string {
  return JSON.stringify(
    SubscribersControllerMarkMessagesAsRequest$outboundSchema.parse(
      subscribersControllerMarkMessagesAsRequest,
    ),
  );
}

export function subscribersControllerMarkMessagesAsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerMarkMessagesAsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerMarkMessagesAsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerMarkMessagesAsRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerMarkMessagesAsResponseResult$inboundSchema:
  z.ZodType<
    SubscribersControllerMarkMessagesAsResponseResult,
    z.ZodTypeDef,
    unknown
  > = z.union([
    components.ErrorDto$inboundSchema,
    z.array(components.MessageResponseDto$inboundSchema),
  ]);

/** @internal */
export type SubscribersControllerMarkMessagesAsResponseResult$Outbound =
  | components.ErrorDto$Outbound
  | Array<components.MessageResponseDto$Outbound>;

/** @internal */
export const SubscribersControllerMarkMessagesAsResponseResult$outboundSchema:
  z.ZodType<
    SubscribersControllerMarkMessagesAsResponseResult$Outbound,
    z.ZodTypeDef,
    SubscribersControllerMarkMessagesAsResponseResult
  > = z.union([
    components.ErrorDto$outboundSchema,
    z.array(components.MessageResponseDto$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerMarkMessagesAsResponseResult$ {
  /** @deprecated use `SubscribersControllerMarkMessagesAsResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerMarkMessagesAsResponseResult$inboundSchema;
  /** @deprecated use `SubscribersControllerMarkMessagesAsResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerMarkMessagesAsResponseResult$outboundSchema;
  /** @deprecated use `SubscribersControllerMarkMessagesAsResponseResult$Outbound` instead. */
  export type Outbound =
    SubscribersControllerMarkMessagesAsResponseResult$Outbound;
}

export function subscribersControllerMarkMessagesAsResponseResultToJSON(
  subscribersControllerMarkMessagesAsResponseResult:
    SubscribersControllerMarkMessagesAsResponseResult,
): string {
  return JSON.stringify(
    SubscribersControllerMarkMessagesAsResponseResult$outboundSchema.parse(
      subscribersControllerMarkMessagesAsResponseResult,
    ),
  );
}

export function subscribersControllerMarkMessagesAsResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerMarkMessagesAsResponseResult,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerMarkMessagesAsResponseResult$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerMarkMessagesAsResponseResult' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerMarkMessagesAsResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerMarkMessagesAsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.union([
      components.ErrorDto$inboundSchema,
      z.array(components.MessageResponseDto$inboundSchema),
    ]),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerMarkMessagesAsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    | components.ErrorDto$Outbound
    | Array<components.MessageResponseDto$Outbound>;
};

/** @internal */
export const SubscribersControllerMarkMessagesAsResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerMarkMessagesAsResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerMarkMessagesAsResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.union([
      components.ErrorDto$outboundSchema,
      z.array(components.MessageResponseDto$outboundSchema),
    ]),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerMarkMessagesAsResponse$ {
  /** @deprecated use `SubscribersControllerMarkMessagesAsResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerMarkMessagesAsResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerMarkMessagesAsResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerMarkMessagesAsResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerMarkMessagesAsResponse$Outbound` instead. */
  export type Outbound = SubscribersControllerMarkMessagesAsResponse$Outbound;
}

export function subscribersControllerMarkMessagesAsResponseToJSON(
  subscribersControllerMarkMessagesAsResponse:
    SubscribersControllerMarkMessagesAsResponse,
): string {
  return JSON.stringify(
    SubscribersControllerMarkMessagesAsResponse$outboundSchema.parse(
      subscribersControllerMarkMessagesAsResponse,
    ),
  );
}

export function subscribersControllerMarkMessagesAsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerMarkMessagesAsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerMarkMessagesAsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerMarkMessagesAsResponse' from JSON`,
  );
}
