/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerListSubscriberPreferencesRequest = {
  subscriberId: string;
  /**
   * A flag which specifies if the inactive workflow channels should be included in the retrieved preferences. Default is true
   */
  includeInactiveChannels?: boolean | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type SubscribersControllerListSubscriberPreferencesResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.UpdateSubscriberPreferenceResponseDto>;
};

/** @internal */
export const SubscribersControllerListSubscriberPreferencesRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerListSubscriberPreferencesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    includeInactiveChannels: z.boolean().optional(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type SubscribersControllerListSubscriberPreferencesRequest$Outbound = {
  subscriberId: string;
  includeInactiveChannels?: boolean | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const SubscribersControllerListSubscriberPreferencesRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerListSubscriberPreferencesRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerListSubscriberPreferencesRequest
  > = z.object({
    subscriberId: z.string(),
    includeInactiveChannels: z.boolean().optional(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerListSubscriberPreferencesRequest$ {
  /** @deprecated use `SubscribersControllerListSubscriberPreferencesRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerListSubscriberPreferencesRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerListSubscriberPreferencesRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerListSubscriberPreferencesRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerListSubscriberPreferencesRequest$Outbound` instead. */
  export type Outbound =
    SubscribersControllerListSubscriberPreferencesRequest$Outbound;
}

export function subscribersControllerListSubscriberPreferencesRequestToJSON(
  subscribersControllerListSubscriberPreferencesRequest:
    SubscribersControllerListSubscriberPreferencesRequest,
): string {
  return JSON.stringify(
    SubscribersControllerListSubscriberPreferencesRequest$outboundSchema.parse(
      subscribersControllerListSubscriberPreferencesRequest,
    ),
  );
}

export function subscribersControllerListSubscriberPreferencesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerListSubscriberPreferencesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerListSubscriberPreferencesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerListSubscriberPreferencesRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerListSubscriberPreferencesResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerListSubscriberPreferencesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.array(
      components.UpdateSubscriberPreferenceResponseDto$inboundSchema,
    ),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerListSubscriberPreferencesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.UpdateSubscriberPreferenceResponseDto$Outbound>;
};

/** @internal */
export const SubscribersControllerListSubscriberPreferencesResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerListSubscriberPreferencesResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerListSubscriberPreferencesResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.array(
      components.UpdateSubscriberPreferenceResponseDto$outboundSchema,
    ),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerListSubscriberPreferencesResponse$ {
  /** @deprecated use `SubscribersControllerListSubscriberPreferencesResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerListSubscriberPreferencesResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerListSubscriberPreferencesResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerListSubscriberPreferencesResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerListSubscriberPreferencesResponse$Outbound` instead. */
  export type Outbound =
    SubscribersControllerListSubscriberPreferencesResponse$Outbound;
}

export function subscribersControllerListSubscriberPreferencesResponseToJSON(
  subscribersControllerListSubscriberPreferencesResponse:
    SubscribersControllerListSubscriberPreferencesResponse,
): string {
  return JSON.stringify(
    SubscribersControllerListSubscriberPreferencesResponse$outboundSchema.parse(
      subscribersControllerListSubscriberPreferencesResponse,
    ),
  );
}

export function subscribersControllerListSubscriberPreferencesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerListSubscriberPreferencesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerListSubscriberPreferencesResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersControllerListSubscriberPreferencesResponse' from JSON`,
  );
}
