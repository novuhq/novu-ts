/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersV1ControllerChatAccessOauthRequest = {
  subscriberId: string;
  providerId?: any | undefined;
  /**
   * HMAC hash for the request
   */
  hmacHash: string;
  /**
   * The ID of the environment, must be a valid MongoDB ID
   */
  environmentId: string;
  /**
   * Optional integration identifier
   */
  integrationIdentifier?: string | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type SubscribersV1ControllerChatAccessOauthResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const SubscribersV1ControllerChatAccessOauthRequest$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatAccessOauthRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    providerId: z.any().optional(),
    hmacHash: z.string(),
    environmentId: z.string(),
    integrationIdentifier: z.string().optional(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type SubscribersV1ControllerChatAccessOauthRequest$Outbound = {
  subscriberId: string;
  providerId?: any | undefined;
  hmacHash: string;
  environmentId: string;
  integrationIdentifier?: string | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const SubscribersV1ControllerChatAccessOauthRequest$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatAccessOauthRequest$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerChatAccessOauthRequest
  > = z.object({
    subscriberId: z.string(),
    providerId: z.any().optional(),
    hmacHash: z.string(),
    environmentId: z.string(),
    integrationIdentifier: z.string().optional(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerChatAccessOauthRequest$ {
  /** @deprecated use `SubscribersV1ControllerChatAccessOauthRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerChatAccessOauthRequest$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatAccessOauthRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerChatAccessOauthRequest$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatAccessOauthRequest$Outbound` instead. */
  export type Outbound = SubscribersV1ControllerChatAccessOauthRequest$Outbound;
}

export function subscribersV1ControllerChatAccessOauthRequestToJSON(
  subscribersV1ControllerChatAccessOauthRequest:
    SubscribersV1ControllerChatAccessOauthRequest,
): string {
  return JSON.stringify(
    SubscribersV1ControllerChatAccessOauthRequest$outboundSchema.parse(
      subscribersV1ControllerChatAccessOauthRequest,
    ),
  );
}

export function subscribersV1ControllerChatAccessOauthRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerChatAccessOauthRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerChatAccessOauthRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersV1ControllerChatAccessOauthRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersV1ControllerChatAccessOauthResponse$inboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatAccessOauthResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
    });
  });

/** @internal */
export type SubscribersV1ControllerChatAccessOauthResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const SubscribersV1ControllerChatAccessOauthResponse$outboundSchema:
  z.ZodType<
    SubscribersV1ControllerChatAccessOauthResponse$Outbound,
    z.ZodTypeDef,
    SubscribersV1ControllerChatAccessOauthResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersV1ControllerChatAccessOauthResponse$ {
  /** @deprecated use `SubscribersV1ControllerChatAccessOauthResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersV1ControllerChatAccessOauthResponse$inboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatAccessOauthResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersV1ControllerChatAccessOauthResponse$outboundSchema;
  /** @deprecated use `SubscribersV1ControllerChatAccessOauthResponse$Outbound` instead. */
  export type Outbound =
    SubscribersV1ControllerChatAccessOauthResponse$Outbound;
}

export function subscribersV1ControllerChatAccessOauthResponseToJSON(
  subscribersV1ControllerChatAccessOauthResponse:
    SubscribersV1ControllerChatAccessOauthResponse,
): string {
  return JSON.stringify(
    SubscribersV1ControllerChatAccessOauthResponse$outboundSchema.parse(
      subscribersV1ControllerChatAccessOauthResponse,
    ),
  );
}

export function subscribersV1ControllerChatAccessOauthResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersV1ControllerChatAccessOauthResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersV1ControllerChatAccessOauthResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersV1ControllerChatAccessOauthResponse' from JSON`,
  );
}
