/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Resource type
 */
export const TranslationControllerDeleteTranslationEndpointPathParamResourceType =
  {
    Workflow: "workflow",
  } as const;
/**
 * Resource type
 */
export type TranslationControllerDeleteTranslationEndpointPathParamResourceType =
  ClosedEnum<
    typeof TranslationControllerDeleteTranslationEndpointPathParamResourceType
  >;

export type TranslationControllerDeleteTranslationEndpointRequest = {
  /**
   * Resource type
   */
  resourceType:
    TranslationControllerDeleteTranslationEndpointPathParamResourceType;
  /**
   * Resource ID
   */
  resourceId: string;
  /**
   * Locale code
   */
  locale: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

/** @internal */
export const TranslationControllerDeleteTranslationEndpointPathParamResourceType$inboundSchema:
  z.ZodNativeEnum<
    typeof TranslationControllerDeleteTranslationEndpointPathParamResourceType
  > = z.nativeEnum(
    TranslationControllerDeleteTranslationEndpointPathParamResourceType,
  );

/** @internal */
export const TranslationControllerDeleteTranslationEndpointPathParamResourceType$outboundSchema:
  z.ZodNativeEnum<
    typeof TranslationControllerDeleteTranslationEndpointPathParamResourceType
  > =
    TranslationControllerDeleteTranslationEndpointPathParamResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationControllerDeleteTranslationEndpointPathParamResourceType$ {
  /** @deprecated use `TranslationControllerDeleteTranslationEndpointPathParamResourceType$inboundSchema` instead. */
  export const inboundSchema =
    TranslationControllerDeleteTranslationEndpointPathParamResourceType$inboundSchema;
  /** @deprecated use `TranslationControllerDeleteTranslationEndpointPathParamResourceType$outboundSchema` instead. */
  export const outboundSchema =
    TranslationControllerDeleteTranslationEndpointPathParamResourceType$outboundSchema;
}

/** @internal */
export const TranslationControllerDeleteTranslationEndpointRequest$inboundSchema:
  z.ZodType<
    TranslationControllerDeleteTranslationEndpointRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    resourceType:
      TranslationControllerDeleteTranslationEndpointPathParamResourceType$inboundSchema,
    resourceId: z.string(),
    locale: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type TranslationControllerDeleteTranslationEndpointRequest$Outbound = {
  resourceType: string;
  resourceId: string;
  locale: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const TranslationControllerDeleteTranslationEndpointRequest$outboundSchema:
  z.ZodType<
    TranslationControllerDeleteTranslationEndpointRequest$Outbound,
    z.ZodTypeDef,
    TranslationControllerDeleteTranslationEndpointRequest
  > = z.object({
    resourceType:
      TranslationControllerDeleteTranslationEndpointPathParamResourceType$outboundSchema,
    resourceId: z.string(),
    locale: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationControllerDeleteTranslationEndpointRequest$ {
  /** @deprecated use `TranslationControllerDeleteTranslationEndpointRequest$inboundSchema` instead. */
  export const inboundSchema =
    TranslationControllerDeleteTranslationEndpointRequest$inboundSchema;
  /** @deprecated use `TranslationControllerDeleteTranslationEndpointRequest$outboundSchema` instead. */
  export const outboundSchema =
    TranslationControllerDeleteTranslationEndpointRequest$outboundSchema;
  /** @deprecated use `TranslationControllerDeleteTranslationEndpointRequest$Outbound` instead. */
  export type Outbound =
    TranslationControllerDeleteTranslationEndpointRequest$Outbound;
}

export function translationControllerDeleteTranslationEndpointRequestToJSON(
  translationControllerDeleteTranslationEndpointRequest:
    TranslationControllerDeleteTranslationEndpointRequest,
): string {
  return JSON.stringify(
    TranslationControllerDeleteTranslationEndpointRequest$outboundSchema.parse(
      translationControllerDeleteTranslationEndpointRequest,
    ),
  );
}

export function translationControllerDeleteTranslationEndpointRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TranslationControllerDeleteTranslationEndpointRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TranslationControllerDeleteTranslationEndpointRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TranslationControllerDeleteTranslationEndpointRequest' from JSON`,
  );
}
