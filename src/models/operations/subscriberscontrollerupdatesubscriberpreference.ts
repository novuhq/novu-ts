/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerUpdateSubscriberPreferenceRequest = {
  subscriberId: string;
  workflowId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  updateSubscriberPreferenceRequestDto:
    components.UpdateSubscriberPreferenceRequestDto;
};

export type SubscribersControllerUpdateSubscriberPreferenceResponse = {
  headers: { [k: string]: Array<string> };
  result: components.UpdateSubscriberPreferenceResponseDto;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberPreferenceRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberPreferenceRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    workflowId: z.string(),
    "idempotency-key": z.string().optional(),
    UpdateSubscriberPreferenceRequestDto:
      components.UpdateSubscriberPreferenceRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "UpdateSubscriberPreferenceRequestDto":
        "updateSubscriberPreferenceRequestDto",
    });
  });

/** @internal */
export type SubscribersControllerUpdateSubscriberPreferenceRequest$Outbound = {
  subscriberId: string;
  workflowId: string;
  "idempotency-key"?: string | undefined;
  UpdateSubscriberPreferenceRequestDto:
    components.UpdateSubscriberPreferenceRequestDto$Outbound;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberPreferenceRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberPreferenceRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberPreferenceRequest
  > = z.object({
    subscriberId: z.string(),
    workflowId: z.string(),
    idempotencyKey: z.string().optional(),
    updateSubscriberPreferenceRequestDto:
      components.UpdateSubscriberPreferenceRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      updateSubscriberPreferenceRequestDto:
        "UpdateSubscriberPreferenceRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberPreferenceRequest$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferenceRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberPreferenceRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferenceRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberPreferenceRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferenceRequest$Outbound` instead. */
  export type Outbound =
    SubscribersControllerUpdateSubscriberPreferenceRequest$Outbound;
}

export function subscribersControllerUpdateSubscriberPreferenceRequestToJSON(
  subscribersControllerUpdateSubscriberPreferenceRequest:
    SubscribersControllerUpdateSubscriberPreferenceRequest,
): string {
  return JSON.stringify(
    SubscribersControllerUpdateSubscriberPreferenceRequest$outboundSchema.parse(
      subscribersControllerUpdateSubscriberPreferenceRequest,
    ),
  );
}

export function subscribersControllerUpdateSubscriberPreferenceRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerUpdateSubscriberPreferenceRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerUpdateSubscriberPreferenceRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersControllerUpdateSubscriberPreferenceRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerUpdateSubscriberPreferenceResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberPreferenceResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.UpdateSubscriberPreferenceResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerUpdateSubscriberPreferenceResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.UpdateSubscriberPreferenceResponseDto$Outbound;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberPreferenceResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberPreferenceResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberPreferenceResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.UpdateSubscriberPreferenceResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberPreferenceResponse$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferenceResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberPreferenceResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferenceResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberPreferenceResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberPreferenceResponse$Outbound` instead. */
  export type Outbound =
    SubscribersControllerUpdateSubscriberPreferenceResponse$Outbound;
}

export function subscribersControllerUpdateSubscriberPreferenceResponseToJSON(
  subscribersControllerUpdateSubscriberPreferenceResponse:
    SubscribersControllerUpdateSubscriberPreferenceResponse,
): string {
  return JSON.stringify(
    SubscribersControllerUpdateSubscriberPreferenceResponse$outboundSchema
      .parse(subscribersControllerUpdateSubscriberPreferenceResponse),
  );
}

export function subscribersControllerUpdateSubscriberPreferenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerUpdateSubscriberPreferenceResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerUpdateSubscriberPreferenceResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'SubscribersControllerUpdateSubscriberPreferenceResponse' from JSON`,
  );
}
