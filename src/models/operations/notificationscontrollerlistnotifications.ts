/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Channels = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type Channels = ClosedEnum<typeof Channels>;

export type NotificationsControllerListNotificationsRequest = {
    channels: Array<Channels>;
    templates: Array<string>;
    emails: Array<string>;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    search: string;
    subscriberIds: Array<string>;
    page?: number | undefined;
    transactionId?: string | undefined;
};

/** @internal */
export const Channels$inboundSchema: z.ZodNativeEnum<typeof Channels> = z.nativeEnum(Channels);

/** @internal */
export const Channels$outboundSchema: z.ZodNativeEnum<typeof Channels> = Channels$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Channels$ {
    /** @deprecated use `Channels$inboundSchema` instead. */
    export const inboundSchema = Channels$inboundSchema;
    /** @deprecated use `Channels$outboundSchema` instead. */
    export const outboundSchema = Channels$outboundSchema;
}

/** @internal */
export const NotificationsControllerListNotificationsRequest$inboundSchema: z.ZodType<
    NotificationsControllerListNotificationsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    channels: z.array(Channels$inboundSchema),
    templates: z.array(z.string()),
    emails: z.array(z.string()),
    search: z.string(),
    subscriberIds: z.array(z.string()),
    page: z.number().default(0),
    transactionId: z.string().optional(),
});

/** @internal */
export type NotificationsControllerListNotificationsRequest$Outbound = {
    channels: Array<string>;
    templates: Array<string>;
    emails: Array<string>;
    search: string;
    subscriberIds: Array<string>;
    page: number;
    transactionId?: string | undefined;
};

/** @internal */
export const NotificationsControllerListNotificationsRequest$outboundSchema: z.ZodType<
    NotificationsControllerListNotificationsRequest$Outbound,
    z.ZodTypeDef,
    NotificationsControllerListNotificationsRequest
> = z.object({
    channels: z.array(Channels$outboundSchema),
    templates: z.array(z.string()),
    emails: z.array(z.string()),
    search: z.string(),
    subscriberIds: z.array(z.string()),
    page: z.number().default(0),
    transactionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationsControllerListNotificationsRequest$ {
    /** @deprecated use `NotificationsControllerListNotificationsRequest$inboundSchema` instead. */
    export const inboundSchema = NotificationsControllerListNotificationsRequest$inboundSchema;
    /** @deprecated use `NotificationsControllerListNotificationsRequest$outboundSchema` instead. */
    export const outboundSchema = NotificationsControllerListNotificationsRequest$outboundSchema;
    /** @deprecated use `NotificationsControllerListNotificationsRequest$Outbound` instead. */
    export type Outbound = NotificationsControllerListNotificationsRequest$Outbound;
}
