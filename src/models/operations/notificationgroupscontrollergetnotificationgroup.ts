/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationGroupsControllerGetNotificationGroupRequest = {
  id: string;
};

export type NotificationGroupsControllerGetNotificationGroupResponse = {
  headers: { [k: string]: Array<string> };
  result: components.NotificationGroupResponseDto;
};

/** @internal */
export const NotificationGroupsControllerGetNotificationGroupRequest$inboundSchema:
  z.ZodType<
    NotificationGroupsControllerGetNotificationGroupRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
  });

/** @internal */
export type NotificationGroupsControllerGetNotificationGroupRequest$Outbound = {
  id: string;
};

/** @internal */
export const NotificationGroupsControllerGetNotificationGroupRequest$outboundSchema:
  z.ZodType<
    NotificationGroupsControllerGetNotificationGroupRequest$Outbound,
    z.ZodTypeDef,
    NotificationGroupsControllerGetNotificationGroupRequest
  > = z.object({
    id: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationGroupsControllerGetNotificationGroupRequest$ {
  /** @deprecated use `NotificationGroupsControllerGetNotificationGroupRequest$inboundSchema` instead. */
  export const inboundSchema =
    NotificationGroupsControllerGetNotificationGroupRequest$inboundSchema;
  /** @deprecated use `NotificationGroupsControllerGetNotificationGroupRequest$outboundSchema` instead. */
  export const outboundSchema =
    NotificationGroupsControllerGetNotificationGroupRequest$outboundSchema;
  /** @deprecated use `NotificationGroupsControllerGetNotificationGroupRequest$Outbound` instead. */
  export type Outbound =
    NotificationGroupsControllerGetNotificationGroupRequest$Outbound;
}

export function notificationGroupsControllerGetNotificationGroupRequestToJSON(
  notificationGroupsControllerGetNotificationGroupRequest:
    NotificationGroupsControllerGetNotificationGroupRequest,
): string {
  return JSON.stringify(
    NotificationGroupsControllerGetNotificationGroupRequest$outboundSchema
      .parse(notificationGroupsControllerGetNotificationGroupRequest),
  );
}

export function notificationGroupsControllerGetNotificationGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationGroupsControllerGetNotificationGroupRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationGroupsControllerGetNotificationGroupRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'NotificationGroupsControllerGetNotificationGroupRequest' from JSON`,
  );
}

/** @internal */
export const NotificationGroupsControllerGetNotificationGroupResponse$inboundSchema:
  z.ZodType<
    NotificationGroupsControllerGetNotificationGroupResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.NotificationGroupResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type NotificationGroupsControllerGetNotificationGroupResponse$Outbound =
  {
    Headers: { [k: string]: Array<string> };
    Result: components.NotificationGroupResponseDto$Outbound;
  };

/** @internal */
export const NotificationGroupsControllerGetNotificationGroupResponse$outboundSchema:
  z.ZodType<
    NotificationGroupsControllerGetNotificationGroupResponse$Outbound,
    z.ZodTypeDef,
    NotificationGroupsControllerGetNotificationGroupResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.NotificationGroupResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationGroupsControllerGetNotificationGroupResponse$ {
  /** @deprecated use `NotificationGroupsControllerGetNotificationGroupResponse$inboundSchema` instead. */
  export const inboundSchema =
    NotificationGroupsControllerGetNotificationGroupResponse$inboundSchema;
  /** @deprecated use `NotificationGroupsControllerGetNotificationGroupResponse$outboundSchema` instead. */
  export const outboundSchema =
    NotificationGroupsControllerGetNotificationGroupResponse$outboundSchema;
  /** @deprecated use `NotificationGroupsControllerGetNotificationGroupResponse$Outbound` instead. */
  export type Outbound =
    NotificationGroupsControllerGetNotificationGroupResponse$Outbound;
}

export function notificationGroupsControllerGetNotificationGroupResponseToJSON(
  notificationGroupsControllerGetNotificationGroupResponse:
    NotificationGroupsControllerGetNotificationGroupResponse,
): string {
  return JSON.stringify(
    NotificationGroupsControllerGetNotificationGroupResponse$outboundSchema
      .parse(notificationGroupsControllerGetNotificationGroupResponse),
  );
}

export function notificationGroupsControllerGetNotificationGroupResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  NotificationGroupsControllerGetNotificationGroupResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationGroupsControllerGetNotificationGroupResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'NotificationGroupsControllerGetNotificationGroupResponse' from JSON`,
  );
}
