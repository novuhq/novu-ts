/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TranslationControllerUploadTranslationFilesRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  /**
   * Translation upload details
   */
  uploadTranslationsRequestDto: components.UploadTranslationsRequestDto;
};

/** @internal */
export const TranslationControllerUploadTranslationFilesRequest$inboundSchema:
  z.ZodType<
    TranslationControllerUploadTranslationFilesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "idempotency-key": z.string().optional(),
    UploadTranslationsRequestDto:
      components.UploadTranslationsRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "UploadTranslationsRequestDto": "uploadTranslationsRequestDto",
    });
  });

/** @internal */
export type TranslationControllerUploadTranslationFilesRequest$Outbound = {
  "idempotency-key"?: string | undefined;
  UploadTranslationsRequestDto:
    components.UploadTranslationsRequestDto$Outbound;
};

/** @internal */
export const TranslationControllerUploadTranslationFilesRequest$outboundSchema:
  z.ZodType<
    TranslationControllerUploadTranslationFilesRequest$Outbound,
    z.ZodTypeDef,
    TranslationControllerUploadTranslationFilesRequest
  > = z.object({
    idempotencyKey: z.string().optional(),
    uploadTranslationsRequestDto:
      components.UploadTranslationsRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      uploadTranslationsRequestDto: "UploadTranslationsRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationControllerUploadTranslationFilesRequest$ {
  /** @deprecated use `TranslationControllerUploadTranslationFilesRequest$inboundSchema` instead. */
  export const inboundSchema =
    TranslationControllerUploadTranslationFilesRequest$inboundSchema;
  /** @deprecated use `TranslationControllerUploadTranslationFilesRequest$outboundSchema` instead. */
  export const outboundSchema =
    TranslationControllerUploadTranslationFilesRequest$outboundSchema;
  /** @deprecated use `TranslationControllerUploadTranslationFilesRequest$Outbound` instead. */
  export type Outbound =
    TranslationControllerUploadTranslationFilesRequest$Outbound;
}

export function translationControllerUploadTranslationFilesRequestToJSON(
  translationControllerUploadTranslationFilesRequest:
    TranslationControllerUploadTranslationFilesRequest,
): string {
  return JSON.stringify(
    TranslationControllerUploadTranslationFilesRequest$outboundSchema.parse(
      translationControllerUploadTranslationFilesRequest,
    ),
  );
}

export function translationControllerUploadTranslationFilesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TranslationControllerUploadTranslationFilesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TranslationControllerUploadTranslationFilesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TranslationControllerUploadTranslationFilesRequest' from JSON`,
  );
}
