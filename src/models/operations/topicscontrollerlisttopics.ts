/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Direction of sorting
 */
export const TopicsControllerListTopicsQueryParamOrderDirection = {
  Asc: "ASC",
  Desc: "DESC",
} as const;
/**
 * Direction of sorting
 */
export type TopicsControllerListTopicsQueryParamOrderDirection = ClosedEnum<
  typeof TopicsControllerListTopicsQueryParamOrderDirection
>;

export type TopicsControllerListTopicsRequest = {
  /**
   * Cursor for pagination indicating the starting point after which to fetch results.
   */
  after?: string | undefined;
  /**
   * Cursor for pagination indicating the ending point before which to fetch results.
   */
  before?: string | undefined;
  /**
   * Limit the number of items to return (max 100)
   */
  limit?: number | undefined;
  /**
   * Direction of sorting
   */
  orderDirection?:
    | TopicsControllerListTopicsQueryParamOrderDirection
    | undefined;
  /**
   * Field to order by
   */
  orderBy?: string | undefined;
  /**
   * Include cursor item in response
   */
  includeCursor?: boolean | undefined;
  /**
   * Key of the topic to filter results.
   */
  key?: string | undefined;
  /**
   * Name of the topic to filter results.
   */
  name?: string | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type TopicsControllerListTopicsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ListTopicsResponseDto;
};

/** @internal */
export const TopicsControllerListTopicsQueryParamOrderDirection$inboundSchema:
  z.ZodNativeEnum<typeof TopicsControllerListTopicsQueryParamOrderDirection> = z
    .nativeEnum(TopicsControllerListTopicsQueryParamOrderDirection);

/** @internal */
export const TopicsControllerListTopicsQueryParamOrderDirection$outboundSchema:
  z.ZodNativeEnum<typeof TopicsControllerListTopicsQueryParamOrderDirection> =
    TopicsControllerListTopicsQueryParamOrderDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerListTopicsQueryParamOrderDirection$ {
  /** @deprecated use `TopicsControllerListTopicsQueryParamOrderDirection$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerListTopicsQueryParamOrderDirection$inboundSchema;
  /** @deprecated use `TopicsControllerListTopicsQueryParamOrderDirection$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerListTopicsQueryParamOrderDirection$outboundSchema;
}

/** @internal */
export const TopicsControllerListTopicsRequest$inboundSchema: z.ZodType<
  TopicsControllerListTopicsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  orderDirection:
    TopicsControllerListTopicsQueryParamOrderDirection$inboundSchema.optional(),
  orderBy: z.string().optional(),
  includeCursor: z.boolean().optional(),
  key: z.string().optional(),
  name: z.string().optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type TopicsControllerListTopicsRequest$Outbound = {
  after?: string | undefined;
  before?: string | undefined;
  limit?: number | undefined;
  orderDirection?: string | undefined;
  orderBy?: string | undefined;
  includeCursor?: boolean | undefined;
  key?: string | undefined;
  name?: string | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const TopicsControllerListTopicsRequest$outboundSchema: z.ZodType<
  TopicsControllerListTopicsRequest$Outbound,
  z.ZodTypeDef,
  TopicsControllerListTopicsRequest
> = z.object({
  after: z.string().optional(),
  before: z.string().optional(),
  limit: z.number().optional(),
  orderDirection:
    TopicsControllerListTopicsQueryParamOrderDirection$outboundSchema
      .optional(),
  orderBy: z.string().optional(),
  includeCursor: z.boolean().optional(),
  key: z.string().optional(),
  name: z.string().optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerListTopicsRequest$ {
  /** @deprecated use `TopicsControllerListTopicsRequest$inboundSchema` instead. */
  export const inboundSchema = TopicsControllerListTopicsRequest$inboundSchema;
  /** @deprecated use `TopicsControllerListTopicsRequest$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerListTopicsRequest$outboundSchema;
  /** @deprecated use `TopicsControllerListTopicsRequest$Outbound` instead. */
  export type Outbound = TopicsControllerListTopicsRequest$Outbound;
}

export function topicsControllerListTopicsRequestToJSON(
  topicsControllerListTopicsRequest: TopicsControllerListTopicsRequest,
): string {
  return JSON.stringify(
    TopicsControllerListTopicsRequest$outboundSchema.parse(
      topicsControllerListTopicsRequest,
    ),
  );
}

export function topicsControllerListTopicsRequestFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerListTopicsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicsControllerListTopicsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerListTopicsRequest' from JSON`,
  );
}

/** @internal */
export const TopicsControllerListTopicsResponse$inboundSchema: z.ZodType<
  TopicsControllerListTopicsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.ListTopicsResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type TopicsControllerListTopicsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ListTopicsResponseDto$Outbound;
};

/** @internal */
export const TopicsControllerListTopicsResponse$outboundSchema: z.ZodType<
  TopicsControllerListTopicsResponse$Outbound,
  z.ZodTypeDef,
  TopicsControllerListTopicsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.ListTopicsResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerListTopicsResponse$ {
  /** @deprecated use `TopicsControllerListTopicsResponse$inboundSchema` instead. */
  export const inboundSchema = TopicsControllerListTopicsResponse$inboundSchema;
  /** @deprecated use `TopicsControllerListTopicsResponse$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerListTopicsResponse$outboundSchema;
  /** @deprecated use `TopicsControllerListTopicsResponse$Outbound` instead. */
  export type Outbound = TopicsControllerListTopicsResponse$Outbound;
}

export function topicsControllerListTopicsResponseToJSON(
  topicsControllerListTopicsResponse: TopicsControllerListTopicsResponse,
): string {
  return JSON.stringify(
    TopicsControllerListTopicsResponse$outboundSchema.parse(
      topicsControllerListTopicsResponse,
    ),
  );
}

export function topicsControllerListTopicsResponseFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerListTopicsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerListTopicsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerListTopicsResponse' from JSON`,
  );
}
