/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LogsControllerGetLogsRequest = {
  page?: number | undefined;
  limit?: number | undefined;
  statusCode?: Array<number> | undefined;
  url?: string | undefined;
  urlPattern?: string | undefined;
  transactionId?: string | undefined;
  created?: number | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type LogsControllerGetLogsResponseBody = {};

/** @internal */
export const LogsControllerGetLogsRequest$inboundSchema: z.ZodType<
  LogsControllerGetLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().optional(),
  limit: z.number().optional(),
  statusCode: z.array(z.number()).optional(),
  url: z.string().optional(),
  url_pattern: z.string().optional(),
  transactionId: z.string().optional(),
  created: z.number().optional(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "url_pattern": "urlPattern",
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type LogsControllerGetLogsRequest$Outbound = {
  page?: number | undefined;
  limit?: number | undefined;
  statusCode?: Array<number> | undefined;
  url?: string | undefined;
  url_pattern?: string | undefined;
  transactionId?: string | undefined;
  created?: number | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const LogsControllerGetLogsRequest$outboundSchema: z.ZodType<
  LogsControllerGetLogsRequest$Outbound,
  z.ZodTypeDef,
  LogsControllerGetLogsRequest
> = z.object({
  page: z.number().optional(),
  limit: z.number().optional(),
  statusCode: z.array(z.number()).optional(),
  url: z.string().optional(),
  urlPattern: z.string().optional(),
  transactionId: z.string().optional(),
  created: z.number().optional(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    urlPattern: "url_pattern",
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogsControllerGetLogsRequest$ {
  /** @deprecated use `LogsControllerGetLogsRequest$inboundSchema` instead. */
  export const inboundSchema = LogsControllerGetLogsRequest$inboundSchema;
  /** @deprecated use `LogsControllerGetLogsRequest$outboundSchema` instead. */
  export const outboundSchema = LogsControllerGetLogsRequest$outboundSchema;
  /** @deprecated use `LogsControllerGetLogsRequest$Outbound` instead. */
  export type Outbound = LogsControllerGetLogsRequest$Outbound;
}

export function logsControllerGetLogsRequestToJSON(
  logsControllerGetLogsRequest: LogsControllerGetLogsRequest,
): string {
  return JSON.stringify(
    LogsControllerGetLogsRequest$outboundSchema.parse(
      logsControllerGetLogsRequest,
    ),
  );
}

export function logsControllerGetLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<LogsControllerGetLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogsControllerGetLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogsControllerGetLogsRequest' from JSON`,
  );
}

/** @internal */
export const LogsControllerGetLogsResponseBody$inboundSchema: z.ZodType<
  LogsControllerGetLogsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LogsControllerGetLogsResponseBody$Outbound = {};

/** @internal */
export const LogsControllerGetLogsResponseBody$outboundSchema: z.ZodType<
  LogsControllerGetLogsResponseBody$Outbound,
  z.ZodTypeDef,
  LogsControllerGetLogsResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogsControllerGetLogsResponseBody$ {
  /** @deprecated use `LogsControllerGetLogsResponseBody$inboundSchema` instead. */
  export const inboundSchema = LogsControllerGetLogsResponseBody$inboundSchema;
  /** @deprecated use `LogsControllerGetLogsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    LogsControllerGetLogsResponseBody$outboundSchema;
  /** @deprecated use `LogsControllerGetLogsResponseBody$Outbound` instead. */
  export type Outbound = LogsControllerGetLogsResponseBody$Outbound;
}

export function logsControllerGetLogsResponseBodyToJSON(
  logsControllerGetLogsResponseBody: LogsControllerGetLogsResponseBody,
): string {
  return JSON.stringify(
    LogsControllerGetLogsResponseBody$outboundSchema.parse(
      logsControllerGetLogsResponseBody,
    ),
  );
}

export function logsControllerGetLogsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<LogsControllerGetLogsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogsControllerGetLogsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogsControllerGetLogsResponseBody' from JSON`,
  );
}
