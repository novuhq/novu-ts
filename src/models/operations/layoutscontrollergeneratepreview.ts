/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LayoutsControllerGeneratePreviewRequest = {
  layoutId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  /**
   * Layout preview generation details
   */
  layoutPreviewRequestDto: components.LayoutPreviewRequestDto;
};

export type LayoutsControllerGeneratePreviewResponse = {
  headers: { [k: string]: Array<string> };
  result: components.GenerateLayoutPreviewResponseDto;
};

/** @internal */
export const LayoutsControllerGeneratePreviewRequest$inboundSchema: z.ZodType<
  LayoutsControllerGeneratePreviewRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  layoutId: z.string(),
  "idempotency-key": z.string().optional(),
  LayoutPreviewRequestDto: components.LayoutPreviewRequestDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "LayoutPreviewRequestDto": "layoutPreviewRequestDto",
  });
});

/** @internal */
export type LayoutsControllerGeneratePreviewRequest$Outbound = {
  layoutId: string;
  "idempotency-key"?: string | undefined;
  LayoutPreviewRequestDto: components.LayoutPreviewRequestDto$Outbound;
};

/** @internal */
export const LayoutsControllerGeneratePreviewRequest$outboundSchema: z.ZodType<
  LayoutsControllerGeneratePreviewRequest$Outbound,
  z.ZodTypeDef,
  LayoutsControllerGeneratePreviewRequest
> = z.object({
  layoutId: z.string(),
  idempotencyKey: z.string().optional(),
  layoutPreviewRequestDto: components.LayoutPreviewRequestDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    layoutPreviewRequestDto: "LayoutPreviewRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerGeneratePreviewRequest$ {
  /** @deprecated use `LayoutsControllerGeneratePreviewRequest$inboundSchema` instead. */
  export const inboundSchema =
    LayoutsControllerGeneratePreviewRequest$inboundSchema;
  /** @deprecated use `LayoutsControllerGeneratePreviewRequest$outboundSchema` instead. */
  export const outboundSchema =
    LayoutsControllerGeneratePreviewRequest$outboundSchema;
  /** @deprecated use `LayoutsControllerGeneratePreviewRequest$Outbound` instead. */
  export type Outbound = LayoutsControllerGeneratePreviewRequest$Outbound;
}

export function layoutsControllerGeneratePreviewRequestToJSON(
  layoutsControllerGeneratePreviewRequest:
    LayoutsControllerGeneratePreviewRequest,
): string {
  return JSON.stringify(
    LayoutsControllerGeneratePreviewRequest$outboundSchema.parse(
      layoutsControllerGeneratePreviewRequest,
    ),
  );
}

export function layoutsControllerGeneratePreviewRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  LayoutsControllerGeneratePreviewRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      LayoutsControllerGeneratePreviewRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'LayoutsControllerGeneratePreviewRequest' from JSON`,
  );
}

/** @internal */
export const LayoutsControllerGeneratePreviewResponse$inboundSchema: z.ZodType<
  LayoutsControllerGeneratePreviewResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.GenerateLayoutPreviewResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type LayoutsControllerGeneratePreviewResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.GenerateLayoutPreviewResponseDto$Outbound;
};

/** @internal */
export const LayoutsControllerGeneratePreviewResponse$outboundSchema: z.ZodType<
  LayoutsControllerGeneratePreviewResponse$Outbound,
  z.ZodTypeDef,
  LayoutsControllerGeneratePreviewResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.GenerateLayoutPreviewResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerGeneratePreviewResponse$ {
  /** @deprecated use `LayoutsControllerGeneratePreviewResponse$inboundSchema` instead. */
  export const inboundSchema =
    LayoutsControllerGeneratePreviewResponse$inboundSchema;
  /** @deprecated use `LayoutsControllerGeneratePreviewResponse$outboundSchema` instead. */
  export const outboundSchema =
    LayoutsControllerGeneratePreviewResponse$outboundSchema;
  /** @deprecated use `LayoutsControllerGeneratePreviewResponse$Outbound` instead. */
  export type Outbound = LayoutsControllerGeneratePreviewResponse$Outbound;
}

export function layoutsControllerGeneratePreviewResponseToJSON(
  layoutsControllerGeneratePreviewResponse:
    LayoutsControllerGeneratePreviewResponse,
): string {
  return JSON.stringify(
    LayoutsControllerGeneratePreviewResponse$outboundSchema.parse(
      layoutsControllerGeneratePreviewResponse,
    ),
  );
}

export function layoutsControllerGeneratePreviewResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  LayoutsControllerGeneratePreviewResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      LayoutsControllerGeneratePreviewResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'LayoutsControllerGeneratePreviewResponse' from JSON`,
  );
}
