/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestingControllerIdempotencyGetRequest = {
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type TestingControllerIdempotencyGetResponse = {
  headers: { [k: string]: Array<string> };
  result: components.IdempotencyResponse;
};

/** @internal */
export const TestingControllerIdempotencyGetRequest$inboundSchema: z.ZodType<
  TestingControllerIdempotencyGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Idempotency-Key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Idempotency-Key": "idempotencyKey",
  });
});

/** @internal */
export type TestingControllerIdempotencyGetRequest$Outbound = {
  "Idempotency-Key"?: string | undefined;
};

/** @internal */
export const TestingControllerIdempotencyGetRequest$outboundSchema: z.ZodType<
  TestingControllerIdempotencyGetRequest$Outbound,
  z.ZodTypeDef,
  TestingControllerIdempotencyGetRequest
> = z.object({
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "Idempotency-Key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestingControllerIdempotencyGetRequest$ {
  /** @deprecated use `TestingControllerIdempotencyGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    TestingControllerIdempotencyGetRequest$inboundSchema;
  /** @deprecated use `TestingControllerIdempotencyGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    TestingControllerIdempotencyGetRequest$outboundSchema;
  /** @deprecated use `TestingControllerIdempotencyGetRequest$Outbound` instead. */
  export type Outbound = TestingControllerIdempotencyGetRequest$Outbound;
}

export function testingControllerIdempotencyGetRequestToJSON(
  testingControllerIdempotencyGetRequest:
    TestingControllerIdempotencyGetRequest,
): string {
  return JSON.stringify(
    TestingControllerIdempotencyGetRequest$outboundSchema.parse(
      testingControllerIdempotencyGetRequest,
    ),
  );
}

export function testingControllerIdempotencyGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestingControllerIdempotencyGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TestingControllerIdempotencyGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestingControllerIdempotencyGetRequest' from JSON`,
  );
}

/** @internal */
export const TestingControllerIdempotencyGetResponse$inboundSchema: z.ZodType<
  TestingControllerIdempotencyGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.IdempotencyResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type TestingControllerIdempotencyGetResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.IdempotencyResponse$Outbound;
};

/** @internal */
export const TestingControllerIdempotencyGetResponse$outboundSchema: z.ZodType<
  TestingControllerIdempotencyGetResponse$Outbound,
  z.ZodTypeDef,
  TestingControllerIdempotencyGetResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.IdempotencyResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestingControllerIdempotencyGetResponse$ {
  /** @deprecated use `TestingControllerIdempotencyGetResponse$inboundSchema` instead. */
  export const inboundSchema =
    TestingControllerIdempotencyGetResponse$inboundSchema;
  /** @deprecated use `TestingControllerIdempotencyGetResponse$outboundSchema` instead. */
  export const outboundSchema =
    TestingControllerIdempotencyGetResponse$outboundSchema;
  /** @deprecated use `TestingControllerIdempotencyGetResponse$Outbound` instead. */
  export type Outbound = TestingControllerIdempotencyGetResponse$Outbound;
}

export function testingControllerIdempotencyGetResponseToJSON(
  testingControllerIdempotencyGetResponse:
    TestingControllerIdempotencyGetResponse,
): string {
  return JSON.stringify(
    TestingControllerIdempotencyGetResponse$outboundSchema.parse(
      testingControllerIdempotencyGetResponse,
    ),
  );
}

export function testingControllerIdempotencyGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  TestingControllerIdempotencyGetResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TestingControllerIdempotencyGetResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TestingControllerIdempotencyGetResponse' from JSON`,
  );
}
