/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerUpdateSubscriberRequest = {
  subscriberId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  updateSubscriberRequestDto: components.UpdateSubscriberRequestDto;
};

export type SubscribersControllerUpdateSubscriberResponse = {
  headers: { [k: string]: Array<string> };
  result: components.SubscriberResponseDto;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    subscriberId: z.string(),
    "idempotency-key": z.string().optional(),
    UpdateSubscriberRequestDto:
      components.UpdateSubscriberRequestDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
      "UpdateSubscriberRequestDto": "updateSubscriberRequestDto",
    });
  });

/** @internal */
export type SubscribersControllerUpdateSubscriberRequest$Outbound = {
  subscriberId: string;
  "idempotency-key"?: string | undefined;
  UpdateSubscriberRequestDto: components.UpdateSubscriberRequestDto$Outbound;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberRequest
  > = z.object({
    subscriberId: z.string(),
    idempotencyKey: z.string().optional(),
    updateSubscriberRequestDto:
      components.UpdateSubscriberRequestDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
      updateSubscriberRequestDto: "UpdateSubscriberRequestDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberRequest$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberRequest$Outbound` instead. */
  export type Outbound = SubscribersControllerUpdateSubscriberRequest$Outbound;
}

export function subscribersControllerUpdateSubscriberRequestToJSON(
  subscribersControllerUpdateSubscriberRequest:
    SubscribersControllerUpdateSubscriberRequest,
): string {
  return JSON.stringify(
    SubscribersControllerUpdateSubscriberRequest$outboundSchema.parse(
      subscribersControllerUpdateSubscriberRequest,
    ),
  );
}

export function subscribersControllerUpdateSubscriberRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerUpdateSubscriberRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerUpdateSubscriberRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerUpdateSubscriberRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerUpdateSubscriberResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.SubscriberResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerUpdateSubscriberResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.SubscriberResponseDto$Outbound;
};

/** @internal */
export const SubscribersControllerUpdateSubscriberResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerUpdateSubscriberResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerUpdateSubscriberResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.SubscriberResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerUpdateSubscriberResponse$ {
  /** @deprecated use `SubscribersControllerUpdateSubscriberResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerUpdateSubscriberResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerUpdateSubscriberResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerUpdateSubscriberResponse$Outbound` instead. */
  export type Outbound = SubscribersControllerUpdateSubscriberResponse$Outbound;
}

export function subscribersControllerUpdateSubscriberResponseToJSON(
  subscribersControllerUpdateSubscriberResponse:
    SubscribersControllerUpdateSubscriberResponse,
): string {
  return JSON.stringify(
    SubscribersControllerUpdateSubscriberResponse$outboundSchema.parse(
      subscribersControllerUpdateSubscriberResponse,
    ),
  );
}

export function subscribersControllerUpdateSubscriberResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerUpdateSubscriberResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerUpdateSubscriberResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerUpdateSubscriberResponse' from JSON`,
  );
}
