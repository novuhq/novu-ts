/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnvironmentsControllerV1ListOrganizationApiKeysResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.ApiKey>;
};

/** @internal */
export const EnvironmentsControllerV1ListOrganizationApiKeysResponse$inboundSchema:
  z.ZodType<
    EnvironmentsControllerV1ListOrganizationApiKeysResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.array(components.ApiKey$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type EnvironmentsControllerV1ListOrganizationApiKeysResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.ApiKey$Outbound>;
};

/** @internal */
export const EnvironmentsControllerV1ListOrganizationApiKeysResponse$outboundSchema:
  z.ZodType<
    EnvironmentsControllerV1ListOrganizationApiKeysResponse$Outbound,
    z.ZodTypeDef,
    EnvironmentsControllerV1ListOrganizationApiKeysResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.array(components.ApiKey$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentsControllerV1ListOrganizationApiKeysResponse$ {
  /** @deprecated use `EnvironmentsControllerV1ListOrganizationApiKeysResponse$inboundSchema` instead. */
  export const inboundSchema =
    EnvironmentsControllerV1ListOrganizationApiKeysResponse$inboundSchema;
  /** @deprecated use `EnvironmentsControllerV1ListOrganizationApiKeysResponse$outboundSchema` instead. */
  export const outboundSchema =
    EnvironmentsControllerV1ListOrganizationApiKeysResponse$outboundSchema;
  /** @deprecated use `EnvironmentsControllerV1ListOrganizationApiKeysResponse$Outbound` instead. */
  export type Outbound =
    EnvironmentsControllerV1ListOrganizationApiKeysResponse$Outbound;
}

export function environmentsControllerV1ListOrganizationApiKeysResponseToJSON(
  environmentsControllerV1ListOrganizationApiKeysResponse:
    EnvironmentsControllerV1ListOrganizationApiKeysResponse,
): string {
  return JSON.stringify(
    EnvironmentsControllerV1ListOrganizationApiKeysResponse$outboundSchema
      .parse(environmentsControllerV1ListOrganizationApiKeysResponse),
  );
}

export function environmentsControllerV1ListOrganizationApiKeysResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvironmentsControllerV1ListOrganizationApiKeysResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvironmentsControllerV1ListOrganizationApiKeysResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentsControllerV1ListOrganizationApiKeysResponse' from JSON`,
  );
}
