/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TopicsControllerAddSubscribersRequest = {
  /**
   * The topic key
   */
  topicKey: string;
  addSubscribersRequestDto: components.AddSubscribersRequestDto;
};

export type TopicsControllerAddSubscribersResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const TopicsControllerAddSubscribersRequest$inboundSchema: z.ZodType<
  TopicsControllerAddSubscribersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  topicKey: z.string(),
  AddSubscribersRequestDto: components.AddSubscribersRequestDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "AddSubscribersRequestDto": "addSubscribersRequestDto",
  });
});

/** @internal */
export type TopicsControllerAddSubscribersRequest$Outbound = {
  topicKey: string;
  AddSubscribersRequestDto: components.AddSubscribersRequestDto$Outbound;
};

/** @internal */
export const TopicsControllerAddSubscribersRequest$outboundSchema: z.ZodType<
  TopicsControllerAddSubscribersRequest$Outbound,
  z.ZodTypeDef,
  TopicsControllerAddSubscribersRequest
> = z.object({
  topicKey: z.string(),
  addSubscribersRequestDto: components.AddSubscribersRequestDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    addSubscribersRequestDto: "AddSubscribersRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerAddSubscribersRequest$ {
  /** @deprecated use `TopicsControllerAddSubscribersRequest$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerAddSubscribersRequest$inboundSchema;
  /** @deprecated use `TopicsControllerAddSubscribersRequest$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerAddSubscribersRequest$outboundSchema;
  /** @deprecated use `TopicsControllerAddSubscribersRequest$Outbound` instead. */
  export type Outbound = TopicsControllerAddSubscribersRequest$Outbound;
}

export function topicsControllerAddSubscribersRequestToJSON(
  topicsControllerAddSubscribersRequest: TopicsControllerAddSubscribersRequest,
): string {
  return JSON.stringify(
    TopicsControllerAddSubscribersRequest$outboundSchema.parse(
      topicsControllerAddSubscribersRequest,
    ),
  );
}

export function topicsControllerAddSubscribersRequestFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerAddSubscribersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerAddSubscribersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerAddSubscribersRequest' from JSON`,
  );
}

/** @internal */
export const TopicsControllerAddSubscribersResponse$inboundSchema: z.ZodType<
  TopicsControllerAddSubscribersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type TopicsControllerAddSubscribersResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const TopicsControllerAddSubscribersResponse$outboundSchema: z.ZodType<
  TopicsControllerAddSubscribersResponse$Outbound,
  z.ZodTypeDef,
  TopicsControllerAddSubscribersResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicsControllerAddSubscribersResponse$ {
  /** @deprecated use `TopicsControllerAddSubscribersResponse$inboundSchema` instead. */
  export const inboundSchema =
    TopicsControllerAddSubscribersResponse$inboundSchema;
  /** @deprecated use `TopicsControllerAddSubscribersResponse$outboundSchema` instead. */
  export const outboundSchema =
    TopicsControllerAddSubscribersResponse$outboundSchema;
  /** @deprecated use `TopicsControllerAddSubscribersResponse$Outbound` instead. */
  export type Outbound = TopicsControllerAddSubscribersResponse$Outbound;
}

export function topicsControllerAddSubscribersResponseToJSON(
  topicsControllerAddSubscribersResponse:
    TopicsControllerAddSubscribersResponse,
): string {
  return JSON.stringify(
    TopicsControllerAddSubscribersResponse$outboundSchema.parse(
      topicsControllerAddSubscribersResponse,
    ),
  );
}

export function topicsControllerAddSubscribersResponseFromJSON(
  jsonString: string,
): SafeParseResult<TopicsControllerAddSubscribersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TopicsControllerAddSubscribersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicsControllerAddSubscribersResponse' from JSON`,
  );
}
