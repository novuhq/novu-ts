/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LayoutsControllerUpdateRequest = {
  layoutId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
  /**
   * Layout update details
   */
  updateLayoutDto: components.UpdateLayoutDto;
};

export type LayoutsControllerUpdateResponse = {
  headers: { [k: string]: Array<string> };
  result: components.LayoutResponseDto;
};

/** @internal */
export const LayoutsControllerUpdateRequest$inboundSchema: z.ZodType<
  LayoutsControllerUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  layoutId: z.string(),
  "idempotency-key": z.string().optional(),
  UpdateLayoutDto: components.UpdateLayoutDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
    "UpdateLayoutDto": "updateLayoutDto",
  });
});

/** @internal */
export type LayoutsControllerUpdateRequest$Outbound = {
  layoutId: string;
  "idempotency-key"?: string | undefined;
  UpdateLayoutDto: components.UpdateLayoutDto$Outbound;
};

/** @internal */
export const LayoutsControllerUpdateRequest$outboundSchema: z.ZodType<
  LayoutsControllerUpdateRequest$Outbound,
  z.ZodTypeDef,
  LayoutsControllerUpdateRequest
> = z.object({
  layoutId: z.string(),
  idempotencyKey: z.string().optional(),
  updateLayoutDto: components.UpdateLayoutDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
    updateLayoutDto: "UpdateLayoutDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerUpdateRequest$ {
  /** @deprecated use `LayoutsControllerUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerUpdateRequest$inboundSchema;
  /** @deprecated use `LayoutsControllerUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = LayoutsControllerUpdateRequest$outboundSchema;
  /** @deprecated use `LayoutsControllerUpdateRequest$Outbound` instead. */
  export type Outbound = LayoutsControllerUpdateRequest$Outbound;
}

export function layoutsControllerUpdateRequestToJSON(
  layoutsControllerUpdateRequest: LayoutsControllerUpdateRequest,
): string {
  return JSON.stringify(
    LayoutsControllerUpdateRequest$outboundSchema.parse(
      layoutsControllerUpdateRequest,
    ),
  );
}

export function layoutsControllerUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerUpdateRequest' from JSON`,
  );
}

/** @internal */
export const LayoutsControllerUpdateResponse$inboundSchema: z.ZodType<
  LayoutsControllerUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: components.LayoutResponseDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type LayoutsControllerUpdateResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.LayoutResponseDto$Outbound;
};

/** @internal */
export const LayoutsControllerUpdateResponse$outboundSchema: z.ZodType<
  LayoutsControllerUpdateResponse$Outbound,
  z.ZodTypeDef,
  LayoutsControllerUpdateResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: components.LayoutResponseDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutsControllerUpdateResponse$ {
  /** @deprecated use `LayoutsControllerUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = LayoutsControllerUpdateResponse$inboundSchema;
  /** @deprecated use `LayoutsControllerUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = LayoutsControllerUpdateResponse$outboundSchema;
  /** @deprecated use `LayoutsControllerUpdateResponse$Outbound` instead. */
  export type Outbound = LayoutsControllerUpdateResponse$Outbound;
}

export function layoutsControllerUpdateResponseToJSON(
  layoutsControllerUpdateResponse: LayoutsControllerUpdateResponse,
): string {
  return JSON.stringify(
    LayoutsControllerUpdateResponse$outboundSchema.parse(
      layoutsControllerUpdateResponse,
    ),
  );
}

export function layoutsControllerUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<LayoutsControllerUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutsControllerUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutsControllerUpdateResponse' from JSON`,
  );
}
