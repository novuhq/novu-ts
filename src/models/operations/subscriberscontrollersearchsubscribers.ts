/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const OrderDirection = {
  Asc: "ASC",
  Desc: "DESC",
} as const;
export type OrderDirection = ClosedEnum<typeof OrderDirection>;

export type SubscribersControllerSearchSubscribersRequest = {
  /**
   * Cursor for pagination indicating the starting point after which to fetch results.
   */
  after?: string | undefined;
  /**
   * Cursor for pagination indicating the ending point before which to fetch results.
   */
  before?: string | undefined;
  /**
   * Email address of the subscriber to filter results.
   */
  email?: string | undefined;
  /**
   * Name of the subscriber to filter results.
   */
  name?: string | undefined;
  /**
   * Phone number of the subscriber to filter results.
   */
  phone?: string | undefined;
  /**
   * Unique identifier of the subscriber to filter results.
   */
  subscriberId?: string | undefined;
  limit?: number | undefined;
  orderDirection?: OrderDirection | undefined;
  orderBy?: any | undefined;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type SubscribersControllerSearchSubscribersResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ListSubscribersResponseDto;
};

/** @internal */
export const OrderDirection$inboundSchema: z.ZodNativeEnum<
  typeof OrderDirection
> = z.nativeEnum(OrderDirection);

/** @internal */
export const OrderDirection$outboundSchema: z.ZodNativeEnum<
  typeof OrderDirection
> = OrderDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderDirection$ {
  /** @deprecated use `OrderDirection$inboundSchema` instead. */
  export const inboundSchema = OrderDirection$inboundSchema;
  /** @deprecated use `OrderDirection$outboundSchema` instead. */
  export const outboundSchema = OrderDirection$outboundSchema;
}

/** @internal */
export const SubscribersControllerSearchSubscribersRequest$inboundSchema:
  z.ZodType<
    SubscribersControllerSearchSubscribersRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    after: z.string().optional(),
    before: z.string().optional(),
    email: z.string().optional(),
    name: z.string().optional(),
    phone: z.string().optional(),
    subscriberId: z.string().optional(),
    limit: z.number().optional(),
    orderDirection: OrderDirection$inboundSchema.optional(),
    orderBy: z.any().optional(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type SubscribersControllerSearchSubscribersRequest$Outbound = {
  after?: string | undefined;
  before?: string | undefined;
  email?: string | undefined;
  name?: string | undefined;
  phone?: string | undefined;
  subscriberId?: string | undefined;
  limit?: number | undefined;
  orderDirection?: string | undefined;
  orderBy?: any | undefined;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const SubscribersControllerSearchSubscribersRequest$outboundSchema:
  z.ZodType<
    SubscribersControllerSearchSubscribersRequest$Outbound,
    z.ZodTypeDef,
    SubscribersControllerSearchSubscribersRequest
  > = z.object({
    after: z.string().optional(),
    before: z.string().optional(),
    email: z.string().optional(),
    name: z.string().optional(),
    phone: z.string().optional(),
    subscriberId: z.string().optional(),
    limit: z.number().optional(),
    orderDirection: OrderDirection$outboundSchema.optional(),
    orderBy: z.any().optional(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerSearchSubscribersRequest$ {
  /** @deprecated use `SubscribersControllerSearchSubscribersRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerSearchSubscribersRequest$inboundSchema;
  /** @deprecated use `SubscribersControllerSearchSubscribersRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerSearchSubscribersRequest$outboundSchema;
  /** @deprecated use `SubscribersControllerSearchSubscribersRequest$Outbound` instead. */
  export type Outbound = SubscribersControllerSearchSubscribersRequest$Outbound;
}

export function subscribersControllerSearchSubscribersRequestToJSON(
  subscribersControllerSearchSubscribersRequest:
    SubscribersControllerSearchSubscribersRequest,
): string {
  return JSON.stringify(
    SubscribersControllerSearchSubscribersRequest$outboundSchema.parse(
      subscribersControllerSearchSubscribersRequest,
    ),
  );
}

export function subscribersControllerSearchSubscribersRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerSearchSubscribersRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerSearchSubscribersRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerSearchSubscribersRequest' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerSearchSubscribersResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerSearchSubscribersResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: components.ListSubscribersResponseDto$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerSearchSubscribersResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ListSubscribersResponseDto$Outbound;
};

/** @internal */
export const SubscribersControllerSearchSubscribersResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerSearchSubscribersResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerSearchSubscribersResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: components.ListSubscribersResponseDto$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerSearchSubscribersResponse$ {
  /** @deprecated use `SubscribersControllerSearchSubscribersResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerSearchSubscribersResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerSearchSubscribersResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerSearchSubscribersResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerSearchSubscribersResponse$Outbound` instead. */
  export type Outbound =
    SubscribersControllerSearchSubscribersResponse$Outbound;
}

export function subscribersControllerSearchSubscribersResponseToJSON(
  subscribersControllerSearchSubscribersResponse:
    SubscribersControllerSearchSubscribersResponse,
): string {
  return JSON.stringify(
    SubscribersControllerSearchSubscribersResponse$outboundSchema.parse(
      subscribersControllerSearchSubscribersResponse,
    ),
  );
}

export function subscribersControllerSearchSubscribersResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerSearchSubscribersResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerSearchSubscribersResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerSearchSubscribersResponse' from JSON`,
  );
}
