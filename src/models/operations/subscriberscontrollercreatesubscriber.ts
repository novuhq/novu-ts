/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscribersControllerCreateSubscriberResponseResult =
  | components.ValidationErrorDto
  | components.SubscriberResponseDto;

export type SubscribersControllerCreateSubscriberResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ValidationErrorDto | components.SubscriberResponseDto;
};

/** @internal */
export const SubscribersControllerCreateSubscriberResponseResult$inboundSchema:
  z.ZodType<
    SubscribersControllerCreateSubscriberResponseResult,
    z.ZodTypeDef,
    unknown
  > = z.union([
    components.ValidationErrorDto$inboundSchema,
    components.SubscriberResponseDto$inboundSchema,
  ]);

/** @internal */
export type SubscribersControllerCreateSubscriberResponseResult$Outbound =
  | components.ValidationErrorDto$Outbound
  | components.SubscriberResponseDto$Outbound;

/** @internal */
export const SubscribersControllerCreateSubscriberResponseResult$outboundSchema:
  z.ZodType<
    SubscribersControllerCreateSubscriberResponseResult$Outbound,
    z.ZodTypeDef,
    SubscribersControllerCreateSubscriberResponseResult
  > = z.union([
    components.ValidationErrorDto$outboundSchema,
    components.SubscriberResponseDto$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerCreateSubscriberResponseResult$ {
  /** @deprecated use `SubscribersControllerCreateSubscriberResponseResult$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerCreateSubscriberResponseResult$inboundSchema;
  /** @deprecated use `SubscribersControllerCreateSubscriberResponseResult$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerCreateSubscriberResponseResult$outboundSchema;
  /** @deprecated use `SubscribersControllerCreateSubscriberResponseResult$Outbound` instead. */
  export type Outbound =
    SubscribersControllerCreateSubscriberResponseResult$Outbound;
}

export function subscribersControllerCreateSubscriberResponseResultToJSON(
  subscribersControllerCreateSubscriberResponseResult:
    SubscribersControllerCreateSubscriberResponseResult,
): string {
  return JSON.stringify(
    SubscribersControllerCreateSubscriberResponseResult$outboundSchema.parse(
      subscribersControllerCreateSubscriberResponseResult,
    ),
  );
}

export function subscribersControllerCreateSubscriberResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerCreateSubscriberResponseResult,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerCreateSubscriberResponseResult$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerCreateSubscriberResponseResult' from JSON`,
  );
}

/** @internal */
export const SubscribersControllerCreateSubscriberResponse$inboundSchema:
  z.ZodType<
    SubscribersControllerCreateSubscriberResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.union([
      components.ValidationErrorDto$inboundSchema,
      components.SubscriberResponseDto$inboundSchema,
    ]),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type SubscribersControllerCreateSubscriberResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result:
    | components.ValidationErrorDto$Outbound
    | components.SubscriberResponseDto$Outbound;
};

/** @internal */
export const SubscribersControllerCreateSubscriberResponse$outboundSchema:
  z.ZodType<
    SubscribersControllerCreateSubscriberResponse$Outbound,
    z.ZodTypeDef,
    SubscribersControllerCreateSubscriberResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.union([
      components.ValidationErrorDto$outboundSchema,
      components.SubscriberResponseDto$outboundSchema,
    ]),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscribersControllerCreateSubscriberResponse$ {
  /** @deprecated use `SubscribersControllerCreateSubscriberResponse$inboundSchema` instead. */
  export const inboundSchema =
    SubscribersControllerCreateSubscriberResponse$inboundSchema;
  /** @deprecated use `SubscribersControllerCreateSubscriberResponse$outboundSchema` instead. */
  export const outboundSchema =
    SubscribersControllerCreateSubscriberResponse$outboundSchema;
  /** @deprecated use `SubscribersControllerCreateSubscriberResponse$Outbound` instead. */
  export type Outbound = SubscribersControllerCreateSubscriberResponse$Outbound;
}

export function subscribersControllerCreateSubscriberResponseToJSON(
  subscribersControllerCreateSubscriberResponse:
    SubscribersControllerCreateSubscriberResponse,
): string {
  return JSON.stringify(
    SubscribersControllerCreateSubscriberResponse$outboundSchema.parse(
      subscribersControllerCreateSubscriberResponse,
    ),
  );
}

export function subscribersControllerCreateSubscriberResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscribersControllerCreateSubscriberResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscribersControllerCreateSubscriberResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscribersControllerCreateSubscriberResponse' from JSON`,
  );
}
