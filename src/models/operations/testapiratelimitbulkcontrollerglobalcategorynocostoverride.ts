/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest =
  {
    /**
     * A header for idempotency purposes
     */
    idempotencyKey?: string | undefined;
  };

/** @internal */
export const TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$inboundSchema:
  z.ZodType<
    TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "Idempotency-Key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "Idempotency-Key": "idempotencyKey",
    });
  });

/** @internal */
export type TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$Outbound =
  {
    "Idempotency-Key"?: string | undefined;
  };

/** @internal */
export const TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$outboundSchema:
  z.ZodType<
    TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$Outbound,
    z.ZodTypeDef,
    TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest
  > = z.object({
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "Idempotency-Key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$ {
  /** @deprecated use `TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$inboundSchema` instead. */
  export const inboundSchema =
    TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$inboundSchema;
  /** @deprecated use `TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$outboundSchema` instead. */
  export const outboundSchema =
    TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$outboundSchema;
  /** @deprecated use `TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$Outbound` instead. */
  export type Outbound =
    TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$Outbound;
}

export function testApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequestToJSON(
  testApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest:
    TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest,
): string {
  return JSON.stringify(
    TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$outboundSchema
      .parse(testApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest),
  );
}

export function testApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TestApiRateLimitBulkControllerGlobalCategoryNoCostOverrideRequest' from JSON`,
  );
}
