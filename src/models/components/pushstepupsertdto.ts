/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * Control values for the Push step
 */
export type PushStepUpsertDtoControlValues = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * Subject/title of the push notification.
   */
  subject?: string | undefined;
  /**
   * Body content of the push notification.
   */
  body?: string | undefined;
};

export type PushStepUpsertDto = {
  /**
   * Unique identifier of the step
   */
  id?: string | undefined;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Control values for the Push step
   */
  controlValues?: PushStepUpsertDtoControlValues | null | undefined;
};

/** @internal */
export const PushStepUpsertDtoControlValues$inboundSchema: z.ZodType<
  PushStepUpsertDtoControlValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.record(z.any()).optional(),
  subject: z.string().optional(),
  body: z.string().optional(),
});

/** @internal */
export type PushStepUpsertDtoControlValues$Outbound = {
  skip?: { [k: string]: any } | undefined;
  subject?: string | undefined;
  body?: string | undefined;
};

/** @internal */
export const PushStepUpsertDtoControlValues$outboundSchema: z.ZodType<
  PushStepUpsertDtoControlValues$Outbound,
  z.ZodTypeDef,
  PushStepUpsertDtoControlValues
> = z.object({
  skip: z.record(z.any()).optional(),
  subject: z.string().optional(),
  body: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushStepUpsertDtoControlValues$ {
  /** @deprecated use `PushStepUpsertDtoControlValues$inboundSchema` instead. */
  export const inboundSchema = PushStepUpsertDtoControlValues$inboundSchema;
  /** @deprecated use `PushStepUpsertDtoControlValues$outboundSchema` instead. */
  export const outboundSchema = PushStepUpsertDtoControlValues$outboundSchema;
  /** @deprecated use `PushStepUpsertDtoControlValues$Outbound` instead. */
  export type Outbound = PushStepUpsertDtoControlValues$Outbound;
}

export function pushStepUpsertDtoControlValuesToJSON(
  pushStepUpsertDtoControlValues: PushStepUpsertDtoControlValues,
): string {
  return JSON.stringify(
    PushStepUpsertDtoControlValues$outboundSchema.parse(
      pushStepUpsertDtoControlValues,
    ),
  );
}

export function pushStepUpsertDtoControlValuesFromJSON(
  jsonString: string,
): SafeParseResult<PushStepUpsertDtoControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushStepUpsertDtoControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushStepUpsertDtoControlValues' from JSON`,
  );
}

/** @internal */
export const PushStepUpsertDto$inboundSchema: z.ZodType<
  PushStepUpsertDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$inboundSchema,
  controlValues: z.nullable(
    z.lazy(() => PushStepUpsertDtoControlValues$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type PushStepUpsertDto$Outbound = {
  _id?: string | undefined;
  name: string;
  type: string;
  controlValues?: PushStepUpsertDtoControlValues$Outbound | null | undefined;
};

/** @internal */
export const PushStepUpsertDto$outboundSchema: z.ZodType<
  PushStepUpsertDto$Outbound,
  z.ZodTypeDef,
  PushStepUpsertDto
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$outboundSchema,
  controlValues: z.nullable(
    z.lazy(() => PushStepUpsertDtoControlValues$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushStepUpsertDto$ {
  /** @deprecated use `PushStepUpsertDto$inboundSchema` instead. */
  export const inboundSchema = PushStepUpsertDto$inboundSchema;
  /** @deprecated use `PushStepUpsertDto$outboundSchema` instead. */
  export const outboundSchema = PushStepUpsertDto$outboundSchema;
  /** @deprecated use `PushStepUpsertDto$Outbound` instead. */
  export type Outbound = PushStepUpsertDto$Outbound;
}

export function pushStepUpsertDtoToJSON(
  pushStepUpsertDto: PushStepUpsertDto,
): string {
  return JSON.stringify(
    PushStepUpsertDto$outboundSchema.parse(pushStepUpsertDto),
  );
}

export function pushStepUpsertDtoFromJSON(
  jsonString: string,
): SafeParseResult<PushStepUpsertDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushStepUpsertDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushStepUpsertDto' from JSON`,
  );
}
