/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChannelPreferenceDto,
  ChannelPreferenceDto$inboundSchema,
  ChannelPreferenceDto$Outbound,
  ChannelPreferenceDto$outboundSchema,
} from "./channelpreferencedto.js";
import {
  WorkflowPreferenceDto,
  WorkflowPreferenceDto$inboundSchema,
  WorkflowPreferenceDto$Outbound,
  WorkflowPreferenceDto$outboundSchema,
} from "./workflowpreferencedto.js";

/**
 * A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
 */
export type All = WorkflowPreferenceDto;

export type WorkflowPreferencesDto = {
  /**
   * A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
   */
  all: WorkflowPreferenceDto;
  /**
   * Preferences for different communication channels
   */
  channels: { [k: string]: ChannelPreferenceDto };
};

/** @internal */
export const All$inboundSchema: z.ZodType<All, z.ZodTypeDef, unknown> =
  WorkflowPreferenceDto$inboundSchema;

/** @internal */
export type All$Outbound = WorkflowPreferenceDto$Outbound;

/** @internal */
export const All$outboundSchema: z.ZodType<All$Outbound, z.ZodTypeDef, All> =
  WorkflowPreferenceDto$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace All$ {
  /** @deprecated use `All$inboundSchema` instead. */
  export const inboundSchema = All$inboundSchema;
  /** @deprecated use `All$outboundSchema` instead. */
  export const outboundSchema = All$outboundSchema;
  /** @deprecated use `All$Outbound` instead. */
  export type Outbound = All$Outbound;
}

export function allToJSON(all: All): string {
  return JSON.stringify(All$outboundSchema.parse(all));
}

export function allFromJSON(
  jsonString: string,
): SafeParseResult<All, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => All$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'All' from JSON`,
  );
}

/** @internal */
export const WorkflowPreferencesDto$inboundSchema: z.ZodType<
  WorkflowPreferencesDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  all: WorkflowPreferenceDto$inboundSchema,
  channels: z.record(ChannelPreferenceDto$inboundSchema),
});

/** @internal */
export type WorkflowPreferencesDto$Outbound = {
  all: WorkflowPreferenceDto$Outbound;
  channels: { [k: string]: ChannelPreferenceDto$Outbound };
};

/** @internal */
export const WorkflowPreferencesDto$outboundSchema: z.ZodType<
  WorkflowPreferencesDto$Outbound,
  z.ZodTypeDef,
  WorkflowPreferencesDto
> = z.object({
  all: WorkflowPreferenceDto$outboundSchema,
  channels: z.record(ChannelPreferenceDto$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowPreferencesDto$ {
  /** @deprecated use `WorkflowPreferencesDto$inboundSchema` instead. */
  export const inboundSchema = WorkflowPreferencesDto$inboundSchema;
  /** @deprecated use `WorkflowPreferencesDto$outboundSchema` instead. */
  export const outboundSchema = WorkflowPreferencesDto$outboundSchema;
  /** @deprecated use `WorkflowPreferencesDto$Outbound` instead. */
  export type Outbound = WorkflowPreferencesDto$Outbound;
}

export function workflowPreferencesDtoToJSON(
  workflowPreferencesDto: WorkflowPreferencesDto,
): string {
  return JSON.stringify(
    WorkflowPreferencesDto$outboundSchema.parse(workflowPreferencesDto),
  );
}

export function workflowPreferencesDtoFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowPreferencesDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowPreferencesDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowPreferencesDto' from JSON`,
  );
}
