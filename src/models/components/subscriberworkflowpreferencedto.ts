/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SubscriberPreferenceChannels,
  SubscriberPreferenceChannels$inboundSchema,
  SubscriberPreferenceChannels$Outbound,
  SubscriberPreferenceChannels$outboundSchema,
} from "./subscriberpreferencechannels.js";
import {
  SubscriberPreferenceOverrideDto,
  SubscriberPreferenceOverrideDto$inboundSchema,
  SubscriberPreferenceOverrideDto$Outbound,
  SubscriberPreferenceOverrideDto$outboundSchema,
} from "./subscriberpreferenceoverridedto.js";
import {
  SubscriberPreferencesWorkflowInfoDto,
  SubscriberPreferencesWorkflowInfoDto$inboundSchema,
  SubscriberPreferencesWorkflowInfoDto$Outbound,
  SubscriberPreferencesWorkflowInfoDto$outboundSchema,
} from "./subscriberpreferencesworkflowinfodto.js";

export type SubscriberWorkflowPreferenceDto = {
  /**
   * Whether notifications are enabled for this workflow
   */
  enabled: boolean;
  /**
   * Channel-specific preference settings for this workflow
   */
  channels: SubscriberPreferenceChannels;
  /**
   * List of preference overrides
   */
  overrides: Array<SubscriberPreferenceOverrideDto>;
  /**
   * Workflow information
   */
  workflow: SubscriberPreferencesWorkflowInfoDto;
};

/** @internal */
export const SubscriberWorkflowPreferenceDto$inboundSchema: z.ZodType<
  SubscriberWorkflowPreferenceDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean(),
  channels: SubscriberPreferenceChannels$inboundSchema,
  overrides: z.array(SubscriberPreferenceOverrideDto$inboundSchema),
  workflow: SubscriberPreferencesWorkflowInfoDto$inboundSchema,
});

/** @internal */
export type SubscriberWorkflowPreferenceDto$Outbound = {
  enabled: boolean;
  channels: SubscriberPreferenceChannels$Outbound;
  overrides: Array<SubscriberPreferenceOverrideDto$Outbound>;
  workflow: SubscriberPreferencesWorkflowInfoDto$Outbound;
};

/** @internal */
export const SubscriberWorkflowPreferenceDto$outboundSchema: z.ZodType<
  SubscriberWorkflowPreferenceDto$Outbound,
  z.ZodTypeDef,
  SubscriberWorkflowPreferenceDto
> = z.object({
  enabled: z.boolean(),
  channels: SubscriberPreferenceChannels$outboundSchema,
  overrides: z.array(SubscriberPreferenceOverrideDto$outboundSchema),
  workflow: SubscriberPreferencesWorkflowInfoDto$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberWorkflowPreferenceDto$ {
  /** @deprecated use `SubscriberWorkflowPreferenceDto$inboundSchema` instead. */
  export const inboundSchema = SubscriberWorkflowPreferenceDto$inboundSchema;
  /** @deprecated use `SubscriberWorkflowPreferenceDto$outboundSchema` instead. */
  export const outboundSchema = SubscriberWorkflowPreferenceDto$outboundSchema;
  /** @deprecated use `SubscriberWorkflowPreferenceDto$Outbound` instead. */
  export type Outbound = SubscriberWorkflowPreferenceDto$Outbound;
}

export function subscriberWorkflowPreferenceDtoToJSON(
  subscriberWorkflowPreferenceDto: SubscriberWorkflowPreferenceDto,
): string {
  return JSON.stringify(
    SubscriberWorkflowPreferenceDto$outboundSchema.parse(
      subscriberWorkflowPreferenceDto,
    ),
  );
}

export function subscriberWorkflowPreferenceDtoFromJSON(
  jsonString: string,
): SafeParseResult<SubscriberWorkflowPreferenceDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriberWorkflowPreferenceDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriberWorkflowPreferenceDto' from JSON`,
  );
}
