/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FailedAssignmentsDto,
  FailedAssignmentsDto$inboundSchema,
  FailedAssignmentsDto$Outbound,
  FailedAssignmentsDto$outboundSchema,
} from "./failedassignmentsdto.js";

export type AssignSubscriberToTopicDto = {
  /**
   * List of successfully assigned subscriber IDs
   */
  succeeded: Array<string>;
  /**
   * Details about failed assignments
   */
  failed?: FailedAssignmentsDto | undefined;
};

/** @internal */
export const AssignSubscriberToTopicDto$inboundSchema: z.ZodType<
  AssignSubscriberToTopicDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  succeeded: z.array(z.string()),
  failed: FailedAssignmentsDto$inboundSchema.optional(),
});

/** @internal */
export type AssignSubscriberToTopicDto$Outbound = {
  succeeded: Array<string>;
  failed?: FailedAssignmentsDto$Outbound | undefined;
};

/** @internal */
export const AssignSubscriberToTopicDto$outboundSchema: z.ZodType<
  AssignSubscriberToTopicDto$Outbound,
  z.ZodTypeDef,
  AssignSubscriberToTopicDto
> = z.object({
  succeeded: z.array(z.string()),
  failed: FailedAssignmentsDto$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignSubscriberToTopicDto$ {
  /** @deprecated use `AssignSubscriberToTopicDto$inboundSchema` instead. */
  export const inboundSchema = AssignSubscriberToTopicDto$inboundSchema;
  /** @deprecated use `AssignSubscriberToTopicDto$outboundSchema` instead. */
  export const outboundSchema = AssignSubscriberToTopicDto$outboundSchema;
  /** @deprecated use `AssignSubscriberToTopicDto$Outbound` instead. */
  export type Outbound = AssignSubscriberToTopicDto$Outbound;
}

export function assignSubscriberToTopicDtoToJSON(
  assignSubscriberToTopicDto: AssignSubscriberToTopicDto,
): string {
  return JSON.stringify(
    AssignSubscriberToTopicDto$outboundSchema.parse(assignSubscriberToTopicDto),
  );
}

export function assignSubscriberToTopicDtoFromJSON(
  jsonString: string,
): SafeParseResult<AssignSubscriberToTopicDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignSubscriberToTopicDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignSubscriberToTopicDto' from JSON`,
  );
}
