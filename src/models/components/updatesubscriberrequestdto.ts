/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SubscriberChannelDto,
  SubscriberChannelDto$inboundSchema,
  SubscriberChannelDto$Outbound,
  SubscriberChannelDto$outboundSchema,
} from "./subscriberchanneldto.js";

export type UpdateSubscriberRequestDto = {
  /**
   * The email address of the subscriber.
   */
  email?: string | undefined;
  /**
   * The first name of the subscriber.
   */
  firstName?: string | undefined;
  /**
   * The last name of the subscriber.
   */
  lastName?: string | undefined;
  /**
   * The phone number of the subscriber.
   */
  phone?: string | undefined;
  /**
   * The avatar URL of the subscriber.
   */
  avatar?: string | undefined;
  /**
   * The locale of the subscriber, for example "en-US".
   */
  locale?: string | undefined;
  /**
   * Custom data associated with the subscriber. Can contain any additional properties.
   */
  data?: { [k: string]: any } | undefined;
  /**
   * An array of communication channels for the subscriber.
   */
  channels?: Array<SubscriberChannelDto> | undefined;
};

/** @internal */
export const UpdateSubscriberRequestDto$inboundSchema: z.ZodType<
  UpdateSubscriberRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  locale: z.string().optional(),
  data: z.record(z.any()).optional(),
  channels: z.array(SubscriberChannelDto$inboundSchema).optional(),
});

/** @internal */
export type UpdateSubscriberRequestDto$Outbound = {
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  locale?: string | undefined;
  data?: { [k: string]: any } | undefined;
  channels?: Array<SubscriberChannelDto$Outbound> | undefined;
};

/** @internal */
export const UpdateSubscriberRequestDto$outboundSchema: z.ZodType<
  UpdateSubscriberRequestDto$Outbound,
  z.ZodTypeDef,
  UpdateSubscriberRequestDto
> = z.object({
  email: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  locale: z.string().optional(),
  data: z.record(z.any()).optional(),
  channels: z.array(SubscriberChannelDto$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSubscriberRequestDto$ {
  /** @deprecated use `UpdateSubscriberRequestDto$inboundSchema` instead. */
  export const inboundSchema = UpdateSubscriberRequestDto$inboundSchema;
  /** @deprecated use `UpdateSubscriberRequestDto$outboundSchema` instead. */
  export const outboundSchema = UpdateSubscriberRequestDto$outboundSchema;
  /** @deprecated use `UpdateSubscriberRequestDto$Outbound` instead. */
  export type Outbound = UpdateSubscriberRequestDto$Outbound;
}

export function updateSubscriberRequestDtoToJSON(
  updateSubscriberRequestDto: UpdateSubscriberRequestDto,
): string {
  return JSON.stringify(
    UpdateSubscriberRequestDto$outboundSchema.parse(updateSubscriberRequestDto),
  );
}

export function updateSubscriberRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSubscriberRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSubscriberRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSubscriberRequestDto' from JSON`,
  );
}
