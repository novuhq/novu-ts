/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSubscriberRequestDtoData = {};

export type UpdateSubscriberRequestDto = {
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  locale?: string | undefined;
  data?: UpdateSubscriberRequestDtoData | undefined;
  channels?: Array<string> | undefined;
};

/** @internal */
export const UpdateSubscriberRequestDtoData$inboundSchema: z.ZodType<
  UpdateSubscriberRequestDtoData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateSubscriberRequestDtoData$Outbound = {};

/** @internal */
export const UpdateSubscriberRequestDtoData$outboundSchema: z.ZodType<
  UpdateSubscriberRequestDtoData$Outbound,
  z.ZodTypeDef,
  UpdateSubscriberRequestDtoData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSubscriberRequestDtoData$ {
  /** @deprecated use `UpdateSubscriberRequestDtoData$inboundSchema` instead. */
  export const inboundSchema = UpdateSubscriberRequestDtoData$inboundSchema;
  /** @deprecated use `UpdateSubscriberRequestDtoData$outboundSchema` instead. */
  export const outboundSchema = UpdateSubscriberRequestDtoData$outboundSchema;
  /** @deprecated use `UpdateSubscriberRequestDtoData$Outbound` instead. */
  export type Outbound = UpdateSubscriberRequestDtoData$Outbound;
}

export function updateSubscriberRequestDtoDataToJSON(
  updateSubscriberRequestDtoData: UpdateSubscriberRequestDtoData,
): string {
  return JSON.stringify(
    UpdateSubscriberRequestDtoData$outboundSchema.parse(
      updateSubscriberRequestDtoData,
    ),
  );
}

export function updateSubscriberRequestDtoDataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSubscriberRequestDtoData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSubscriberRequestDtoData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSubscriberRequestDtoData' from JSON`,
  );
}

/** @internal */
export const UpdateSubscriberRequestDto$inboundSchema: z.ZodType<
  UpdateSubscriberRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  locale: z.string().optional(),
  data: z.lazy(() => UpdateSubscriberRequestDtoData$inboundSchema).optional(),
  channels: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateSubscriberRequestDto$Outbound = {
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  locale?: string | undefined;
  data?: UpdateSubscriberRequestDtoData$Outbound | undefined;
  channels?: Array<string> | undefined;
};

/** @internal */
export const UpdateSubscriberRequestDto$outboundSchema: z.ZodType<
  UpdateSubscriberRequestDto$Outbound,
  z.ZodTypeDef,
  UpdateSubscriberRequestDto
> = z.object({
  email: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  locale: z.string().optional(),
  data: z.lazy(() => UpdateSubscriberRequestDtoData$outboundSchema).optional(),
  channels: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSubscriberRequestDto$ {
  /** @deprecated use `UpdateSubscriberRequestDto$inboundSchema` instead. */
  export const inboundSchema = UpdateSubscriberRequestDto$inboundSchema;
  /** @deprecated use `UpdateSubscriberRequestDto$outboundSchema` instead. */
  export const outboundSchema = UpdateSubscriberRequestDto$outboundSchema;
  /** @deprecated use `UpdateSubscriberRequestDto$Outbound` instead. */
  export type Outbound = UpdateSubscriberRequestDto$Outbound;
}

export function updateSubscriberRequestDtoToJSON(
  updateSubscriberRequestDto: UpdateSubscriberRequestDto,
): string {
  return JSON.stringify(
    UpdateSubscriberRequestDto$outboundSchema.parse(updateSubscriberRequestDto),
  );
}

export function updateSubscriberRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSubscriberRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSubscriberRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSubscriberRequestDto' from JSON`,
  );
}
