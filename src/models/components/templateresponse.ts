/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type TemplateResponse = {
    /**
     * Unique identifier of the workflow
     */
    id: string;
    /**
     * Critical templates will always be delivered to the end user and should be hidden from the subscriber preferences screen
     */
    critical: boolean;
    /**
     * Name of the workflow
     */
    name: string;
    /**
     * Triggers are the events that will trigger the workflow.
     */
    triggers: Array<string>;
};

/** @internal */
export const TemplateResponse$inboundSchema: z.ZodType<TemplateResponse, z.ZodTypeDef, unknown> = z
    .object({
        _id: z.string(),
        critical: z.boolean(),
        name: z.string(),
        triggers: z.array(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            _id: "id",
        });
    });

/** @internal */
export type TemplateResponse$Outbound = {
    _id: string;
    critical: boolean;
    name: string;
    triggers: Array<string>;
};

/** @internal */
export const TemplateResponse$outboundSchema: z.ZodType<
    TemplateResponse$Outbound,
    z.ZodTypeDef,
    TemplateResponse
> = z
    .object({
        id: z.string(),
        critical: z.boolean(),
        name: z.string(),
        triggers: z.array(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            id: "_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateResponse$ {
    /** @deprecated use `TemplateResponse$inboundSchema` instead. */
    export const inboundSchema = TemplateResponse$inboundSchema;
    /** @deprecated use `TemplateResponse$outboundSchema` instead. */
    export const outboundSchema = TemplateResponse$outboundSchema;
    /** @deprecated use `TemplateResponse$Outbound` instead. */
    export type Outbound = TemplateResponse$Outbound;
}
