/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LayoutControlsDto,
  LayoutControlsDto$inboundSchema,
  LayoutControlsDto$Outbound,
  LayoutControlsDto$outboundSchema,
} from "./layoutcontrolsdto.js";
import {
  ResourceOriginEnum,
  ResourceOriginEnum$inboundSchema,
  ResourceOriginEnum$outboundSchema,
} from "./resourceoriginenum.js";
import {
  ResourceTypeEnum,
  ResourceTypeEnum$inboundSchema,
  ResourceTypeEnum$outboundSchema,
} from "./resourcetypeenum.js";

/**
 * Slug of the layout
 */
export type Slug = {};

/**
 * User last name
 */
export type LastName = {};

/**
 * User who last updated the layout
 */
export type UpdatedBy = {
  /**
   * User ID
   */
  id: string;
  /**
   * User first name
   */
  firstName?: string | null | undefined;
  /**
   * User last name
   */
  lastName?: LastName | null | undefined;
  /**
   * User external ID
   */
  externalId?: string | null | undefined;
};

export type LayoutResponseDto = {
  /**
   * Unique internal identifier of the layout
   */
  id: string;
  /**
   * Unique identifier for the layout
   */
  layoutId: string;
  /**
   * Slug of the layout
   */
  slug: Slug;
  /**
   * Name of the layout
   */
  name: string;
  /**
   * Whether the layout is the default layout
   */
  isDefault: boolean;
  /**
   * Last updated timestamp
   */
  updatedAt: string;
  /**
   * User who last updated the layout
   */
  updatedBy?: UpdatedBy | null | undefined;
  /**
   * Creation timestamp
   */
  createdAt: string;
  /**
   * Origin of the layout
   */
  origin: ResourceOriginEnum;
  /**
   * Type of the layout
   */
  type: ResourceTypeEnum;
  /**
   * The variables JSON Schema for the layout
   */
  variables?: { [k: string]: any } | null | undefined;
  /**
   * Controls metadata for the layout
   */
  controls: LayoutControlsDto;
};

/** @internal */
export const Slug$inboundSchema: z.ZodType<Slug, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Slug$Outbound = {};

/** @internal */
export const Slug$outboundSchema: z.ZodType<Slug$Outbound, z.ZodTypeDef, Slug> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Slug$ {
  /** @deprecated use `Slug$inboundSchema` instead. */
  export const inboundSchema = Slug$inboundSchema;
  /** @deprecated use `Slug$outboundSchema` instead. */
  export const outboundSchema = Slug$outboundSchema;
  /** @deprecated use `Slug$Outbound` instead. */
  export type Outbound = Slug$Outbound;
}

export function slugToJSON(slug: Slug): string {
  return JSON.stringify(Slug$outboundSchema.parse(slug));
}

export function slugFromJSON(
  jsonString: string,
): SafeParseResult<Slug, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Slug$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Slug' from JSON`,
  );
}

/** @internal */
export const LastName$inboundSchema: z.ZodType<
  LastName,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type LastName$Outbound = {};

/** @internal */
export const LastName$outboundSchema: z.ZodType<
  LastName$Outbound,
  z.ZodTypeDef,
  LastName
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LastName$ {
  /** @deprecated use `LastName$inboundSchema` instead. */
  export const inboundSchema = LastName$inboundSchema;
  /** @deprecated use `LastName$outboundSchema` instead. */
  export const outboundSchema = LastName$outboundSchema;
  /** @deprecated use `LastName$Outbound` instead. */
  export type Outbound = LastName$Outbound;
}

export function lastNameToJSON(lastName: LastName): string {
  return JSON.stringify(LastName$outboundSchema.parse(lastName));
}

export function lastNameFromJSON(
  jsonString: string,
): SafeParseResult<LastName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LastName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LastName' from JSON`,
  );
}

/** @internal */
export const UpdatedBy$inboundSchema: z.ZodType<
  UpdatedBy,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.lazy(() => LastName$inboundSchema)).optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type UpdatedBy$Outbound = {
  _id: string;
  firstName?: string | null | undefined;
  lastName?: LastName$Outbound | null | undefined;
  externalId?: string | null | undefined;
};

/** @internal */
export const UpdatedBy$outboundSchema: z.ZodType<
  UpdatedBy$Outbound,
  z.ZodTypeDef,
  UpdatedBy
> = z.object({
  id: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.lazy(() => LastName$outboundSchema)).optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatedBy$ {
  /** @deprecated use `UpdatedBy$inboundSchema` instead. */
  export const inboundSchema = UpdatedBy$inboundSchema;
  /** @deprecated use `UpdatedBy$outboundSchema` instead. */
  export const outboundSchema = UpdatedBy$outboundSchema;
  /** @deprecated use `UpdatedBy$Outbound` instead. */
  export type Outbound = UpdatedBy$Outbound;
}

export function updatedByToJSON(updatedBy: UpdatedBy): string {
  return JSON.stringify(UpdatedBy$outboundSchema.parse(updatedBy));
}

export function updatedByFromJSON(
  jsonString: string,
): SafeParseResult<UpdatedBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatedBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatedBy' from JSON`,
  );
}

/** @internal */
export const LayoutResponseDto$inboundSchema: z.ZodType<
  LayoutResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  layoutId: z.string(),
  slug: z.lazy(() => Slug$inboundSchema),
  name: z.string(),
  isDefault: z.boolean(),
  updatedAt: z.string(),
  updatedBy: z.nullable(z.lazy(() => UpdatedBy$inboundSchema)).optional(),
  createdAt: z.string(),
  origin: ResourceOriginEnum$inboundSchema,
  type: ResourceTypeEnum$inboundSchema,
  variables: z.nullable(z.record(z.any())).optional(),
  controls: LayoutControlsDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type LayoutResponseDto$Outbound = {
  _id: string;
  layoutId: string;
  slug: Slug$Outbound;
  name: string;
  isDefault: boolean;
  updatedAt: string;
  updatedBy?: UpdatedBy$Outbound | null | undefined;
  createdAt: string;
  origin: string;
  type: string;
  variables?: { [k: string]: any } | null | undefined;
  controls: LayoutControlsDto$Outbound;
};

/** @internal */
export const LayoutResponseDto$outboundSchema: z.ZodType<
  LayoutResponseDto$Outbound,
  z.ZodTypeDef,
  LayoutResponseDto
> = z.object({
  id: z.string(),
  layoutId: z.string(),
  slug: z.lazy(() => Slug$outboundSchema),
  name: z.string(),
  isDefault: z.boolean(),
  updatedAt: z.string(),
  updatedBy: z.nullable(z.lazy(() => UpdatedBy$outboundSchema)).optional(),
  createdAt: z.string(),
  origin: ResourceOriginEnum$outboundSchema,
  type: ResourceTypeEnum$outboundSchema,
  variables: z.nullable(z.record(z.any())).optional(),
  controls: LayoutControlsDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutResponseDto$ {
  /** @deprecated use `LayoutResponseDto$inboundSchema` instead. */
  export const inboundSchema = LayoutResponseDto$inboundSchema;
  /** @deprecated use `LayoutResponseDto$outboundSchema` instead. */
  export const outboundSchema = LayoutResponseDto$outboundSchema;
  /** @deprecated use `LayoutResponseDto$Outbound` instead. */
  export type Outbound = LayoutResponseDto$Outbound;
}

export function layoutResponseDtoToJSON(
  layoutResponseDto: LayoutResponseDto,
): string {
  return JSON.stringify(
    LayoutResponseDto$outboundSchema.parse(layoutResponseDto),
  );
}

export function layoutResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<LayoutResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutResponseDto' from JSON`,
  );
}
