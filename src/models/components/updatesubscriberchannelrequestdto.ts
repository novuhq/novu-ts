/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChannelCredentials,
  ChannelCredentials$inboundSchema,
  ChannelCredentials$Outbound,
  ChannelCredentials$outboundSchema,
} from "./channelcredentials.js";
import {
  ChatOrPushProviderEnum,
  ChatOrPushProviderEnum$inboundSchema,
  ChatOrPushProviderEnum$outboundSchema,
} from "./chatorpushproviderenum.js";

export type UpdateSubscriberChannelRequestDto = {
  /**
   * The provider identifier for the credentials
   */
  providerId: ChatOrPushProviderEnum;
  /**
   * The integration identifier
   */
  integrationIdentifier?: string | undefined;
  /**
   * Credentials payload for the specified provider
   */
  credentials: ChannelCredentials;
};

/** @internal */
export const UpdateSubscriberChannelRequestDto$inboundSchema: z.ZodType<
  UpdateSubscriberChannelRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  providerId: ChatOrPushProviderEnum$inboundSchema,
  integrationIdentifier: z.string().optional(),
  credentials: ChannelCredentials$inboundSchema,
});

/** @internal */
export type UpdateSubscriberChannelRequestDto$Outbound = {
  providerId: string;
  integrationIdentifier?: string | undefined;
  credentials: ChannelCredentials$Outbound;
};

/** @internal */
export const UpdateSubscriberChannelRequestDto$outboundSchema: z.ZodType<
  UpdateSubscriberChannelRequestDto$Outbound,
  z.ZodTypeDef,
  UpdateSubscriberChannelRequestDto
> = z.object({
  providerId: ChatOrPushProviderEnum$outboundSchema,
  integrationIdentifier: z.string().optional(),
  credentials: ChannelCredentials$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSubscriberChannelRequestDto$ {
  /** @deprecated use `UpdateSubscriberChannelRequestDto$inboundSchema` instead. */
  export const inboundSchema = UpdateSubscriberChannelRequestDto$inboundSchema;
  /** @deprecated use `UpdateSubscriberChannelRequestDto$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSubscriberChannelRequestDto$outboundSchema;
  /** @deprecated use `UpdateSubscriberChannelRequestDto$Outbound` instead. */
  export type Outbound = UpdateSubscriberChannelRequestDto$Outbound;
}

export function updateSubscriberChannelRequestDtoToJSON(
  updateSubscriberChannelRequestDto: UpdateSubscriberChannelRequestDto,
): string {
  return JSON.stringify(
    UpdateSubscriberChannelRequestDto$outboundSchema.parse(
      updateSubscriberChannelRequestDto,
    ),
  );
}

export function updateSubscriberChannelRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSubscriberChannelRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSubscriberChannelRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSubscriberChannelRequestDto' from JSON`,
  );
}
