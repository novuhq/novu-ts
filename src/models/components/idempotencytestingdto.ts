/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IdempotencyBehaviorEnum,
  IdempotencyBehaviorEnum$inboundSchema,
  IdempotencyBehaviorEnum$outboundSchema,
} from "./idempotencybehaviorenum.js";

export type IdempotencyTestingDto = {
  /**
   * The expected behavior of the idempotency request
   */
  expectedBehavior: IdempotencyBehaviorEnum;
};

/** @internal */
export const IdempotencyTestingDto$inboundSchema: z.ZodType<
  IdempotencyTestingDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  expectedBehavior: IdempotencyBehaviorEnum$inboundSchema,
});

/** @internal */
export type IdempotencyTestingDto$Outbound = {
  expectedBehavior: string;
};

/** @internal */
export const IdempotencyTestingDto$outboundSchema: z.ZodType<
  IdempotencyTestingDto$Outbound,
  z.ZodTypeDef,
  IdempotencyTestingDto
> = z.object({
  expectedBehavior: IdempotencyBehaviorEnum$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdempotencyTestingDto$ {
  /** @deprecated use `IdempotencyTestingDto$inboundSchema` instead. */
  export const inboundSchema = IdempotencyTestingDto$inboundSchema;
  /** @deprecated use `IdempotencyTestingDto$outboundSchema` instead. */
  export const outboundSchema = IdempotencyTestingDto$outboundSchema;
  /** @deprecated use `IdempotencyTestingDto$Outbound` instead. */
  export type Outbound = IdempotencyTestingDto$Outbound;
}

export function idempotencyTestingDtoToJSON(
  idempotencyTestingDto: IdempotencyTestingDto,
): string {
  return JSON.stringify(
    IdempotencyTestingDto$outboundSchema.parse(idempotencyTestingDto),
  );
}

export function idempotencyTestingDtoFromJSON(
  jsonString: string,
): SafeParseResult<IdempotencyTestingDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IdempotencyTestingDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IdempotencyTestingDto' from JSON`,
  );
}
