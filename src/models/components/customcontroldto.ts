/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomControlDto = {
  /**
   * Custom control values for the step.
   */
  custom?: { [k: string]: any } | undefined;
};

/** @internal */
export const CustomControlDto$inboundSchema: z.ZodType<
  CustomControlDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  custom: z.record(z.any()).optional(),
});

/** @internal */
export type CustomControlDto$Outbound = {
  custom?: { [k: string]: any } | undefined;
};

/** @internal */
export const CustomControlDto$outboundSchema: z.ZodType<
  CustomControlDto$Outbound,
  z.ZodTypeDef,
  CustomControlDto
> = z.object({
  custom: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomControlDto$ {
  /** @deprecated use `CustomControlDto$inboundSchema` instead. */
  export const inboundSchema = CustomControlDto$inboundSchema;
  /** @deprecated use `CustomControlDto$outboundSchema` instead. */
  export const outboundSchema = CustomControlDto$outboundSchema;
  /** @deprecated use `CustomControlDto$Outbound` instead. */
  export type Outbound = CustomControlDto$Outbound;
}

export function customControlDtoToJSON(
  customControlDto: CustomControlDto,
): string {
  return JSON.stringify(
    CustomControlDto$outboundSchema.parse(customControlDto),
  );
}

export function customControlDtoFromJSON(
  jsonString: string,
): SafeParseResult<CustomControlDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomControlDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomControlDto' from JSON`,
  );
}
