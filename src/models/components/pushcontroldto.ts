/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PushControlDto = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * Subject/title of the push notification.
   */
  subject?: string | undefined;
  /**
   * Body content of the push notification.
   */
  body?: string | undefined;
};

/** @internal */
export const PushControlDto$inboundSchema: z.ZodType<
  PushControlDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.record(z.any()).optional(),
  subject: z.string().optional(),
  body: z.string().optional(),
});

/** @internal */
export type PushControlDto$Outbound = {
  skip?: { [k: string]: any } | undefined;
  subject?: string | undefined;
  body?: string | undefined;
};

/** @internal */
export const PushControlDto$outboundSchema: z.ZodType<
  PushControlDto$Outbound,
  z.ZodTypeDef,
  PushControlDto
> = z.object({
  skip: z.record(z.any()).optional(),
  subject: z.string().optional(),
  body: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PushControlDto$ {
  /** @deprecated use `PushControlDto$inboundSchema` instead. */
  export const inboundSchema = PushControlDto$inboundSchema;
  /** @deprecated use `PushControlDto$outboundSchema` instead. */
  export const outboundSchema = PushControlDto$outboundSchema;
  /** @deprecated use `PushControlDto$Outbound` instead. */
  export type Outbound = PushControlDto$Outbound;
}

export function pushControlDtoToJSON(pushControlDto: PushControlDto): string {
  return JSON.stringify(PushControlDto$outboundSchema.parse(pushControlDto));
}

export function pushControlDtoFromJSON(
  jsonString: string,
): SafeParseResult<PushControlDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PushControlDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PushControlDto' from JSON`,
  );
}
