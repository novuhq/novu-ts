/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MessageCTAData = {
  /**
   * URL for the call to action
   */
  url?: string | undefined;
};

/** @internal */
export const MessageCTAData$inboundSchema: z.ZodType<
  MessageCTAData,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
});

/** @internal */
export type MessageCTAData$Outbound = {
  url?: string | undefined;
};

/** @internal */
export const MessageCTAData$outboundSchema: z.ZodType<
  MessageCTAData$Outbound,
  z.ZodTypeDef,
  MessageCTAData
> = z.object({
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageCTAData$ {
  /** @deprecated use `MessageCTAData$inboundSchema` instead. */
  export const inboundSchema = MessageCTAData$inboundSchema;
  /** @deprecated use `MessageCTAData$outboundSchema` instead. */
  export const outboundSchema = MessageCTAData$outboundSchema;
  /** @deprecated use `MessageCTAData$Outbound` instead. */
  export type Outbound = MessageCTAData$Outbound;
}

export function messageCTADataToJSON(messageCTAData: MessageCTAData): string {
  return JSON.stringify(MessageCTAData$outboundSchema.parse(messageCTAData));
}

export function messageCTADataFromJSON(
  jsonString: string,
): SafeParseResult<MessageCTAData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageCTAData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageCTAData' from JSON`,
  );
}
