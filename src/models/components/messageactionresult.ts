/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Payload = {};

export const MessageActionResultType = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type MessageActionResultType = ClosedEnum<
  typeof MessageActionResultType
>;

export type MessageActionResult = {
  payload?: Payload | undefined;
  type?: MessageActionResultType | undefined;
};

/** @internal */
export const Payload$inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Payload$Outbound = {};

/** @internal */
export const Payload$outboundSchema: z.ZodType<
  Payload$Outbound,
  z.ZodTypeDef,
  Payload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payload$ {
  /** @deprecated use `Payload$inboundSchema` instead. */
  export const inboundSchema = Payload$inboundSchema;
  /** @deprecated use `Payload$outboundSchema` instead. */
  export const outboundSchema = Payload$outboundSchema;
  /** @deprecated use `Payload$Outbound` instead. */
  export type Outbound = Payload$Outbound;
}

export function payloadToJSON(payload: Payload): string {
  return JSON.stringify(Payload$outboundSchema.parse(payload));
}

export function payloadFromJSON(
  jsonString: string,
): SafeParseResult<Payload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payload' from JSON`,
  );
}

/** @internal */
export const MessageActionResultType$inboundSchema: z.ZodNativeEnum<
  typeof MessageActionResultType
> = z.nativeEnum(MessageActionResultType);

/** @internal */
export const MessageActionResultType$outboundSchema: z.ZodNativeEnum<
  typeof MessageActionResultType
> = MessageActionResultType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageActionResultType$ {
  /** @deprecated use `MessageActionResultType$inboundSchema` instead. */
  export const inboundSchema = MessageActionResultType$inboundSchema;
  /** @deprecated use `MessageActionResultType$outboundSchema` instead. */
  export const outboundSchema = MessageActionResultType$outboundSchema;
}

/** @internal */
export const MessageActionResult$inboundSchema: z.ZodType<
  MessageActionResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  payload: z.lazy(() => Payload$inboundSchema).optional(),
  type: MessageActionResultType$inboundSchema.optional(),
});

/** @internal */
export type MessageActionResult$Outbound = {
  payload?: Payload$Outbound | undefined;
  type?: string | undefined;
};

/** @internal */
export const MessageActionResult$outboundSchema: z.ZodType<
  MessageActionResult$Outbound,
  z.ZodTypeDef,
  MessageActionResult
> = z.object({
  payload: z.lazy(() => Payload$outboundSchema).optional(),
  type: MessageActionResultType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageActionResult$ {
  /** @deprecated use `MessageActionResult$inboundSchema` instead. */
  export const inboundSchema = MessageActionResult$inboundSchema;
  /** @deprecated use `MessageActionResult$outboundSchema` instead. */
  export const outboundSchema = MessageActionResult$outboundSchema;
  /** @deprecated use `MessageActionResult$Outbound` instead. */
  export type Outbound = MessageActionResult$Outbound;
}

export function messageActionResultToJSON(
  messageActionResult: MessageActionResult,
): string {
  return JSON.stringify(
    MessageActionResult$outboundSchema.parse(messageActionResult),
  );
}

export function messageActionResultFromJSON(
  jsonString: string,
): SafeParseResult<MessageActionResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageActionResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageActionResult' from JSON`,
  );
}
