/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchPreferenceChannelsDto = {
  /**
   * Email channel preference
   */
  email?: boolean | undefined;
  /**
   * SMS channel preference
   */
  sms?: boolean | undefined;
  /**
   * In-app channel preference
   */
  inApp?: boolean | undefined;
  /**
   * Push channel preference
   */
  push?: boolean | undefined;
  /**
   * Chat channel preference
   */
  chat?: boolean | undefined;
};

/** @internal */
export const PatchPreferenceChannelsDto$inboundSchema: z.ZodType<
  PatchPreferenceChannelsDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.boolean().optional(),
  sms: z.boolean().optional(),
  in_app: z.boolean().optional(),
  push: z.boolean().optional(),
  chat: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "in_app": "inApp",
  });
});

/** @internal */
export type PatchPreferenceChannelsDto$Outbound = {
  email?: boolean | undefined;
  sms?: boolean | undefined;
  in_app?: boolean | undefined;
  push?: boolean | undefined;
  chat?: boolean | undefined;
};

/** @internal */
export const PatchPreferenceChannelsDto$outboundSchema: z.ZodType<
  PatchPreferenceChannelsDto$Outbound,
  z.ZodTypeDef,
  PatchPreferenceChannelsDto
> = z.object({
  email: z.boolean().optional(),
  sms: z.boolean().optional(),
  inApp: z.boolean().optional(),
  push: z.boolean().optional(),
  chat: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    inApp: "in_app",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchPreferenceChannelsDto$ {
  /** @deprecated use `PatchPreferenceChannelsDto$inboundSchema` instead. */
  export const inboundSchema = PatchPreferenceChannelsDto$inboundSchema;
  /** @deprecated use `PatchPreferenceChannelsDto$outboundSchema` instead. */
  export const outboundSchema = PatchPreferenceChannelsDto$outboundSchema;
  /** @deprecated use `PatchPreferenceChannelsDto$Outbound` instead. */
  export type Outbound = PatchPreferenceChannelsDto$Outbound;
}

export function patchPreferenceChannelsDtoToJSON(
  patchPreferenceChannelsDto: PatchPreferenceChannelsDto,
): string {
  return JSON.stringify(
    PatchPreferenceChannelsDto$outboundSchema.parse(patchPreferenceChannelsDto),
  );
}

export function patchPreferenceChannelsDtoFromJSON(
  jsonString: string,
): SafeParseResult<PatchPreferenceChannelsDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchPreferenceChannelsDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchPreferenceChannelsDto' from JSON`,
  );
}
