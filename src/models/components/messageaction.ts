/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageActionResult,
  MessageActionResult$inboundSchema,
  MessageActionResult$Outbound,
  MessageActionResult$outboundSchema,
} from "./messageactionresult.js";
import {
  MessageActionStatusEnum,
  MessageActionStatusEnum$inboundSchema,
  MessageActionStatusEnum$outboundSchema,
} from "./messageactionstatusenum.js";
import {
  MessageButton,
  MessageButton$inboundSchema,
  MessageButton$Outbound,
  MessageButton$outboundSchema,
} from "./messagebutton.js";

export type MessageAction = {
  /**
   * Status of the message action
   */
  status?: MessageActionStatusEnum | undefined;
  /**
   * List of buttons associated with the message action
   */
  buttons?: Array<MessageButton> | undefined;
  /**
   * Result of the message action
   */
  result?: MessageActionResult | undefined;
};

/** @internal */
export const MessageAction$inboundSchema: z.ZodType<
  MessageAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: MessageActionStatusEnum$inboundSchema.optional(),
  buttons: z.array(MessageButton$inboundSchema).optional(),
  result: MessageActionResult$inboundSchema.optional(),
});

/** @internal */
export type MessageAction$Outbound = {
  status?: string | undefined;
  buttons?: Array<MessageButton$Outbound> | undefined;
  result?: MessageActionResult$Outbound | undefined;
};

/** @internal */
export const MessageAction$outboundSchema: z.ZodType<
  MessageAction$Outbound,
  z.ZodTypeDef,
  MessageAction
> = z.object({
  status: MessageActionStatusEnum$outboundSchema.optional(),
  buttons: z.array(MessageButton$outboundSchema).optional(),
  result: MessageActionResult$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageAction$ {
  /** @deprecated use `MessageAction$inboundSchema` instead. */
  export const inboundSchema = MessageAction$inboundSchema;
  /** @deprecated use `MessageAction$outboundSchema` instead. */
  export const outboundSchema = MessageAction$outboundSchema;
  /** @deprecated use `MessageAction$Outbound` instead. */
  export type Outbound = MessageAction$Outbound;
}

export function messageActionToJSON(messageAction: MessageAction): string {
  return JSON.stringify(MessageAction$outboundSchema.parse(messageAction));
}

export function messageActionFromJSON(
  jsonString: string,
): SafeParseResult<MessageAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageAction' from JSON`,
  );
}
