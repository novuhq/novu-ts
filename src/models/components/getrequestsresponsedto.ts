/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RequestLogResponseDto,
  RequestLogResponseDto$inboundSchema,
  RequestLogResponseDto$Outbound,
  RequestLogResponseDto$outboundSchema,
} from "./requestlogresponsedto.js";

export type GetRequestsResponseDto = {
  /**
   * Request log data
   */
  data: Array<RequestLogResponseDto>;
  /**
   * Total number of requests
   */
  total: number;
  /**
   * Page size
   */
  pageSize?: number | undefined;
  /**
   * Current page number
   */
  page?: number | undefined;
};

/** @internal */
export const GetRequestsResponseDto$inboundSchema: z.ZodType<
  GetRequestsResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(RequestLogResponseDto$inboundSchema),
  total: z.number(),
  pageSize: z.number().optional(),
  page: z.number().optional(),
});

/** @internal */
export type GetRequestsResponseDto$Outbound = {
  data: Array<RequestLogResponseDto$Outbound>;
  total: number;
  pageSize?: number | undefined;
  page?: number | undefined;
};

/** @internal */
export const GetRequestsResponseDto$outboundSchema: z.ZodType<
  GetRequestsResponseDto$Outbound,
  z.ZodTypeDef,
  GetRequestsResponseDto
> = z.object({
  data: z.array(RequestLogResponseDto$outboundSchema),
  total: z.number(),
  pageSize: z.number().optional(),
  page: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRequestsResponseDto$ {
  /** @deprecated use `GetRequestsResponseDto$inboundSchema` instead. */
  export const inboundSchema = GetRequestsResponseDto$inboundSchema;
  /** @deprecated use `GetRequestsResponseDto$outboundSchema` instead. */
  export const outboundSchema = GetRequestsResponseDto$outboundSchema;
  /** @deprecated use `GetRequestsResponseDto$Outbound` instead. */
  export type Outbound = GetRequestsResponseDto$Outbound;
}

export function getRequestsResponseDtoToJSON(
  getRequestsResponseDto: GetRequestsResponseDto,
): string {
  return JSON.stringify(
    GetRequestsResponseDto$outboundSchema.parse(getRequestsResponseDto),
  );
}

export function getRequestsResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<GetRequestsResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRequestsResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRequestsResponseDto' from JSON`,
  );
}
