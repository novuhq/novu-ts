/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Value5 = string | number | boolean | { [k: string]: any };

export type Value4 = {};

/**
 * The actual value that failed validation
 */
export type PayloadValidationErrorDtoValue =
  | Value4
  | string
  | number
  | boolean
  | Array<string | number | boolean | { [k: string]: any } | null>;

export type PayloadValidationErrorDto = {
  /**
   * Field path that failed validation
   */
  field: string;
  /**
   * Validation error message
   */
  message: string;
  /**
   * The actual value that failed validation
   */
  value?:
    | Value4
    | string
    | number
    | boolean
    | Array<string | number | boolean | { [k: string]: any } | null>
    | null
    | undefined;
  /**
   * JSON Schema path where the validation failed
   */
  schemaPath?: string | undefined;
};

/** @internal */
export const Value5$inboundSchema: z.ZodType<Value5, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/** @internal */
export type Value5$Outbound = string | number | boolean | { [k: string]: any };

/** @internal */
export const Value5$outboundSchema: z.ZodType<
  Value5$Outbound,
  z.ZodTypeDef,
  Value5
> = z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value5$ {
  /** @deprecated use `Value5$inboundSchema` instead. */
  export const inboundSchema = Value5$inboundSchema;
  /** @deprecated use `Value5$outboundSchema` instead. */
  export const outboundSchema = Value5$outboundSchema;
  /** @deprecated use `Value5$Outbound` instead. */
  export type Outbound = Value5$Outbound;
}

export function value5ToJSON(value5: Value5): string {
  return JSON.stringify(Value5$outboundSchema.parse(value5));
}

export function value5FromJSON(
  jsonString: string,
): SafeParseResult<Value5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value5' from JSON`,
  );
}

/** @internal */
export const Value4$inboundSchema: z.ZodType<Value4, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value4$Outbound = {};

/** @internal */
export const Value4$outboundSchema: z.ZodType<
  Value4$Outbound,
  z.ZodTypeDef,
  Value4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value4$ {
  /** @deprecated use `Value4$inboundSchema` instead. */
  export const inboundSchema = Value4$inboundSchema;
  /** @deprecated use `Value4$outboundSchema` instead. */
  export const outboundSchema = Value4$outboundSchema;
  /** @deprecated use `Value4$Outbound` instead. */
  export type Outbound = Value4$Outbound;
}

export function value4ToJSON(value4: Value4): string {
  return JSON.stringify(Value4$outboundSchema.parse(value4));
}

export function value4FromJSON(
  jsonString: string,
): SafeParseResult<Value4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value4' from JSON`,
  );
}

/** @internal */
export const PayloadValidationErrorDtoValue$inboundSchema: z.ZodType<
  PayloadValidationErrorDtoValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Value4$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.nullable(
      z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
    ),
  ),
]);

/** @internal */
export type PayloadValidationErrorDtoValue$Outbound =
  | Value4$Outbound
  | string
  | number
  | boolean
  | Array<string | number | boolean | { [k: string]: any } | null>;

/** @internal */
export const PayloadValidationErrorDtoValue$outboundSchema: z.ZodType<
  PayloadValidationErrorDtoValue$Outbound,
  z.ZodTypeDef,
  PayloadValidationErrorDtoValue
> = z.union([
  z.lazy(() => Value4$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.nullable(
      z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
    ),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadValidationErrorDtoValue$ {
  /** @deprecated use `PayloadValidationErrorDtoValue$inboundSchema` instead. */
  export const inboundSchema = PayloadValidationErrorDtoValue$inboundSchema;
  /** @deprecated use `PayloadValidationErrorDtoValue$outboundSchema` instead. */
  export const outboundSchema = PayloadValidationErrorDtoValue$outboundSchema;
  /** @deprecated use `PayloadValidationErrorDtoValue$Outbound` instead. */
  export type Outbound = PayloadValidationErrorDtoValue$Outbound;
}

export function payloadValidationErrorDtoValueToJSON(
  payloadValidationErrorDtoValue: PayloadValidationErrorDtoValue,
): string {
  return JSON.stringify(
    PayloadValidationErrorDtoValue$outboundSchema.parse(
      payloadValidationErrorDtoValue,
    ),
  );
}

export function payloadValidationErrorDtoValueFromJSON(
  jsonString: string,
): SafeParseResult<PayloadValidationErrorDtoValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayloadValidationErrorDtoValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayloadValidationErrorDtoValue' from JSON`,
  );
}

/** @internal */
export const PayloadValidationErrorDto$inboundSchema: z.ZodType<
  PayloadValidationErrorDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  message: z.string(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(
        z.nullable(
          z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
        ),
      ),
    ]),
  ).optional(),
  schemaPath: z.string().optional(),
});

/** @internal */
export type PayloadValidationErrorDto$Outbound = {
  field: string;
  message: string;
  value?:
    | Value4$Outbound
    | string
    | number
    | boolean
    | Array<string | number | boolean | { [k: string]: any } | null>
    | null
    | undefined;
  schemaPath?: string | undefined;
};

/** @internal */
export const PayloadValidationErrorDto$outboundSchema: z.ZodType<
  PayloadValidationErrorDto$Outbound,
  z.ZodTypeDef,
  PayloadValidationErrorDto
> = z.object({
  field: z.string(),
  message: z.string(),
  value: z.nullable(
    z.union([
      z.lazy(() => Value4$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(
        z.nullable(
          z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
        ),
      ),
    ]),
  ).optional(),
  schemaPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayloadValidationErrorDto$ {
  /** @deprecated use `PayloadValidationErrorDto$inboundSchema` instead. */
  export const inboundSchema = PayloadValidationErrorDto$inboundSchema;
  /** @deprecated use `PayloadValidationErrorDto$outboundSchema` instead. */
  export const outboundSchema = PayloadValidationErrorDto$outboundSchema;
  /** @deprecated use `PayloadValidationErrorDto$Outbound` instead. */
  export type Outbound = PayloadValidationErrorDto$Outbound;
}

export function payloadValidationErrorDtoToJSON(
  payloadValidationErrorDto: PayloadValidationErrorDto,
): string {
  return JSON.stringify(
    PayloadValidationErrorDto$outboundSchema.parse(payloadValidationErrorDto),
  );
}

export function payloadValidationErrorDtoFromJSON(
  jsonString: string,
): SafeParseResult<PayloadValidationErrorDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayloadValidationErrorDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayloadValidationErrorDto' from JSON`,
  );
}
