/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    FieldFilterPart,
    FieldFilterPart$inboundSchema,
    FieldFilterPart$Outbound,
    FieldFilterPart$outboundSchema,
} from "./fieldfilterpart.js";
import * as z from "zod";

export const StepFilterType = {
    Boolean: "BOOLEAN",
    Text: "TEXT",
    Date: "DATE",
    Number: "NUMBER",
    Statement: "STATEMENT",
    List: "LIST",
    MultiList: "MULTI_LIST",
    Group: "GROUP",
} as const;
export type StepFilterType = ClosedEnum<typeof StepFilterType>;

export const Value = {
    And: "AND",
    Or: "OR",
} as const;
export type Value = ClosedEnum<typeof Value>;

export type StepFilter = {
    children: Array<FieldFilterPart>;
    isNegated: boolean;
    type: StepFilterType;
    value: Value;
};

/** @internal */
export const StepFilterType$inboundSchema: z.ZodNativeEnum<typeof StepFilterType> =
    z.nativeEnum(StepFilterType);

/** @internal */
export const StepFilterType$outboundSchema: z.ZodNativeEnum<typeof StepFilterType> =
    StepFilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepFilterType$ {
    /** @deprecated use `StepFilterType$inboundSchema` instead. */
    export const inboundSchema = StepFilterType$inboundSchema;
    /** @deprecated use `StepFilterType$outboundSchema` instead. */
    export const outboundSchema = StepFilterType$outboundSchema;
}

/** @internal */
export const Value$inboundSchema: z.ZodNativeEnum<typeof Value> = z.nativeEnum(Value);

/** @internal */
export const Value$outboundSchema: z.ZodNativeEnum<typeof Value> = Value$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
    /** @deprecated use `Value$inboundSchema` instead. */
    export const inboundSchema = Value$inboundSchema;
    /** @deprecated use `Value$outboundSchema` instead. */
    export const outboundSchema = Value$outboundSchema;
}

/** @internal */
export const StepFilter$inboundSchema: z.ZodType<StepFilter, z.ZodTypeDef, unknown> = z.object({
    children: z.array(FieldFilterPart$inboundSchema),
    isNegated: z.boolean(),
    type: StepFilterType$inboundSchema,
    value: Value$inboundSchema,
});

/** @internal */
export type StepFilter$Outbound = {
    children: Array<FieldFilterPart$Outbound>;
    isNegated: boolean;
    type: string;
    value: string;
};

/** @internal */
export const StepFilter$outboundSchema: z.ZodType<StepFilter$Outbound, z.ZodTypeDef, StepFilter> =
    z.object({
        children: z.array(FieldFilterPart$outboundSchema),
        isNegated: z.boolean(),
        type: StepFilterType$outboundSchema,
        value: Value$outboundSchema,
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepFilter$ {
    /** @deprecated use `StepFilter$inboundSchema` instead. */
    export const inboundSchema = StepFilter$inboundSchema;
    /** @deprecated use `StepFilter$outboundSchema` instead. */
    export const outboundSchema = StepFilter$outboundSchema;
    /** @deprecated use `StepFilter$Outbound` instead. */
    export type Outbound = StepFilter$Outbound;
}
