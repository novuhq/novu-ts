/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FieldFilterPart,
  FieldFilterPart$inboundSchema,
  FieldFilterPart$Outbound,
  FieldFilterPart$outboundSchema,
} from "./fieldfilterpart.js";

export const StepFilterType = {
  Boolean: "BOOLEAN",
  Text: "TEXT",
  Date: "DATE",
  Number: "NUMBER",
  Statement: "STATEMENT",
  List: "LIST",
  MultiList: "MULTI_LIST",
  Group: "GROUP",
} as const;
export type StepFilterType = ClosedEnum<typeof StepFilterType>;

export const Value = {
  And: "AND",
  Or: "OR",
} as const;
export type Value = ClosedEnum<typeof Value>;

export type StepFilter = {
  isNegated: boolean;
  type: StepFilterType;
  value: Value;
  children: Array<FieldFilterPart>;
};

/** @internal */
export const StepFilterType$inboundSchema: z.ZodNativeEnum<
  typeof StepFilterType
> = z.nativeEnum(StepFilterType);

/** @internal */
export const StepFilterType$outboundSchema: z.ZodNativeEnum<
  typeof StepFilterType
> = StepFilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepFilterType$ {
  /** @deprecated use `StepFilterType$inboundSchema` instead. */
  export const inboundSchema = StepFilterType$inboundSchema;
  /** @deprecated use `StepFilterType$outboundSchema` instead. */
  export const outboundSchema = StepFilterType$outboundSchema;
}

/** @internal */
export const Value$inboundSchema: z.ZodNativeEnum<typeof Value> = z.nativeEnum(
  Value,
);

/** @internal */
export const Value$outboundSchema: z.ZodNativeEnum<typeof Value> =
  Value$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
}

/** @internal */
export const StepFilter$inboundSchema: z.ZodType<
  StepFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  isNegated: z.boolean(),
  type: StepFilterType$inboundSchema,
  value: Value$inboundSchema,
  children: z.array(FieldFilterPart$inboundSchema),
});

/** @internal */
export type StepFilter$Outbound = {
  isNegated: boolean;
  type: string;
  value: string;
  children: Array<FieldFilterPart$Outbound>;
};

/** @internal */
export const StepFilter$outboundSchema: z.ZodType<
  StepFilter$Outbound,
  z.ZodTypeDef,
  StepFilter
> = z.object({
  isNegated: z.boolean(),
  type: StepFilterType$outboundSchema,
  value: Value$outboundSchema,
  children: z.array(FieldFilterPart$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepFilter$ {
  /** @deprecated use `StepFilter$inboundSchema` instead. */
  export const inboundSchema = StepFilter$inboundSchema;
  /** @deprecated use `StepFilter$outboundSchema` instead. */
  export const outboundSchema = StepFilter$outboundSchema;
  /** @deprecated use `StepFilter$Outbound` instead. */
  export type Outbound = StepFilter$Outbound;
}

export function stepFilterToJSON(stepFilter: StepFilter): string {
  return JSON.stringify(StepFilter$outboundSchema.parse(stepFilter));
}

export function stepFilterFromJSON(
  jsonString: string,
): SafeParseResult<StepFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepFilter' from JSON`,
  );
}
