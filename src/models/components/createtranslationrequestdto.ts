/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The resource type to associate translation with
 */
export const ResourceType = {
  Workflow: "workflow",
} as const;
/**
 * The resource type to associate translation with
 */
export type ResourceType = ClosedEnum<typeof ResourceType>;

/**
 * Translation content as JSON object
 */
export type Content = {};

export type CreateTranslationRequestDto = {
  /**
   * The resource ID to associate translation with. Accepts identifier or slug format
   */
  resourceId: string;
  /**
   * The resource type to associate translation with
   */
  resourceType: ResourceType;
  /**
   * Locale code (e.g., en_US, es_ES)
   */
  locale: string;
  /**
   * Translation content as JSON object
   */
  content: Content;
};

/** @internal */
export const ResourceType$inboundSchema: z.ZodNativeEnum<typeof ResourceType> =
  z.nativeEnum(ResourceType);

/** @internal */
export const ResourceType$outboundSchema: z.ZodNativeEnum<typeof ResourceType> =
  ResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceType$ {
  /** @deprecated use `ResourceType$inboundSchema` instead. */
  export const inboundSchema = ResourceType$inboundSchema;
  /** @deprecated use `ResourceType$outboundSchema` instead. */
  export const outboundSchema = ResourceType$outboundSchema;
}

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Content$Outbound = {};

/** @internal */
export const Content$outboundSchema: z.ZodType<
  Content$Outbound,
  z.ZodTypeDef,
  Content
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
  /** @deprecated use `Content$inboundSchema` instead. */
  export const inboundSchema = Content$inboundSchema;
  /** @deprecated use `Content$outboundSchema` instead. */
  export const outboundSchema = Content$outboundSchema;
  /** @deprecated use `Content$Outbound` instead. */
  export type Outbound = Content$Outbound;
}

export function contentToJSON(content: Content): string {
  return JSON.stringify(Content$outboundSchema.parse(content));
}

export function contentFromJSON(
  jsonString: string,
): SafeParseResult<Content, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Content$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Content' from JSON`,
  );
}

/** @internal */
export const CreateTranslationRequestDto$inboundSchema: z.ZodType<
  CreateTranslationRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string(),
  resourceType: ResourceType$inboundSchema,
  locale: z.string(),
  content: z.lazy(() => Content$inboundSchema),
});

/** @internal */
export type CreateTranslationRequestDto$Outbound = {
  resourceId: string;
  resourceType: string;
  locale: string;
  content: Content$Outbound;
};

/** @internal */
export const CreateTranslationRequestDto$outboundSchema: z.ZodType<
  CreateTranslationRequestDto$Outbound,
  z.ZodTypeDef,
  CreateTranslationRequestDto
> = z.object({
  resourceId: z.string(),
  resourceType: ResourceType$outboundSchema,
  locale: z.string(),
  content: z.lazy(() => Content$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTranslationRequestDto$ {
  /** @deprecated use `CreateTranslationRequestDto$inboundSchema` instead. */
  export const inboundSchema = CreateTranslationRequestDto$inboundSchema;
  /** @deprecated use `CreateTranslationRequestDto$outboundSchema` instead. */
  export const outboundSchema = CreateTranslationRequestDto$outboundSchema;
  /** @deprecated use `CreateTranslationRequestDto$Outbound` instead. */
  export type Outbound = CreateTranslationRequestDto$Outbound;
}

export function createTranslationRequestDtoToJSON(
  createTranslationRequestDto: CreateTranslationRequestDto,
): string {
  return JSON.stringify(
    CreateTranslationRequestDto$outboundSchema.parse(
      createTranslationRequestDto,
    ),
  );
}

export function createTranslationRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<CreateTranslationRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTranslationRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTranslationRequestDto' from JSON`,
  );
}
