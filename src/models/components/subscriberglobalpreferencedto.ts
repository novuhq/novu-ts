/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SubscriberPreferenceChannels,
  SubscriberPreferenceChannels$inboundSchema,
  SubscriberPreferenceChannels$Outbound,
  SubscriberPreferenceChannels$outboundSchema,
} from "./subscriberpreferencechannels.js";

export type SubscriberGlobalPreferenceDto = {
  /**
   * Whether notifications are enabled globally
   */
  enabled: boolean;
  /**
   * Channel-specific preference settings
   */
  channels: SubscriberPreferenceChannels;
};

/** @internal */
export const SubscriberGlobalPreferenceDto$inboundSchema: z.ZodType<
  SubscriberGlobalPreferenceDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean(),
  channels: SubscriberPreferenceChannels$inboundSchema,
});

/** @internal */
export type SubscriberGlobalPreferenceDto$Outbound = {
  enabled: boolean;
  channels: SubscriberPreferenceChannels$Outbound;
};

/** @internal */
export const SubscriberGlobalPreferenceDto$outboundSchema: z.ZodType<
  SubscriberGlobalPreferenceDto$Outbound,
  z.ZodTypeDef,
  SubscriberGlobalPreferenceDto
> = z.object({
  enabled: z.boolean(),
  channels: SubscriberPreferenceChannels$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberGlobalPreferenceDto$ {
  /** @deprecated use `SubscriberGlobalPreferenceDto$inboundSchema` instead. */
  export const inboundSchema = SubscriberGlobalPreferenceDto$inboundSchema;
  /** @deprecated use `SubscriberGlobalPreferenceDto$outboundSchema` instead. */
  export const outboundSchema = SubscriberGlobalPreferenceDto$outboundSchema;
  /** @deprecated use `SubscriberGlobalPreferenceDto$Outbound` instead. */
  export type Outbound = SubscriberGlobalPreferenceDto$Outbound;
}

export function subscriberGlobalPreferenceDtoToJSON(
  subscriberGlobalPreferenceDto: SubscriberGlobalPreferenceDto,
): string {
  return JSON.stringify(
    SubscriberGlobalPreferenceDto$outboundSchema.parse(
      subscriberGlobalPreferenceDto,
    ),
  );
}

export function subscriberGlobalPreferenceDtoFromJSON(
  jsonString: string,
): SafeParseResult<SubscriberGlobalPreferenceDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriberGlobalPreferenceDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriberGlobalPreferenceDto' from JSON`,
  );
}
