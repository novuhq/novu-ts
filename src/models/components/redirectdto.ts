/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Target window for the redirection.
 */
export const Target = {
  Self: "_self",
  Blank: "_blank",
  Parent: "_parent",
  Top: "_top",
  UnfencedTop: "_unfencedTop",
} as const;
/**
 * Target window for the redirection.
 */
export type Target = ClosedEnum<typeof Target>;

export type RedirectDto = {
  /**
   * URL for redirection. Must be a valid URL or start with / or {{"{{"}} variable }}.
   */
  url?: string | undefined;
  /**
   * Target window for the redirection.
   */
  target?: Target | undefined;
};

/** @internal */
export const Target$inboundSchema: z.ZodNativeEnum<typeof Target> = z
  .nativeEnum(Target);

/** @internal */
export const Target$outboundSchema: z.ZodNativeEnum<typeof Target> =
  Target$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Target$ {
  /** @deprecated use `Target$inboundSchema` instead. */
  export const inboundSchema = Target$inboundSchema;
  /** @deprecated use `Target$outboundSchema` instead. */
  export const outboundSchema = Target$outboundSchema;
}

/** @internal */
export const RedirectDto$inboundSchema: z.ZodType<
  RedirectDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
  target: Target$inboundSchema.default("_self"),
});

/** @internal */
export type RedirectDto$Outbound = {
  url?: string | undefined;
  target: string;
};

/** @internal */
export const RedirectDto$outboundSchema: z.ZodType<
  RedirectDto$Outbound,
  z.ZodTypeDef,
  RedirectDto
> = z.object({
  url: z.string().optional(),
  target: Target$outboundSchema.default("_self"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedirectDto$ {
  /** @deprecated use `RedirectDto$inboundSchema` instead. */
  export const inboundSchema = RedirectDto$inboundSchema;
  /** @deprecated use `RedirectDto$outboundSchema` instead. */
  export const outboundSchema = RedirectDto$outboundSchema;
  /** @deprecated use `RedirectDto$Outbound` instead. */
  export type Outbound = RedirectDto$Outbound;
}

export function redirectDtoToJSON(redirectDto: RedirectDto): string {
  return JSON.stringify(RedirectDto$outboundSchema.parse(redirectDto));
}

export function redirectDtoFromJSON(
  jsonString: string,
): SafeParseResult<RedirectDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedirectDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedirectDto' from JSON`,
  );
}
