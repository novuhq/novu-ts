/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PreferenceChannels = {
  email?: boolean | undefined;
  sms?: boolean | undefined;
  inApp?: boolean | undefined;
  chat?: boolean | undefined;
  push?: boolean | undefined;
};

/** @internal */
export const PreferenceChannels$inboundSchema: z.ZodType<
  PreferenceChannels,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.boolean().optional(),
  sms: z.boolean().optional(),
  in_app: z.boolean().optional(),
  chat: z.boolean().optional(),
  push: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "in_app": "inApp",
  });
});

/** @internal */
export type PreferenceChannels$Outbound = {
  email?: boolean | undefined;
  sms?: boolean | undefined;
  in_app?: boolean | undefined;
  chat?: boolean | undefined;
  push?: boolean | undefined;
};

/** @internal */
export const PreferenceChannels$outboundSchema: z.ZodType<
  PreferenceChannels$Outbound,
  z.ZodTypeDef,
  PreferenceChannels
> = z.object({
  email: z.boolean().optional(),
  sms: z.boolean().optional(),
  inApp: z.boolean().optional(),
  chat: z.boolean().optional(),
  push: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    inApp: "in_app",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreferenceChannels$ {
  /** @deprecated use `PreferenceChannels$inboundSchema` instead. */
  export const inboundSchema = PreferenceChannels$inboundSchema;
  /** @deprecated use `PreferenceChannels$outboundSchema` instead. */
  export const outboundSchema = PreferenceChannels$outboundSchema;
  /** @deprecated use `PreferenceChannels$Outbound` instead. */
  export type Outbound = PreferenceChannels$Outbound;
}

export function preferenceChannelsToJSON(
  preferenceChannels: PreferenceChannels,
): string {
  return JSON.stringify(
    PreferenceChannels$outboundSchema.parse(preferenceChannels),
  );
}

export function preferenceChannelsFromJSON(
  jsonString: string,
): SafeParseResult<PreferenceChannels, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreferenceChannels$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreferenceChannels' from JSON`,
  );
}
