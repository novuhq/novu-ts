/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type Change = {};

export const Type = {
    Feed: "Feed",
    MessageTemplate: "MessageTemplate",
    Layout: "Layout",
    DefaultLayout: "DefaultLayout",
    NotificationTemplate: "NotificationTemplate",
    NotificationGroup: "NotificationGroup",
    TranslationGroup: "TranslationGroup",
    Translation: "Translation",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type ChangeResponseDto = {
    creatorId: string;
    entityId: string;
    environmentId: string;
    id?: string | undefined;
    organizationId: string;
    parentId?: string | undefined;
    change: Change;
    createdAt: string;
    enabled: boolean;
    type: Type;
};

/** @internal */
export const Change$inboundSchema: z.ZodType<Change, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Change$Outbound = {};

/** @internal */
export const Change$outboundSchema: z.ZodType<Change$Outbound, z.ZodTypeDef, Change> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Change$ {
    /** @deprecated use `Change$inboundSchema` instead. */
    export const inboundSchema = Change$inboundSchema;
    /** @deprecated use `Change$outboundSchema` instead. */
    export const outboundSchema = Change$outboundSchema;
    /** @deprecated use `Change$Outbound` instead. */
    export type Outbound = Change$Outbound;
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const ChangeResponseDto$inboundSchema: z.ZodType<ChangeResponseDto, z.ZodTypeDef, unknown> =
    z
        .object({
            _creatorId: z.string(),
            _entityId: z.string(),
            _environmentId: z.string(),
            _id: z.string().optional(),
            _organizationId: z.string(),
            _parentId: z.string().optional(),
            change: z.lazy(() => Change$inboundSchema),
            createdAt: z.string(),
            enabled: z.boolean(),
            type: Type$inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                _creatorId: "creatorId",
                _entityId: "entityId",
                _environmentId: "environmentId",
                _id: "id",
                _organizationId: "organizationId",
                _parentId: "parentId",
            });
        });

/** @internal */
export type ChangeResponseDto$Outbound = {
    _creatorId: string;
    _entityId: string;
    _environmentId: string;
    _id?: string | undefined;
    _organizationId: string;
    _parentId?: string | undefined;
    change: Change$Outbound;
    createdAt: string;
    enabled: boolean;
    type: string;
};

/** @internal */
export const ChangeResponseDto$outboundSchema: z.ZodType<
    ChangeResponseDto$Outbound,
    z.ZodTypeDef,
    ChangeResponseDto
> = z
    .object({
        creatorId: z.string(),
        entityId: z.string(),
        environmentId: z.string(),
        id: z.string().optional(),
        organizationId: z.string(),
        parentId: z.string().optional(),
        change: z.lazy(() => Change$outboundSchema),
        createdAt: z.string(),
        enabled: z.boolean(),
        type: Type$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            creatorId: "_creatorId",
            entityId: "_entityId",
            environmentId: "_environmentId",
            id: "_id",
            organizationId: "_organizationId",
            parentId: "_parentId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangeResponseDto$ {
    /** @deprecated use `ChangeResponseDto$inboundSchema` instead. */
    export const inboundSchema = ChangeResponseDto$inboundSchema;
    /** @deprecated use `ChangeResponseDto$outboundSchema` instead. */
    export const outboundSchema = ChangeResponseDto$outboundSchema;
    /** @deprecated use `ChangeResponseDto$Outbound` instead. */
    export type Outbound = ChangeResponseDto$Outbound;
}
