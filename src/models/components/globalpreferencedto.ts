/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PreferenceChannels,
  PreferenceChannels$inboundSchema,
  PreferenceChannels$Outbound,
  PreferenceChannels$outboundSchema,
} from "./preferencechannels.js";

export type GlobalPreferenceDto = {
  /**
   * Whether notifications are enabled globally
   */
  enabled: boolean;
  /**
   * Channel-specific preference settings
   */
  channels: PreferenceChannels;
};

/** @internal */
export const GlobalPreferenceDto$inboundSchema: z.ZodType<
  GlobalPreferenceDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean(),
  channels: PreferenceChannels$inboundSchema,
});

/** @internal */
export type GlobalPreferenceDto$Outbound = {
  enabled: boolean;
  channels: PreferenceChannels$Outbound;
};

/** @internal */
export const GlobalPreferenceDto$outboundSchema: z.ZodType<
  GlobalPreferenceDto$Outbound,
  z.ZodTypeDef,
  GlobalPreferenceDto
> = z.object({
  enabled: z.boolean(),
  channels: PreferenceChannels$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlobalPreferenceDto$ {
  /** @deprecated use `GlobalPreferenceDto$inboundSchema` instead. */
  export const inboundSchema = GlobalPreferenceDto$inboundSchema;
  /** @deprecated use `GlobalPreferenceDto$outboundSchema` instead. */
  export const outboundSchema = GlobalPreferenceDto$outboundSchema;
  /** @deprecated use `GlobalPreferenceDto$Outbound` instead. */
  export type Outbound = GlobalPreferenceDto$Outbound;
}

export function globalPreferenceDtoToJSON(
  globalPreferenceDto: GlobalPreferenceDto,
): string {
  return JSON.stringify(
    GlobalPreferenceDto$outboundSchema.parse(globalPreferenceDto),
  );
}

export function globalPreferenceDtoFromJSON(
  jsonString: string,
): SafeParseResult<GlobalPreferenceDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GlobalPreferenceDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GlobalPreferenceDto' from JSON`,
  );
}
