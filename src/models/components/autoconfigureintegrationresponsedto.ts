/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The updated configurations after auto-configuration
 */
export type Integration = {};

export type AutoConfigureIntegrationResponseDto = {
  /**
   * Indicates whether the auto-configuration was successful
   */
  success: boolean;
  /**
   * Optional message describing the result or any errors that occurred
   */
  message?: string | undefined;
  /**
   * The updated configurations after auto-configuration
   */
  integration?: Integration | undefined;
};

/** @internal */
export const Integration$inboundSchema: z.ZodType<
  Integration,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Integration$Outbound = {};

/** @internal */
export const Integration$outboundSchema: z.ZodType<
  Integration$Outbound,
  z.ZodTypeDef,
  Integration
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Integration$ {
  /** @deprecated use `Integration$inboundSchema` instead. */
  export const inboundSchema = Integration$inboundSchema;
  /** @deprecated use `Integration$outboundSchema` instead. */
  export const outboundSchema = Integration$outboundSchema;
  /** @deprecated use `Integration$Outbound` instead. */
  export type Outbound = Integration$Outbound;
}

export function integrationToJSON(integration: Integration): string {
  return JSON.stringify(Integration$outboundSchema.parse(integration));
}

export function integrationFromJSON(
  jsonString: string,
): SafeParseResult<Integration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Integration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Integration' from JSON`,
  );
}

/** @internal */
export const AutoConfigureIntegrationResponseDto$inboundSchema: z.ZodType<
  AutoConfigureIntegrationResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
  message: z.string().optional(),
  integration: z.lazy(() => Integration$inboundSchema).optional(),
});

/** @internal */
export type AutoConfigureIntegrationResponseDto$Outbound = {
  success: boolean;
  message?: string | undefined;
  integration?: Integration$Outbound | undefined;
};

/** @internal */
export const AutoConfigureIntegrationResponseDto$outboundSchema: z.ZodType<
  AutoConfigureIntegrationResponseDto$Outbound,
  z.ZodTypeDef,
  AutoConfigureIntegrationResponseDto
> = z.object({
  success: z.boolean(),
  message: z.string().optional(),
  integration: z.lazy(() => Integration$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutoConfigureIntegrationResponseDto$ {
  /** @deprecated use `AutoConfigureIntegrationResponseDto$inboundSchema` instead. */
  export const inboundSchema =
    AutoConfigureIntegrationResponseDto$inboundSchema;
  /** @deprecated use `AutoConfigureIntegrationResponseDto$outboundSchema` instead. */
  export const outboundSchema =
    AutoConfigureIntegrationResponseDto$outboundSchema;
  /** @deprecated use `AutoConfigureIntegrationResponseDto$Outbound` instead. */
  export type Outbound = AutoConfigureIntegrationResponseDto$Outbound;
}

export function autoConfigureIntegrationResponseDtoToJSON(
  autoConfigureIntegrationResponseDto: AutoConfigureIntegrationResponseDto,
): string {
  return JSON.stringify(
    AutoConfigureIntegrationResponseDto$outboundSchema.parse(
      autoConfigureIntegrationResponseDto,
    ),
  );
}

export function autoConfigureIntegrationResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<AutoConfigureIntegrationResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AutoConfigureIntegrationResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutoConfigureIntegrationResponseDto' from JSON`,
  );
}
