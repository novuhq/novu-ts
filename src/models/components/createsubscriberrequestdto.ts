/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateSubscriberRequestDto = {
  /**
   * Unique identifier of the subscriber
   */
  subscriberId: string;
  /**
   * First name of the subscriber
   */
  firstName?: string | null | undefined;
  /**
   * Last name of the subscriber
   */
  lastName?: string | null | undefined;
  /**
   * Email address of the subscriber
   */
  email?: string | null | undefined;
  /**
   * Phone number of the subscriber
   */
  phone?: string | null | undefined;
  /**
   * Avatar URL or identifier
   */
  avatar?: string | null | undefined;
  /**
   * Timezone of the subscriber
   */
  timezone?: string | null | undefined;
  /**
   * Locale of the subscriber
   */
  locale?: string | null | undefined;
  /**
   * Additional custom data for the subscriber
   */
  data?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const CreateSubscriberRequestDto$inboundSchema: z.ZodType<
  CreateSubscriberRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriberId: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  locale: z.nullable(z.string()).optional(),
  data: z.nullable(z.record(z.any())).optional(),
});

/** @internal */
export type CreateSubscriberRequestDto$Outbound = {
  subscriberId: string;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
  email?: string | null | undefined;
  phone?: string | null | undefined;
  avatar?: string | null | undefined;
  timezone?: string | null | undefined;
  locale?: string | null | undefined;
  data?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const CreateSubscriberRequestDto$outboundSchema: z.ZodType<
  CreateSubscriberRequestDto$Outbound,
  z.ZodTypeDef,
  CreateSubscriberRequestDto
> = z.object({
  subscriberId: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  locale: z.nullable(z.string()).optional(),
  data: z.nullable(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSubscriberRequestDto$ {
  /** @deprecated use `CreateSubscriberRequestDto$inboundSchema` instead. */
  export const inboundSchema = CreateSubscriberRequestDto$inboundSchema;
  /** @deprecated use `CreateSubscriberRequestDto$outboundSchema` instead. */
  export const outboundSchema = CreateSubscriberRequestDto$outboundSchema;
  /** @deprecated use `CreateSubscriberRequestDto$Outbound` instead. */
  export type Outbound = CreateSubscriberRequestDto$Outbound;
}

export function createSubscriberRequestDtoToJSON(
  createSubscriberRequestDto: CreateSubscriberRequestDto,
): string {
  return JSON.stringify(
    CreateSubscriberRequestDto$outboundSchema.parse(createSubscriberRequestDto),
  );
}

export function createSubscriberRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<CreateSubscriberRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSubscriberRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSubscriberRequestDto' from JSON`,
  );
}
