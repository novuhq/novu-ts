/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SubscriberChannelDto,
  SubscriberChannelDto$inboundSchema,
  SubscriberChannelDto$Outbound,
  SubscriberChannelDto$outboundSchema,
} from "./subscriberchanneldto.js";

export type CreateSubscriberRequestDtoData =
  | string
  | Array<string>
  | boolean
  | number;

export type CreateSubscriberRequestDto = {
  /**
   * The internal identifier you used to create this subscriber, usually correlates to the id the user in your systems
   */
  subscriberId: string;
  /**
   * The email address of the subscriber.
   */
  email?: string | undefined;
  /**
   * The first name of the subscriber.
   */
  firstName?: string | undefined;
  /**
   * The last name of the subscriber.
   */
  lastName?: string | undefined;
  /**
   * The phone number of the subscriber.
   */
  phone?: string | undefined;
  /**
   * An HTTP URL to the profile image of your subscriber.
   */
  avatar?: string | undefined;
  /**
   * The locale of the subscriber.
   */
  locale?: string | undefined;
  /**
   * An optional payload object that can contain any properties.
   */
  data?: { [k: string]: string | Array<string> | boolean | number } | undefined;
  /**
   * An optional array of subscriber channels.
   */
  channels?: Array<SubscriberChannelDto> | undefined;
};

/** @internal */
export const CreateSubscriberRequestDtoData$inboundSchema: z.ZodType<
  CreateSubscriberRequestDtoData,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string()), z.boolean(), z.number()]);

/** @internal */
export type CreateSubscriberRequestDtoData$Outbound =
  | string
  | Array<string>
  | boolean
  | number;

/** @internal */
export const CreateSubscriberRequestDtoData$outboundSchema: z.ZodType<
  CreateSubscriberRequestDtoData$Outbound,
  z.ZodTypeDef,
  CreateSubscriberRequestDtoData
> = z.union([z.string(), z.array(z.string()), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSubscriberRequestDtoData$ {
  /** @deprecated use `CreateSubscriberRequestDtoData$inboundSchema` instead. */
  export const inboundSchema = CreateSubscriberRequestDtoData$inboundSchema;
  /** @deprecated use `CreateSubscriberRequestDtoData$outboundSchema` instead. */
  export const outboundSchema = CreateSubscriberRequestDtoData$outboundSchema;
  /** @deprecated use `CreateSubscriberRequestDtoData$Outbound` instead. */
  export type Outbound = CreateSubscriberRequestDtoData$Outbound;
}

export function createSubscriberRequestDtoDataToJSON(
  createSubscriberRequestDtoData: CreateSubscriberRequestDtoData,
): string {
  return JSON.stringify(
    CreateSubscriberRequestDtoData$outboundSchema.parse(
      createSubscriberRequestDtoData,
    ),
  );
}

export function createSubscriberRequestDtoDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateSubscriberRequestDtoData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSubscriberRequestDtoData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSubscriberRequestDtoData' from JSON`,
  );
}

/** @internal */
export const CreateSubscriberRequestDto$inboundSchema: z.ZodType<
  CreateSubscriberRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriberId: z.string(),
  email: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  locale: z.string().optional(),
  data: z.record(
    z.union([z.string(), z.array(z.string()), z.boolean(), z.number()]),
  ).optional(),
  channels: z.array(SubscriberChannelDto$inboundSchema).optional(),
});

/** @internal */
export type CreateSubscriberRequestDto$Outbound = {
  subscriberId: string;
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  locale?: string | undefined;
  data?: { [k: string]: string | Array<string> | boolean | number } | undefined;
  channels?: Array<SubscriberChannelDto$Outbound> | undefined;
};

/** @internal */
export const CreateSubscriberRequestDto$outboundSchema: z.ZodType<
  CreateSubscriberRequestDto$Outbound,
  z.ZodTypeDef,
  CreateSubscriberRequestDto
> = z.object({
  subscriberId: z.string(),
  email: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  locale: z.string().optional(),
  data: z.record(
    z.union([z.string(), z.array(z.string()), z.boolean(), z.number()]),
  ).optional(),
  channels: z.array(SubscriberChannelDto$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSubscriberRequestDto$ {
  /** @deprecated use `CreateSubscriberRequestDto$inboundSchema` instead. */
  export const inboundSchema = CreateSubscriberRequestDto$inboundSchema;
  /** @deprecated use `CreateSubscriberRequestDto$outboundSchema` instead. */
  export const outboundSchema = CreateSubscriberRequestDto$outboundSchema;
  /** @deprecated use `CreateSubscriberRequestDto$Outbound` instead. */
  export type Outbound = CreateSubscriberRequestDto$Outbound;
}

export function createSubscriberRequestDtoToJSON(
  createSubscriberRequestDto: CreateSubscriberRequestDto,
): string {
  return JSON.stringify(
    CreateSubscriberRequestDto$outboundSchema.parse(createSubscriberRequestDto),
  );
}

export function createSubscriberRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<CreateSubscriberRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSubscriberRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSubscriberRequestDto' from JSON`,
  );
}
