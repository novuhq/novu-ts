/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ButtonTypeEnum,
  ButtonTypeEnum$inboundSchema,
  ButtonTypeEnum$outboundSchema,
} from "./buttontypeenum.js";

export type MessageButton = {
  /**
   * Type of button for the action result
   */
  type: ButtonTypeEnum;
  /**
   * Content of the button
   */
  content: string;
  /**
   * Content of the result when the button is clicked
   */
  resultContent?: string | undefined;
};

/** @internal */
export const MessageButton$inboundSchema: z.ZodType<
  MessageButton,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ButtonTypeEnum$inboundSchema,
  content: z.string(),
  resultContent: z.string().optional(),
});

/** @internal */
export type MessageButton$Outbound = {
  type: string;
  content: string;
  resultContent?: string | undefined;
};

/** @internal */
export const MessageButton$outboundSchema: z.ZodType<
  MessageButton$Outbound,
  z.ZodTypeDef,
  MessageButton
> = z.object({
  type: ButtonTypeEnum$outboundSchema,
  content: z.string(),
  resultContent: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageButton$ {
  /** @deprecated use `MessageButton$inboundSchema` instead. */
  export const inboundSchema = MessageButton$inboundSchema;
  /** @deprecated use `MessageButton$outboundSchema` instead. */
  export const outboundSchema = MessageButton$outboundSchema;
  /** @deprecated use `MessageButton$Outbound` instead. */
  export type Outbound = MessageButton$Outbound;
}

export function messageButtonToJSON(messageButton: MessageButton): string {
  return JSON.stringify(MessageButton$outboundSchema.parse(messageButton));
}

export function messageButtonFromJSON(
  jsonString: string,
): SafeParseResult<MessageButton, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageButton$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageButton' from JSON`,
  );
}
