/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    SubscriberPayloadDto,
    SubscriberPayloadDto$inboundSchema,
    SubscriberPayloadDto$Outbound,
    SubscriberPayloadDto$outboundSchema,
} from "./subscriberpayloaddto.js";
import {
    TenantPayloadDto,
    TenantPayloadDto$inboundSchema,
    TenantPayloadDto$Outbound,
    TenantPayloadDto$outboundSchema,
} from "./tenantpayloaddto.js";
import * as z from "zod";

/**
 * It is used to display the Avatar of the provided actor's subscriber id or actor object.
 *
 * @remarks
 *     If a new actor object is provided, we will create a new subscriber in our system
 *
 */
export type TriggerEventToAllRequestDtoActor = SubscriberPayloadDto | string;

/**
 * This could be used to override provider specific configurations
 */
export type TriggerEventToAllRequestDtoOverrides = {};

/**
 * The payload object is used to pass additional custom information that could be used to render the template, or perform routing rules based on it.
 *
 * @remarks
 *       This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.
 */
export type TriggerEventToAllRequestDtoPayload = {};

/**
 * It is used to specify a tenant context during trigger event.
 *
 * @remarks
 *     If a new tenant object is provided, we will create a new tenant.
 *
 */
export type TriggerEventToAllRequestDtoTenant = TenantPayloadDto | string;

export type TriggerEventToAllRequestDto = {
    /**
     * It is used to display the Avatar of the provided actor's subscriber id or actor object.
     *
     * @remarks
     *     If a new actor object is provided, we will create a new subscriber in our system
     *
     */
    actor?: SubscriberPayloadDto | string | undefined;
    /**
     * The trigger identifier associated for the template you wish to send. This identifier can be found on the template page.
     */
    name: string;
    /**
     * This could be used to override provider specific configurations
     */
    overrides?: TriggerEventToAllRequestDtoOverrides | undefined;
    /**
     * The payload object is used to pass additional custom information that could be used to render the template, or perform routing rules based on it.
     *
     * @remarks
     *       This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.
     */
    payload: TriggerEventToAllRequestDtoPayload;
    /**
     * It is used to specify a tenant context during trigger event.
     *
     * @remarks
     *     If a new tenant object is provided, we will create a new tenant.
     *
     */
    tenant?: TenantPayloadDto | string | undefined;
    /**
     * A unique identifier for this transaction, we will generated a UUID if not provided.
     */
    transactionId?: string | undefined;
};

/** @internal */
export const TriggerEventToAllRequestDtoActor$inboundSchema: z.ZodType<
    TriggerEventToAllRequestDtoActor,
    z.ZodTypeDef,
    unknown
> = z.union([SubscriberPayloadDto$inboundSchema, z.string()]);

/** @internal */
export type TriggerEventToAllRequestDtoActor$Outbound = SubscriberPayloadDto$Outbound | string;

/** @internal */
export const TriggerEventToAllRequestDtoActor$outboundSchema: z.ZodType<
    TriggerEventToAllRequestDtoActor$Outbound,
    z.ZodTypeDef,
    TriggerEventToAllRequestDtoActor
> = z.union([SubscriberPayloadDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerEventToAllRequestDtoActor$ {
    /** @deprecated use `TriggerEventToAllRequestDtoActor$inboundSchema` instead. */
    export const inboundSchema = TriggerEventToAllRequestDtoActor$inboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDtoActor$outboundSchema` instead. */
    export const outboundSchema = TriggerEventToAllRequestDtoActor$outboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDtoActor$Outbound` instead. */
    export type Outbound = TriggerEventToAllRequestDtoActor$Outbound;
}

/** @internal */
export const TriggerEventToAllRequestDtoOverrides$inboundSchema: z.ZodType<
    TriggerEventToAllRequestDtoOverrides,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TriggerEventToAllRequestDtoOverrides$Outbound = {};

/** @internal */
export const TriggerEventToAllRequestDtoOverrides$outboundSchema: z.ZodType<
    TriggerEventToAllRequestDtoOverrides$Outbound,
    z.ZodTypeDef,
    TriggerEventToAllRequestDtoOverrides
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerEventToAllRequestDtoOverrides$ {
    /** @deprecated use `TriggerEventToAllRequestDtoOverrides$inboundSchema` instead. */
    export const inboundSchema = TriggerEventToAllRequestDtoOverrides$inboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDtoOverrides$outboundSchema` instead. */
    export const outboundSchema = TriggerEventToAllRequestDtoOverrides$outboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDtoOverrides$Outbound` instead. */
    export type Outbound = TriggerEventToAllRequestDtoOverrides$Outbound;
}

/** @internal */
export const TriggerEventToAllRequestDtoPayload$inboundSchema: z.ZodType<
    TriggerEventToAllRequestDtoPayload,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TriggerEventToAllRequestDtoPayload$Outbound = {};

/** @internal */
export const TriggerEventToAllRequestDtoPayload$outboundSchema: z.ZodType<
    TriggerEventToAllRequestDtoPayload$Outbound,
    z.ZodTypeDef,
    TriggerEventToAllRequestDtoPayload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerEventToAllRequestDtoPayload$ {
    /** @deprecated use `TriggerEventToAllRequestDtoPayload$inboundSchema` instead. */
    export const inboundSchema = TriggerEventToAllRequestDtoPayload$inboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDtoPayload$outboundSchema` instead. */
    export const outboundSchema = TriggerEventToAllRequestDtoPayload$outboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDtoPayload$Outbound` instead. */
    export type Outbound = TriggerEventToAllRequestDtoPayload$Outbound;
}

/** @internal */
export const TriggerEventToAllRequestDtoTenant$inboundSchema: z.ZodType<
    TriggerEventToAllRequestDtoTenant,
    z.ZodTypeDef,
    unknown
> = z.union([TenantPayloadDto$inboundSchema, z.string()]);

/** @internal */
export type TriggerEventToAllRequestDtoTenant$Outbound = TenantPayloadDto$Outbound | string;

/** @internal */
export const TriggerEventToAllRequestDtoTenant$outboundSchema: z.ZodType<
    TriggerEventToAllRequestDtoTenant$Outbound,
    z.ZodTypeDef,
    TriggerEventToAllRequestDtoTenant
> = z.union([TenantPayloadDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerEventToAllRequestDtoTenant$ {
    /** @deprecated use `TriggerEventToAllRequestDtoTenant$inboundSchema` instead. */
    export const inboundSchema = TriggerEventToAllRequestDtoTenant$inboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDtoTenant$outboundSchema` instead. */
    export const outboundSchema = TriggerEventToAllRequestDtoTenant$outboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDtoTenant$Outbound` instead. */
    export type Outbound = TriggerEventToAllRequestDtoTenant$Outbound;
}

/** @internal */
export const TriggerEventToAllRequestDto$inboundSchema: z.ZodType<
    TriggerEventToAllRequestDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    actor: z.union([SubscriberPayloadDto$inboundSchema, z.string()]).optional(),
    name: z.string(),
    overrides: z.lazy(() => TriggerEventToAllRequestDtoOverrides$inboundSchema).optional(),
    payload: z.lazy(() => TriggerEventToAllRequestDtoPayload$inboundSchema),
    tenant: z.union([TenantPayloadDto$inboundSchema, z.string()]).optional(),
    transactionId: z.string().optional(),
});

/** @internal */
export type TriggerEventToAllRequestDto$Outbound = {
    actor?: SubscriberPayloadDto$Outbound | string | undefined;
    name: string;
    overrides?: TriggerEventToAllRequestDtoOverrides$Outbound | undefined;
    payload: TriggerEventToAllRequestDtoPayload$Outbound;
    tenant?: TenantPayloadDto$Outbound | string | undefined;
    transactionId?: string | undefined;
};

/** @internal */
export const TriggerEventToAllRequestDto$outboundSchema: z.ZodType<
    TriggerEventToAllRequestDto$Outbound,
    z.ZodTypeDef,
    TriggerEventToAllRequestDto
> = z.object({
    actor: z.union([SubscriberPayloadDto$outboundSchema, z.string()]).optional(),
    name: z.string(),
    overrides: z.lazy(() => TriggerEventToAllRequestDtoOverrides$outboundSchema).optional(),
    payload: z.lazy(() => TriggerEventToAllRequestDtoPayload$outboundSchema),
    tenant: z.union([TenantPayloadDto$outboundSchema, z.string()]).optional(),
    transactionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerEventToAllRequestDto$ {
    /** @deprecated use `TriggerEventToAllRequestDto$inboundSchema` instead. */
    export const inboundSchema = TriggerEventToAllRequestDto$inboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDto$outboundSchema` instead. */
    export const outboundSchema = TriggerEventToAllRequestDto$outboundSchema;
    /** @deprecated use `TriggerEventToAllRequestDto$Outbound` instead. */
    export type Outbound = TriggerEventToAllRequestDto$Outbound;
}
