/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of channel that is enabled or not
 */
export const ChannelPreferenceType = {
  InApp: "in_app",
  Email: "email",
  Sms: "sms",
  Chat: "chat",
  Push: "push",
} as const;
/**
 * The type of channel that is enabled or not
 */
export type ChannelPreferenceType = ClosedEnum<typeof ChannelPreferenceType>;

export type ChannelPreference = {
  /**
   * The type of channel that is enabled or not
   */
  type: ChannelPreferenceType;
  /**
   * If channel is enabled or not
   */
  enabled: boolean;
};

/** @internal */
export const ChannelPreferenceType$inboundSchema: z.ZodNativeEnum<
  typeof ChannelPreferenceType
> = z.nativeEnum(ChannelPreferenceType);

/** @internal */
export const ChannelPreferenceType$outboundSchema: z.ZodNativeEnum<
  typeof ChannelPreferenceType
> = ChannelPreferenceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelPreferenceType$ {
  /** @deprecated use `ChannelPreferenceType$inboundSchema` instead. */
  export const inboundSchema = ChannelPreferenceType$inboundSchema;
  /** @deprecated use `ChannelPreferenceType$outboundSchema` instead. */
  export const outboundSchema = ChannelPreferenceType$outboundSchema;
}

/** @internal */
export const ChannelPreference$inboundSchema: z.ZodType<
  ChannelPreference,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ChannelPreferenceType$inboundSchema,
  enabled: z.boolean(),
});

/** @internal */
export type ChannelPreference$Outbound = {
  type: string;
  enabled: boolean;
};

/** @internal */
export const ChannelPreference$outboundSchema: z.ZodType<
  ChannelPreference$Outbound,
  z.ZodTypeDef,
  ChannelPreference
> = z.object({
  type: ChannelPreferenceType$outboundSchema,
  enabled: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelPreference$ {
  /** @deprecated use `ChannelPreference$inboundSchema` instead. */
  export const inboundSchema = ChannelPreference$inboundSchema;
  /** @deprecated use `ChannelPreference$outboundSchema` instead. */
  export const outboundSchema = ChannelPreference$outboundSchema;
  /** @deprecated use `ChannelPreference$Outbound` instead. */
  export type Outbound = ChannelPreference$Outbound;
}

export function channelPreferenceToJSON(
  channelPreference: ChannelPreference,
): string {
  return JSON.stringify(
    ChannelPreference$outboundSchema.parse(channelPreference),
  );
}

export function channelPreferenceFromJSON(
  jsonString: string,
): SafeParseResult<ChannelPreference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelPreference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelPreference' from JSON`,
  );
}
