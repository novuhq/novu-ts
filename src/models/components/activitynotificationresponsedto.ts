/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActivityNotificationJobResponseDto,
  ActivityNotificationJobResponseDto$inboundSchema,
  ActivityNotificationJobResponseDto$Outbound,
  ActivityNotificationJobResponseDto$outboundSchema,
} from "./activitynotificationjobresponsedto.js";
import {
  ActivityNotificationSubscriberResponseDto,
  ActivityNotificationSubscriberResponseDto$inboundSchema,
  ActivityNotificationSubscriberResponseDto$Outbound,
  ActivityNotificationSubscriberResponseDto$outboundSchema,
} from "./activitynotificationsubscriberresponsedto.js";
import {
  ActivityNotificationTemplateResponseDto,
  ActivityNotificationTemplateResponseDto$inboundSchema,
  ActivityNotificationTemplateResponseDto$Outbound,
  ActivityNotificationTemplateResponseDto$outboundSchema,
} from "./activitynotificationtemplateresponsedto.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * Payload of the notification
 */
export type ActivityNotificationResponseDtoPayload = {};

/**
 * Controls associated with the notification
 */
export type Controls = {};

/**
 * To field for subscriber definition
 */
export type ActivityNotificationResponseDtoTo = {};

export type ActivityNotificationResponseDto = {
  /**
   * Unique identifier of the notification
   */
  id?: string | undefined;
  /**
   * Environment ID of the notification
   */
  environmentId: string;
  /**
   * Organization ID of the notification
   */
  organizationId: string;
  /**
   * Subscriber ID of the notification
   */
  subscriberId: string;
  /**
   * Transaction ID of the notification
   */
  transactionId: string;
  /**
   * Template ID of the notification
   */
  templateId?: string | undefined;
  /**
   * Digested Notification ID
   */
  digestedNotificationId?: string | undefined;
  /**
   * Creation time of the notification
   */
  createdAt?: string | undefined;
  /**
   * Last updated time of the notification
   */
  updatedAt?: string | undefined;
  channels?: Array<StepTypeEnum> | undefined;
  /**
   * Subscriber of the notification
   */
  subscriber?: ActivityNotificationSubscriberResponseDto | undefined;
  /**
   * Template of the notification
   */
  template?: ActivityNotificationTemplateResponseDto | undefined;
  /**
   * Jobs of the notification
   */
  jobs?: Array<ActivityNotificationJobResponseDto> | undefined;
  /**
   * Payload of the notification
   */
  payload?: ActivityNotificationResponseDtoPayload | undefined;
  /**
   * Tags associated with the notification
   */
  tags?: Array<string> | undefined;
  /**
   * Controls associated with the notification
   */
  controls?: Controls | undefined;
  /**
   * To field for subscriber definition
   */
  to?: ActivityNotificationResponseDtoTo | undefined;
};

/** @internal */
export const ActivityNotificationResponseDtoPayload$inboundSchema: z.ZodType<
  ActivityNotificationResponseDtoPayload,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivityNotificationResponseDtoPayload$Outbound = {};

/** @internal */
export const ActivityNotificationResponseDtoPayload$outboundSchema: z.ZodType<
  ActivityNotificationResponseDtoPayload$Outbound,
  z.ZodTypeDef,
  ActivityNotificationResponseDtoPayload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNotificationResponseDtoPayload$ {
  /** @deprecated use `ActivityNotificationResponseDtoPayload$inboundSchema` instead. */
  export const inboundSchema =
    ActivityNotificationResponseDtoPayload$inboundSchema;
  /** @deprecated use `ActivityNotificationResponseDtoPayload$outboundSchema` instead. */
  export const outboundSchema =
    ActivityNotificationResponseDtoPayload$outboundSchema;
  /** @deprecated use `ActivityNotificationResponseDtoPayload$Outbound` instead. */
  export type Outbound = ActivityNotificationResponseDtoPayload$Outbound;
}

export function activityNotificationResponseDtoPayloadToJSON(
  activityNotificationResponseDtoPayload:
    ActivityNotificationResponseDtoPayload,
): string {
  return JSON.stringify(
    ActivityNotificationResponseDtoPayload$outboundSchema.parse(
      activityNotificationResponseDtoPayload,
    ),
  );
}

export function activityNotificationResponseDtoPayloadFromJSON(
  jsonString: string,
): SafeParseResult<ActivityNotificationResponseDtoPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivityNotificationResponseDtoPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityNotificationResponseDtoPayload' from JSON`,
  );
}

/** @internal */
export const Controls$inboundSchema: z.ZodType<
  Controls,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Controls$Outbound = {};

/** @internal */
export const Controls$outboundSchema: z.ZodType<
  Controls$Outbound,
  z.ZodTypeDef,
  Controls
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Controls$ {
  /** @deprecated use `Controls$inboundSchema` instead. */
  export const inboundSchema = Controls$inboundSchema;
  /** @deprecated use `Controls$outboundSchema` instead. */
  export const outboundSchema = Controls$outboundSchema;
  /** @deprecated use `Controls$Outbound` instead. */
  export type Outbound = Controls$Outbound;
}

export function controlsToJSON(controls: Controls): string {
  return JSON.stringify(Controls$outboundSchema.parse(controls));
}

export function controlsFromJSON(
  jsonString: string,
): SafeParseResult<Controls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Controls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Controls' from JSON`,
  );
}

/** @internal */
export const ActivityNotificationResponseDtoTo$inboundSchema: z.ZodType<
  ActivityNotificationResponseDtoTo,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivityNotificationResponseDtoTo$Outbound = {};

/** @internal */
export const ActivityNotificationResponseDtoTo$outboundSchema: z.ZodType<
  ActivityNotificationResponseDtoTo$Outbound,
  z.ZodTypeDef,
  ActivityNotificationResponseDtoTo
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNotificationResponseDtoTo$ {
  /** @deprecated use `ActivityNotificationResponseDtoTo$inboundSchema` instead. */
  export const inboundSchema = ActivityNotificationResponseDtoTo$inboundSchema;
  /** @deprecated use `ActivityNotificationResponseDtoTo$outboundSchema` instead. */
  export const outboundSchema =
    ActivityNotificationResponseDtoTo$outboundSchema;
  /** @deprecated use `ActivityNotificationResponseDtoTo$Outbound` instead. */
  export type Outbound = ActivityNotificationResponseDtoTo$Outbound;
}

export function activityNotificationResponseDtoToToJSON(
  activityNotificationResponseDtoTo: ActivityNotificationResponseDtoTo,
): string {
  return JSON.stringify(
    ActivityNotificationResponseDtoTo$outboundSchema.parse(
      activityNotificationResponseDtoTo,
    ),
  );
}

export function activityNotificationResponseDtoToFromJSON(
  jsonString: string,
): SafeParseResult<ActivityNotificationResponseDtoTo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityNotificationResponseDtoTo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityNotificationResponseDtoTo' from JSON`,
  );
}

/** @internal */
export const ActivityNotificationResponseDto$inboundSchema: z.ZodType<
  ActivityNotificationResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  _environmentId: z.string(),
  _organizationId: z.string(),
  _subscriberId: z.string(),
  transactionId: z.string(),
  _templateId: z.string().optional(),
  _digestedNotificationId: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  channels: z.array(StepTypeEnum$inboundSchema).optional(),
  subscriber: ActivityNotificationSubscriberResponseDto$inboundSchema
    .optional(),
  template: ActivityNotificationTemplateResponseDto$inboundSchema.optional(),
  jobs: z.array(ActivityNotificationJobResponseDto$inboundSchema).optional(),
  payload: z.lazy(() => ActivityNotificationResponseDtoPayload$inboundSchema)
    .optional(),
  tags: z.array(z.string()).optional(),
  controls: z.lazy(() => Controls$inboundSchema).optional(),
  to: z.lazy(() => ActivityNotificationResponseDtoTo$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_environmentId": "environmentId",
    "_organizationId": "organizationId",
    "_subscriberId": "subscriberId",
    "_templateId": "templateId",
    "_digestedNotificationId": "digestedNotificationId",
  });
});

/** @internal */
export type ActivityNotificationResponseDto$Outbound = {
  _id?: string | undefined;
  _environmentId: string;
  _organizationId: string;
  _subscriberId: string;
  transactionId: string;
  _templateId?: string | undefined;
  _digestedNotificationId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  channels?: Array<string> | undefined;
  subscriber?: ActivityNotificationSubscriberResponseDto$Outbound | undefined;
  template?: ActivityNotificationTemplateResponseDto$Outbound | undefined;
  jobs?: Array<ActivityNotificationJobResponseDto$Outbound> | undefined;
  payload?: ActivityNotificationResponseDtoPayload$Outbound | undefined;
  tags?: Array<string> | undefined;
  controls?: Controls$Outbound | undefined;
  to?: ActivityNotificationResponseDtoTo$Outbound | undefined;
};

/** @internal */
export const ActivityNotificationResponseDto$outboundSchema: z.ZodType<
  ActivityNotificationResponseDto$Outbound,
  z.ZodTypeDef,
  ActivityNotificationResponseDto
> = z.object({
  id: z.string().optional(),
  environmentId: z.string(),
  organizationId: z.string(),
  subscriberId: z.string(),
  transactionId: z.string(),
  templateId: z.string().optional(),
  digestedNotificationId: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  channels: z.array(StepTypeEnum$outboundSchema).optional(),
  subscriber: ActivityNotificationSubscriberResponseDto$outboundSchema
    .optional(),
  template: ActivityNotificationTemplateResponseDto$outboundSchema.optional(),
  jobs: z.array(ActivityNotificationJobResponseDto$outboundSchema).optional(),
  payload: z.lazy(() => ActivityNotificationResponseDtoPayload$outboundSchema)
    .optional(),
  tags: z.array(z.string()).optional(),
  controls: z.lazy(() => Controls$outboundSchema).optional(),
  to: z.lazy(() => ActivityNotificationResponseDtoTo$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    environmentId: "_environmentId",
    organizationId: "_organizationId",
    subscriberId: "_subscriberId",
    templateId: "_templateId",
    digestedNotificationId: "_digestedNotificationId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNotificationResponseDto$ {
  /** @deprecated use `ActivityNotificationResponseDto$inboundSchema` instead. */
  export const inboundSchema = ActivityNotificationResponseDto$inboundSchema;
  /** @deprecated use `ActivityNotificationResponseDto$outboundSchema` instead. */
  export const outboundSchema = ActivityNotificationResponseDto$outboundSchema;
  /** @deprecated use `ActivityNotificationResponseDto$Outbound` instead. */
  export type Outbound = ActivityNotificationResponseDto$Outbound;
}

export function activityNotificationResponseDtoToJSON(
  activityNotificationResponseDto: ActivityNotificationResponseDto,
): string {
  return JSON.stringify(
    ActivityNotificationResponseDto$outboundSchema.parse(
      activityNotificationResponseDto,
    ),
  );
}

export function activityNotificationResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<ActivityNotificationResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityNotificationResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityNotificationResponseDto' from JSON`,
  );
}
