/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActivityNotificationJobResponseDto,
  ActivityNotificationJobResponseDto$inboundSchema,
  ActivityNotificationJobResponseDto$Outbound,
  ActivityNotificationJobResponseDto$outboundSchema,
} from "./activitynotificationjobresponsedto.js";
import {
  ActivityNotificationSubscriberResponseDto,
  ActivityNotificationSubscriberResponseDto$inboundSchema,
  ActivityNotificationSubscriberResponseDto$Outbound,
  ActivityNotificationSubscriberResponseDto$outboundSchema,
} from "./activitynotificationsubscriberresponsedto.js";
import {
  ActivityNotificationTemplateResponseDto,
  ActivityNotificationTemplateResponseDto$inboundSchema,
  ActivityNotificationTemplateResponseDto$Outbound,
  ActivityNotificationTemplateResponseDto$outboundSchema,
} from "./activitynotificationtemplateresponsedto.js";
import {
  ActivityTopicDto,
  ActivityTopicDto$inboundSchema,
  ActivityTopicDto$Outbound,
  ActivityTopicDto$outboundSchema,
} from "./activitytopicdto.js";
import {
  SeverityLevelEnum,
  SeverityLevelEnum$inboundSchema,
  SeverityLevelEnum$outboundSchema,
} from "./severitylevelenum.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

export type ActivityNotificationResponseDto = {
  /**
   * Unique identifier of the notification
   */
  id?: string | undefined;
  /**
   * Environment ID of the notification
   */
  environmentId: string;
  /**
   * Organization ID of the notification
   */
  organizationId: string;
  /**
   * Subscriber ID of the notification
   */
  subscriberId: string;
  /**
   * Transaction ID of the notification
   */
  transactionId: string;
  /**
   * Template ID of the notification
   */
  templateId?: string | undefined;
  /**
   * Digested Notification ID
   */
  digestedNotificationId?: string | undefined;
  /**
   * Creation time of the notification
   */
  createdAt?: string | undefined;
  /**
   * Last updated time of the notification
   */
  updatedAt?: string | undefined;
  channels?: Array<StepTypeEnum> | undefined;
  /**
   * Subscriber of the notification
   */
  subscriber?: ActivityNotificationSubscriberResponseDto | undefined;
  /**
   * Template of the notification
   */
  template?: ActivityNotificationTemplateResponseDto | undefined;
  /**
   * Jobs of the notification
   */
  jobs?: Array<ActivityNotificationJobResponseDto> | undefined;
  /**
   * Payload of the notification
   */
  payload?: { [k: string]: any } | undefined;
  /**
   * Tags associated with the notification
   */
  tags?: Array<string> | undefined;
  /**
   * Controls associated with the notification
   */
  controls?: { [k: string]: any } | undefined;
  /**
   * To field for subscriber definition
   */
  to?: { [k: string]: any } | undefined;
  /**
   * Topics of the notification
   */
  topics?: Array<ActivityTopicDto> | undefined;
  /**
   * Severity of the workflow
   */
  severity?: SeverityLevelEnum | undefined;
  /**
   * Criticality of the notification
   */
  critical?: boolean | undefined;
  /**
   * Contexts (keys) in which the notification was sent
   */
  contextKeys?: Array<string> | undefined;
};

/** @internal */
export const ActivityNotificationResponseDto$inboundSchema: z.ZodType<
  ActivityNotificationResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  _environmentId: z.string(),
  _organizationId: z.string(),
  _subscriberId: z.string(),
  transactionId: z.string(),
  _templateId: z.string().optional(),
  _digestedNotificationId: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  channels: z.array(StepTypeEnum$inboundSchema).optional(),
  subscriber: ActivityNotificationSubscriberResponseDto$inboundSchema
    .optional(),
  template: ActivityNotificationTemplateResponseDto$inboundSchema.optional(),
  jobs: z.array(ActivityNotificationJobResponseDto$inboundSchema).optional(),
  payload: z.record(z.any()).optional(),
  tags: z.array(z.string()).optional(),
  controls: z.record(z.any()).optional(),
  to: z.record(z.any()).optional(),
  topics: z.array(ActivityTopicDto$inboundSchema).optional(),
  severity: SeverityLevelEnum$inboundSchema.optional(),
  critical: z.boolean().optional(),
  contextKeys: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_environmentId": "environmentId",
    "_organizationId": "organizationId",
    "_subscriberId": "subscriberId",
    "_templateId": "templateId",
    "_digestedNotificationId": "digestedNotificationId",
  });
});

/** @internal */
export type ActivityNotificationResponseDto$Outbound = {
  _id?: string | undefined;
  _environmentId: string;
  _organizationId: string;
  _subscriberId: string;
  transactionId: string;
  _templateId?: string | undefined;
  _digestedNotificationId?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  channels?: Array<string> | undefined;
  subscriber?: ActivityNotificationSubscriberResponseDto$Outbound | undefined;
  template?: ActivityNotificationTemplateResponseDto$Outbound | undefined;
  jobs?: Array<ActivityNotificationJobResponseDto$Outbound> | undefined;
  payload?: { [k: string]: any } | undefined;
  tags?: Array<string> | undefined;
  controls?: { [k: string]: any } | undefined;
  to?: { [k: string]: any } | undefined;
  topics?: Array<ActivityTopicDto$Outbound> | undefined;
  severity?: string | undefined;
  critical?: boolean | undefined;
  contextKeys?: Array<string> | undefined;
};

/** @internal */
export const ActivityNotificationResponseDto$outboundSchema: z.ZodType<
  ActivityNotificationResponseDto$Outbound,
  z.ZodTypeDef,
  ActivityNotificationResponseDto
> = z.object({
  id: z.string().optional(),
  environmentId: z.string(),
  organizationId: z.string(),
  subscriberId: z.string(),
  transactionId: z.string(),
  templateId: z.string().optional(),
  digestedNotificationId: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  channels: z.array(StepTypeEnum$outboundSchema).optional(),
  subscriber: ActivityNotificationSubscriberResponseDto$outboundSchema
    .optional(),
  template: ActivityNotificationTemplateResponseDto$outboundSchema.optional(),
  jobs: z.array(ActivityNotificationJobResponseDto$outboundSchema).optional(),
  payload: z.record(z.any()).optional(),
  tags: z.array(z.string()).optional(),
  controls: z.record(z.any()).optional(),
  to: z.record(z.any()).optional(),
  topics: z.array(ActivityTopicDto$outboundSchema).optional(),
  severity: SeverityLevelEnum$outboundSchema.optional(),
  critical: z.boolean().optional(),
  contextKeys: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    environmentId: "_environmentId",
    organizationId: "_organizationId",
    subscriberId: "_subscriberId",
    templateId: "_templateId",
    digestedNotificationId: "_digestedNotificationId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNotificationResponseDto$ {
  /** @deprecated use `ActivityNotificationResponseDto$inboundSchema` instead. */
  export const inboundSchema = ActivityNotificationResponseDto$inboundSchema;
  /** @deprecated use `ActivityNotificationResponseDto$outboundSchema` instead. */
  export const outboundSchema = ActivityNotificationResponseDto$outboundSchema;
  /** @deprecated use `ActivityNotificationResponseDto$Outbound` instead. */
  export type Outbound = ActivityNotificationResponseDto$Outbound;
}

export function activityNotificationResponseDtoToJSON(
  activityNotificationResponseDto: ActivityNotificationResponseDto,
): string {
  return JSON.stringify(
    ActivityNotificationResponseDto$outboundSchema.parse(
      activityNotificationResponseDto,
    ),
  );
}

export function activityNotificationResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<ActivityNotificationResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityNotificationResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityNotificationResponseDto' from JSON`,
  );
}
