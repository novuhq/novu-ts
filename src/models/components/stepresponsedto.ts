/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ControlsMetadataDto,
  ControlsMetadataDto$inboundSchema,
  ControlsMetadataDto$Outbound,
  ControlsMetadataDto$outboundSchema,
} from "./controlsmetadatadto.js";
import {
  StepIssuesDto,
  StepIssuesDto$inboundSchema,
  StepIssuesDto$Outbound,
  StepIssuesDto$outboundSchema,
} from "./stepissuesdto.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";
import {
  WorkflowOriginEnum,
  WorkflowOriginEnum$inboundSchema,
  WorkflowOriginEnum$outboundSchema,
} from "./workfloworiginenum.js";

/**
 * Slug of the step
 */
export type StepResponseDtoSlug = {};

export type StepResponseDto = {
  /**
   * Controls metadata for the step
   */
  controls: ControlsMetadataDto;
  /**
   * Control values for the step (alias for controls.values)
   */
  controlValues?: { [k: string]: any } | undefined;
  /**
   * JSON Schema for variables, follows the JSON Schema standard
   */
  variables: { [k: string]: any };
  /**
   * Unique identifier of the step
   */
  stepId: string;
  /**
   * Database identifier of the step
   */
  id: string;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Slug of the step
   */
  slug: StepResponseDtoSlug;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Origin of the workflow
   */
  origin: WorkflowOriginEnum;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Workflow database identifier
   */
  workflowDatabaseId: string;
  /**
   * Issues associated with the step
   */
  issues?: StepIssuesDto | undefined;
};

/** @internal */
export const StepResponseDtoSlug$inboundSchema: z.ZodType<
  StepResponseDtoSlug,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type StepResponseDtoSlug$Outbound = {};

/** @internal */
export const StepResponseDtoSlug$outboundSchema: z.ZodType<
  StepResponseDtoSlug$Outbound,
  z.ZodTypeDef,
  StepResponseDtoSlug
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepResponseDtoSlug$ {
  /** @deprecated use `StepResponseDtoSlug$inboundSchema` instead. */
  export const inboundSchema = StepResponseDtoSlug$inboundSchema;
  /** @deprecated use `StepResponseDtoSlug$outboundSchema` instead. */
  export const outboundSchema = StepResponseDtoSlug$outboundSchema;
  /** @deprecated use `StepResponseDtoSlug$Outbound` instead. */
  export type Outbound = StepResponseDtoSlug$Outbound;
}

export function stepResponseDtoSlugToJSON(
  stepResponseDtoSlug: StepResponseDtoSlug,
): string {
  return JSON.stringify(
    StepResponseDtoSlug$outboundSchema.parse(stepResponseDtoSlug),
  );
}

export function stepResponseDtoSlugFromJSON(
  jsonString: string,
): SafeParseResult<StepResponseDtoSlug, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepResponseDtoSlug$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepResponseDtoSlug' from JSON`,
  );
}

/** @internal */
export const StepResponseDto$inboundSchema: z.ZodType<
  StepResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  controls: ControlsMetadataDto$inboundSchema,
  controlValues: z.record(z.any()).optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  _id: z.string(),
  name: z.string(),
  slug: z.lazy(() => StepResponseDtoSlug$inboundSchema),
  type: StepTypeEnum$inboundSchema,
  origin: WorkflowOriginEnum$inboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type StepResponseDto$Outbound = {
  controls: ControlsMetadataDto$Outbound;
  controlValues?: { [k: string]: any } | undefined;
  variables: { [k: string]: any };
  stepId: string;
  _id: string;
  name: string;
  slug: StepResponseDtoSlug$Outbound;
  type: string;
  origin: string;
  workflowId: string;
  workflowDatabaseId: string;
  issues?: StepIssuesDto$Outbound | undefined;
};

/** @internal */
export const StepResponseDto$outboundSchema: z.ZodType<
  StepResponseDto$Outbound,
  z.ZodTypeDef,
  StepResponseDto
> = z.object({
  controls: ControlsMetadataDto$outboundSchema,
  controlValues: z.record(z.any()).optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  id: z.string(),
  name: z.string(),
  slug: z.lazy(() => StepResponseDtoSlug$outboundSchema),
  type: StepTypeEnum$outboundSchema,
  origin: WorkflowOriginEnum$outboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepResponseDto$ {
  /** @deprecated use `StepResponseDto$inboundSchema` instead. */
  export const inboundSchema = StepResponseDto$inboundSchema;
  /** @deprecated use `StepResponseDto$outboundSchema` instead. */
  export const outboundSchema = StepResponseDto$outboundSchema;
  /** @deprecated use `StepResponseDto$Outbound` instead. */
  export type Outbound = StepResponseDto$Outbound;
}

export function stepResponseDtoToJSON(
  stepResponseDto: StepResponseDto,
): string {
  return JSON.stringify(StepResponseDto$outboundSchema.parse(stepResponseDto));
}

export function stepResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<StepResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepResponseDto' from JSON`,
  );
}
