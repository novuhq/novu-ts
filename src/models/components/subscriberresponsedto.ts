/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    ChannelSettings,
    ChannelSettings$inboundSchema,
    ChannelSettings$Outbound,
    ChannelSettings$outboundSchema,
} from "./channelsettings.js";
import * as z from "zod";

export type SubscriberResponseDto = {
    v?: number | undefined;
    environmentId: string;
    /**
     * The internal id novu generated for your subscriber, this is not the subscriberId matching your query. See `subscriberId` for that
     */
    id?: string | undefined;
    organizationId: string;
    avatar?: string | undefined;
    /**
     * Channels settings for subscriber
     */
    channels?: Array<ChannelSettings> | undefined;
    createdAt: string;
    deleted: boolean;
    email?: string | undefined;
    firstName?: string | undefined;
    isOnline?: boolean | undefined;
    lastName?: string | undefined;
    lastOnlineAt?: string | undefined;
    locale?: string | undefined;
    phone?: string | undefined;
    /**
     * The internal identifier you used to create this subscriber, usually correlates to the id the user in your systems
     */
    subscriberId: string;
    updatedAt: string;
};

/** @internal */
export const SubscriberResponseDto$inboundSchema: z.ZodType<
    SubscriberResponseDto,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        __v: z.number().optional(),
        _environmentId: z.string(),
        _id: z.string().optional(),
        _organizationId: z.string(),
        avatar: z.string().optional(),
        channels: z.array(ChannelSettings$inboundSchema).optional(),
        createdAt: z.string(),
        deleted: z.boolean(),
        email: z.string().optional(),
        firstName: z.string().optional(),
        isOnline: z.boolean().optional(),
        lastName: z.string().optional(),
        lastOnlineAt: z.string().optional(),
        locale: z.string().optional(),
        phone: z.string().optional(),
        subscriberId: z.string(),
        updatedAt: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            __v: "v",
            _environmentId: "environmentId",
            _id: "id",
            _organizationId: "organizationId",
        });
    });

/** @internal */
export type SubscriberResponseDto$Outbound = {
    __v?: number | undefined;
    _environmentId: string;
    _id?: string | undefined;
    _organizationId: string;
    avatar?: string | undefined;
    channels?: Array<ChannelSettings$Outbound> | undefined;
    createdAt: string;
    deleted: boolean;
    email?: string | undefined;
    firstName?: string | undefined;
    isOnline?: boolean | undefined;
    lastName?: string | undefined;
    lastOnlineAt?: string | undefined;
    locale?: string | undefined;
    phone?: string | undefined;
    subscriberId: string;
    updatedAt: string;
};

/** @internal */
export const SubscriberResponseDto$outboundSchema: z.ZodType<
    SubscriberResponseDto$Outbound,
    z.ZodTypeDef,
    SubscriberResponseDto
> = z
    .object({
        v: z.number().optional(),
        environmentId: z.string(),
        id: z.string().optional(),
        organizationId: z.string(),
        avatar: z.string().optional(),
        channels: z.array(ChannelSettings$outboundSchema).optional(),
        createdAt: z.string(),
        deleted: z.boolean(),
        email: z.string().optional(),
        firstName: z.string().optional(),
        isOnline: z.boolean().optional(),
        lastName: z.string().optional(),
        lastOnlineAt: z.string().optional(),
        locale: z.string().optional(),
        phone: z.string().optional(),
        subscriberId: z.string(),
        updatedAt: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            v: "__v",
            environmentId: "_environmentId",
            id: "_id",
            organizationId: "_organizationId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberResponseDto$ {
    /** @deprecated use `SubscriberResponseDto$inboundSchema` instead. */
    export const inboundSchema = SubscriberResponseDto$inboundSchema;
    /** @deprecated use `SubscriberResponseDto$outboundSchema` instead. */
    export const outboundSchema = SubscriberResponseDto$outboundSchema;
    /** @deprecated use `SubscriberResponseDto$Outbound` instead. */
    export type Outbound = SubscriberResponseDto$Outbound;
}
