/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChannelSettings,
  ChannelSettings$inboundSchema,
  ChannelSettings$Outbound,
  ChannelSettings$outboundSchema,
} from "./channelsettings.js";

export type SubscriberResponseDto = {
  /**
   * The internal id novu generated for your subscriber, this is not the subscriberId matching your query. See `subscriberId` for that
   */
  id?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  locale?: string | undefined;
  /**
   * The internal identifier you used to create this subscriber, usually correlates to the id the user in your systems
   */
  subscriberId: string;
  /**
   * Channels settings for subscriber
   */
  channels?: Array<ChannelSettings> | undefined;
  /**
   * Topics that subscriber belongs to
   */
  topics?: Array<string> | undefined;
  isOnline?: boolean | undefined;
  lastOnlineAt?: string | undefined;
  organizationId: string;
  environmentId: string;
  deleted: boolean;
  createdAt: string;
  updatedAt: string;
  v?: number | undefined;
};

/** @internal */
export const SubscriberResponseDto$inboundSchema: z.ZodType<
  SubscriberResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  locale: z.string().optional(),
  subscriberId: z.string(),
  channels: z.array(ChannelSettings$inboundSchema).optional(),
  topics: z.array(z.string()).optional(),
  isOnline: z.boolean().optional(),
  lastOnlineAt: z.string().optional(),
  _organizationId: z.string(),
  _environmentId: z.string(),
  deleted: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  __v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_organizationId": "organizationId",
    "_environmentId": "environmentId",
    "__v": "v",
  });
});

/** @internal */
export type SubscriberResponseDto$Outbound = {
  _id?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  avatar?: string | undefined;
  locale?: string | undefined;
  subscriberId: string;
  channels?: Array<ChannelSettings$Outbound> | undefined;
  topics?: Array<string> | undefined;
  isOnline?: boolean | undefined;
  lastOnlineAt?: string | undefined;
  _organizationId: string;
  _environmentId: string;
  deleted: boolean;
  createdAt: string;
  updatedAt: string;
  __v?: number | undefined;
};

/** @internal */
export const SubscriberResponseDto$outboundSchema: z.ZodType<
  SubscriberResponseDto$Outbound,
  z.ZodTypeDef,
  SubscriberResponseDto
> = z.object({
  id: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  avatar: z.string().optional(),
  locale: z.string().optional(),
  subscriberId: z.string(),
  channels: z.array(ChannelSettings$outboundSchema).optional(),
  topics: z.array(z.string()).optional(),
  isOnline: z.boolean().optional(),
  lastOnlineAt: z.string().optional(),
  organizationId: z.string(),
  environmentId: z.string(),
  deleted: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  v: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    organizationId: "_organizationId",
    environmentId: "_environmentId",
    v: "__v",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberResponseDto$ {
  /** @deprecated use `SubscriberResponseDto$inboundSchema` instead. */
  export const inboundSchema = SubscriberResponseDto$inboundSchema;
  /** @deprecated use `SubscriberResponseDto$outboundSchema` instead. */
  export const outboundSchema = SubscriberResponseDto$outboundSchema;
  /** @deprecated use `SubscriberResponseDto$Outbound` instead. */
  export type Outbound = SubscriberResponseDto$Outbound;
}

export function subscriberResponseDtoToJSON(
  subscriberResponseDto: SubscriberResponseDto,
): string {
  return JSON.stringify(
    SubscriberResponseDto$outboundSchema.parse(subscriberResponseDto),
  );
}

export function subscriberResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<SubscriberResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriberResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriberResponseDto' from JSON`,
  );
}
