/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LayoutPreviewPayloadDto,
  LayoutPreviewPayloadDto$inboundSchema,
  LayoutPreviewPayloadDto$Outbound,
  LayoutPreviewPayloadDto$outboundSchema,
} from "./layoutpreviewpayloaddto.js";

export type LayoutPreviewRequestDto = {
  /**
   * Optional control values for layout preview
   */
  controlValues?: { [k: string]: any } | undefined;
  /**
   * Optional payload for layout preview
   */
  previewPayload?: LayoutPreviewPayloadDto | undefined;
};

/** @internal */
export const LayoutPreviewRequestDto$inboundSchema: z.ZodType<
  LayoutPreviewRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  controlValues: z.record(z.any()).optional(),
  previewPayload: LayoutPreviewPayloadDto$inboundSchema.optional(),
});

/** @internal */
export type LayoutPreviewRequestDto$Outbound = {
  controlValues?: { [k: string]: any } | undefined;
  previewPayload?: LayoutPreviewPayloadDto$Outbound | undefined;
};

/** @internal */
export const LayoutPreviewRequestDto$outboundSchema: z.ZodType<
  LayoutPreviewRequestDto$Outbound,
  z.ZodTypeDef,
  LayoutPreviewRequestDto
> = z.object({
  controlValues: z.record(z.any()).optional(),
  previewPayload: LayoutPreviewPayloadDto$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutPreviewRequestDto$ {
  /** @deprecated use `LayoutPreviewRequestDto$inboundSchema` instead. */
  export const inboundSchema = LayoutPreviewRequestDto$inboundSchema;
  /** @deprecated use `LayoutPreviewRequestDto$outboundSchema` instead. */
  export const outboundSchema = LayoutPreviewRequestDto$outboundSchema;
  /** @deprecated use `LayoutPreviewRequestDto$Outbound` instead. */
  export type Outbound = LayoutPreviewRequestDto$Outbound;
}

export function layoutPreviewRequestDtoToJSON(
  layoutPreviewRequestDto: LayoutPreviewRequestDto,
): string {
  return JSON.stringify(
    LayoutPreviewRequestDto$outboundSchema.parse(layoutPreviewRequestDto),
  );
}

export function layoutPreviewRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<LayoutPreviewRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutPreviewRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutPreviewRequestDto' from JSON`,
  );
}
