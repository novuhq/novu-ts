/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of the delay. Currently only 'regular' is supported by the schema.
 */
export const Type = {
  Regular: "regular",
} as const;
/**
 * Type of the delay. Currently only 'regular' is supported by the schema.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * Unit of time for the delay amount.
 */
export const DelayControlDtoUnit = {
  Seconds: "seconds",
  Minutes: "minutes",
  Hours: "hours",
  Days: "days",
  Weeks: "weeks",
  Months: "months",
} as const;
/**
 * Unit of time for the delay amount.
 */
export type DelayControlDtoUnit = ClosedEnum<typeof DelayControlDtoUnit>;

export type DelayControlDto = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * Type of the delay. Currently only 'regular' is supported by the schema.
   */
  type?: Type | undefined;
  /**
   * Amount of time to delay.
   */
  amount: number;
  /**
   * Unit of time for the delay amount.
   */
  unit: DelayControlDtoUnit;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const DelayControlDtoUnit$inboundSchema: z.ZodNativeEnum<
  typeof DelayControlDtoUnit
> = z.nativeEnum(DelayControlDtoUnit);

/** @internal */
export const DelayControlDtoUnit$outboundSchema: z.ZodNativeEnum<
  typeof DelayControlDtoUnit
> = DelayControlDtoUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DelayControlDtoUnit$ {
  /** @deprecated use `DelayControlDtoUnit$inboundSchema` instead. */
  export const inboundSchema = DelayControlDtoUnit$inboundSchema;
  /** @deprecated use `DelayControlDtoUnit$outboundSchema` instead. */
  export const outboundSchema = DelayControlDtoUnit$outboundSchema;
}

/** @internal */
export const DelayControlDto$inboundSchema: z.ZodType<
  DelayControlDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.record(z.any()).optional(),
  type: Type$inboundSchema.default("regular"),
  amount: z.number(),
  unit: DelayControlDtoUnit$inboundSchema,
});

/** @internal */
export type DelayControlDto$Outbound = {
  skip?: { [k: string]: any } | undefined;
  type: string;
  amount: number;
  unit: string;
};

/** @internal */
export const DelayControlDto$outboundSchema: z.ZodType<
  DelayControlDto$Outbound,
  z.ZodTypeDef,
  DelayControlDto
> = z.object({
  skip: z.record(z.any()).optional(),
  type: Type$outboundSchema.default("regular"),
  amount: z.number(),
  unit: DelayControlDtoUnit$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DelayControlDto$ {
  /** @deprecated use `DelayControlDto$inboundSchema` instead. */
  export const inboundSchema = DelayControlDto$inboundSchema;
  /** @deprecated use `DelayControlDto$outboundSchema` instead. */
  export const outboundSchema = DelayControlDto$outboundSchema;
  /** @deprecated use `DelayControlDto$Outbound` instead. */
  export type Outbound = DelayControlDto$Outbound;
}

export function delayControlDtoToJSON(
  delayControlDto: DelayControlDto,
): string {
  return JSON.stringify(DelayControlDto$outboundSchema.parse(delayControlDto));
}

export function delayControlDtoFromJSON(
  jsonString: string,
): SafeParseResult<DelayControlDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DelayControlDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DelayControlDto' from JSON`,
  );
}
