/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type ApiKey = {
    userId: string;
    key: string;
};

/** @internal */
export const ApiKey$inboundSchema: z.ZodType<ApiKey, z.ZodTypeDef, unknown> = z
    .object({
        _userId: z.string(),
        key: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            _userId: "userId",
        });
    });

/** @internal */
export type ApiKey$Outbound = {
    _userId: string;
    key: string;
};

/** @internal */
export const ApiKey$outboundSchema: z.ZodType<ApiKey$Outbound, z.ZodTypeDef, ApiKey> = z
    .object({
        userId: z.string(),
        key: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            userId: "_userId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKey$ {
    /** @deprecated use `ApiKey$inboundSchema` instead. */
    export const inboundSchema = ApiKey$inboundSchema;
    /** @deprecated use `ApiKey$outboundSchema` instead. */
    export const outboundSchema = ApiKey$outboundSchema;
    /** @deprecated use `ApiKey$Outbound` instead. */
    export type Outbound = ApiKey$Outbound;
}
