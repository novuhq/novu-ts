/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Additional custom data for the subscriber
 */
export type Data = {};

export type PatchSubscriberRequestDto = {
  /**
   * First name of the subscriber
   */
  firstName?: string | null | undefined;
  /**
   * Last name of the subscriber
   */
  lastName?: string | null | undefined;
  /**
   * Email address of the subscriber
   */
  email?: string | null | undefined;
  /**
   * Phone number of the subscriber
   */
  phone?: string | null | undefined;
  /**
   * Avatar URL or identifier
   */
  avatar?: string | null | undefined;
  /**
   * Timezone of the subscriber
   */
  timezone?: string | null | undefined;
  /**
   * Locale of the subscriber
   */
  locale?: string | null | undefined;
  /**
   * Additional custom data for the subscriber
   */
  data?: Data | null | undefined;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const PatchSubscriberRequestDto$inboundSchema: z.ZodType<
  PatchSubscriberRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  locale: z.nullable(z.string()).optional(),
  data: z.nullable(z.lazy(() => Data$inboundSchema)).optional(),
});

/** @internal */
export type PatchSubscriberRequestDto$Outbound = {
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
  email?: string | null | undefined;
  phone?: string | null | undefined;
  avatar?: string | null | undefined;
  timezone?: string | null | undefined;
  locale?: string | null | undefined;
  data?: Data$Outbound | null | undefined;
};

/** @internal */
export const PatchSubscriberRequestDto$outboundSchema: z.ZodType<
  PatchSubscriberRequestDto$Outbound,
  z.ZodTypeDef,
  PatchSubscriberRequestDto
> = z.object({
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  avatar: z.nullable(z.string()).optional(),
  timezone: z.nullable(z.string()).optional(),
  locale: z.nullable(z.string()).optional(),
  data: z.nullable(z.lazy(() => Data$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchSubscriberRequestDto$ {
  /** @deprecated use `PatchSubscriberRequestDto$inboundSchema` instead. */
  export const inboundSchema = PatchSubscriberRequestDto$inboundSchema;
  /** @deprecated use `PatchSubscriberRequestDto$outboundSchema` instead. */
  export const outboundSchema = PatchSubscriberRequestDto$outboundSchema;
  /** @deprecated use `PatchSubscriberRequestDto$Outbound` instead. */
  export type Outbound = PatchSubscriberRequestDto$Outbound;
}

export function patchSubscriberRequestDtoToJSON(
  patchSubscriberRequestDto: PatchSubscriberRequestDto,
): string {
  return JSON.stringify(
    PatchSubscriberRequestDto$outboundSchema.parse(patchSubscriberRequestDto),
  );
}

export function patchSubscriberRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<PatchSubscriberRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchSubscriberRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchSubscriberRequestDto' from JSON`,
  );
}
