/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SyncWorkflowDto = {
  /**
   * Target environment identifier to sync the workflow to
   */
  targetEnvironmentId: string;
};

/** @internal */
export const SyncWorkflowDto$inboundSchema: z.ZodType<
  SyncWorkflowDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  targetEnvironmentId: z.string(),
});

/** @internal */
export type SyncWorkflowDto$Outbound = {
  targetEnvironmentId: string;
};

/** @internal */
export const SyncWorkflowDto$outboundSchema: z.ZodType<
  SyncWorkflowDto$Outbound,
  z.ZodTypeDef,
  SyncWorkflowDto
> = z.object({
  targetEnvironmentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyncWorkflowDto$ {
  /** @deprecated use `SyncWorkflowDto$inboundSchema` instead. */
  export const inboundSchema = SyncWorkflowDto$inboundSchema;
  /** @deprecated use `SyncWorkflowDto$outboundSchema` instead. */
  export const outboundSchema = SyncWorkflowDto$outboundSchema;
  /** @deprecated use `SyncWorkflowDto$Outbound` instead. */
  export type Outbound = SyncWorkflowDto$Outbound;
}

export function syncWorkflowDtoToJSON(
  syncWorkflowDto: SyncWorkflowDto,
): string {
  return JSON.stringify(SyncWorkflowDto$outboundSchema.parse(syncWorkflowDto));
}

export function syncWorkflowDtoFromJSON(
  jsonString: string,
): SafeParseResult<SyncWorkflowDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyncWorkflowDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyncWorkflowDto' from JSON`,
  );
}
