/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageTemplateDto,
  MessageTemplateDto$inboundSchema,
  MessageTemplateDto$Outbound,
  MessageTemplateDto$outboundSchema,
} from "./messagetemplatedto.js";
import {
  StepFilterDto,
  StepFilterDto$inboundSchema,
  StepFilterDto$Outbound,
  StepFilterDto$outboundSchema,
} from "./stepfilterdto.js";

/**
 * Reply callback settings
 */
export type ActivityNotificationStepResponseDtoReplyCallback = {};

/**
 * Control variables
 */
export type ControlVariables = {};

/**
 * Metadata for the workflow step
 */
export type Metadata = {};

/**
 * Step issues
 */
export type Issues = {};

export type ActivityNotificationStepResponseDto = {
  /**
   * Unique identifier of the step
   */
  id: string;
  /**
   * Whether the step is active or not
   */
  active: boolean;
  /**
   * Reply callback settings
   */
  replyCallback?: ActivityNotificationStepResponseDtoReplyCallback | undefined;
  /**
   * Control variables
   */
  controlVariables?: ControlVariables | undefined;
  /**
   * Metadata for the workflow step
   */
  metadata?: Metadata | undefined;
  /**
   * Step issues
   */
  issues?: Issues | undefined;
  /**
   * Filter criteria for the step
   */
  filters: Array<StepFilterDto>;
  /**
   * Optional template for the step
   */
  template?: MessageTemplateDto | undefined;
  /**
   * Variants of the step
   */
  variants?: Array<ActivityNotificationStepResponseDto> | undefined;
  /**
   * The identifier for the template associated with this step
   */
  templateId: string;
  /**
   * The name of the step
   */
  name?: string | undefined;
  /**
   * The unique identifier for the parent step
   */
  parentId?: string | null | undefined;
};

/** @internal */
export const ActivityNotificationStepResponseDtoReplyCallback$inboundSchema:
  z.ZodType<
    ActivityNotificationStepResponseDtoReplyCallback,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type ActivityNotificationStepResponseDtoReplyCallback$Outbound = {};

/** @internal */
export const ActivityNotificationStepResponseDtoReplyCallback$outboundSchema:
  z.ZodType<
    ActivityNotificationStepResponseDtoReplyCallback$Outbound,
    z.ZodTypeDef,
    ActivityNotificationStepResponseDtoReplyCallback
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNotificationStepResponseDtoReplyCallback$ {
  /** @deprecated use `ActivityNotificationStepResponseDtoReplyCallback$inboundSchema` instead. */
  export const inboundSchema =
    ActivityNotificationStepResponseDtoReplyCallback$inboundSchema;
  /** @deprecated use `ActivityNotificationStepResponseDtoReplyCallback$outboundSchema` instead. */
  export const outboundSchema =
    ActivityNotificationStepResponseDtoReplyCallback$outboundSchema;
  /** @deprecated use `ActivityNotificationStepResponseDtoReplyCallback$Outbound` instead. */
  export type Outbound =
    ActivityNotificationStepResponseDtoReplyCallback$Outbound;
}

export function activityNotificationStepResponseDtoReplyCallbackToJSON(
  activityNotificationStepResponseDtoReplyCallback:
    ActivityNotificationStepResponseDtoReplyCallback,
): string {
  return JSON.stringify(
    ActivityNotificationStepResponseDtoReplyCallback$outboundSchema.parse(
      activityNotificationStepResponseDtoReplyCallback,
    ),
  );
}

export function activityNotificationStepResponseDtoReplyCallbackFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivityNotificationStepResponseDtoReplyCallback,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivityNotificationStepResponseDtoReplyCallback$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivityNotificationStepResponseDtoReplyCallback' from JSON`,
  );
}

/** @internal */
export const ControlVariables$inboundSchema: z.ZodType<
  ControlVariables,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ControlVariables$Outbound = {};

/** @internal */
export const ControlVariables$outboundSchema: z.ZodType<
  ControlVariables$Outbound,
  z.ZodTypeDef,
  ControlVariables
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ControlVariables$ {
  /** @deprecated use `ControlVariables$inboundSchema` instead. */
  export const inboundSchema = ControlVariables$inboundSchema;
  /** @deprecated use `ControlVariables$outboundSchema` instead. */
  export const outboundSchema = ControlVariables$outboundSchema;
  /** @deprecated use `ControlVariables$Outbound` instead. */
  export type Outbound = ControlVariables$Outbound;
}

export function controlVariablesToJSON(
  controlVariables: ControlVariables,
): string {
  return JSON.stringify(
    ControlVariables$outboundSchema.parse(controlVariables),
  );
}

export function controlVariablesFromJSON(
  jsonString: string,
): SafeParseResult<ControlVariables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ControlVariables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ControlVariables' from JSON`,
  );
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Metadata$Outbound = {};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const Issues$inboundSchema: z.ZodType<Issues, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Issues$Outbound = {};

/** @internal */
export const Issues$outboundSchema: z.ZodType<
  Issues$Outbound,
  z.ZodTypeDef,
  Issues
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Issues$ {
  /** @deprecated use `Issues$inboundSchema` instead. */
  export const inboundSchema = Issues$inboundSchema;
  /** @deprecated use `Issues$outboundSchema` instead. */
  export const outboundSchema = Issues$outboundSchema;
  /** @deprecated use `Issues$Outbound` instead. */
  export type Outbound = Issues$Outbound;
}

export function issuesToJSON(issues: Issues): string {
  return JSON.stringify(Issues$outboundSchema.parse(issues));
}

export function issuesFromJSON(
  jsonString: string,
): SafeParseResult<Issues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Issues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Issues' from JSON`,
  );
}

/** @internal */
export const ActivityNotificationStepResponseDto$inboundSchema: z.ZodType<
  ActivityNotificationStepResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  active: z.boolean(),
  replyCallback: z.lazy(() =>
    ActivityNotificationStepResponseDtoReplyCallback$inboundSchema
  ).optional(),
  controlVariables: z.lazy(() => ControlVariables$inboundSchema).optional(),
  metadata: z.lazy(() => Metadata$inboundSchema).optional(),
  issues: z.lazy(() => Issues$inboundSchema).optional(),
  filters: z.array(StepFilterDto$inboundSchema),
  template: MessageTemplateDto$inboundSchema.optional(),
  variants: z.array(
    z.lazy(() => ActivityNotificationStepResponseDto$inboundSchema),
  ).optional(),
  _templateId: z.string(),
  name: z.string().optional(),
  _parentId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_templateId": "templateId",
    "_parentId": "parentId",
  });
});

/** @internal */
export type ActivityNotificationStepResponseDto$Outbound = {
  _id: string;
  active: boolean;
  replyCallback?:
    | ActivityNotificationStepResponseDtoReplyCallback$Outbound
    | undefined;
  controlVariables?: ControlVariables$Outbound | undefined;
  metadata?: Metadata$Outbound | undefined;
  issues?: Issues$Outbound | undefined;
  filters: Array<StepFilterDto$Outbound>;
  template?: MessageTemplateDto$Outbound | undefined;
  variants?: Array<ActivityNotificationStepResponseDto$Outbound> | undefined;
  _templateId: string;
  name?: string | undefined;
  _parentId?: string | null | undefined;
};

/** @internal */
export const ActivityNotificationStepResponseDto$outboundSchema: z.ZodType<
  ActivityNotificationStepResponseDto$Outbound,
  z.ZodTypeDef,
  ActivityNotificationStepResponseDto
> = z.object({
  id: z.string(),
  active: z.boolean(),
  replyCallback: z.lazy(() =>
    ActivityNotificationStepResponseDtoReplyCallback$outboundSchema
  ).optional(),
  controlVariables: z.lazy(() => ControlVariables$outboundSchema).optional(),
  metadata: z.lazy(() => Metadata$outboundSchema).optional(),
  issues: z.lazy(() => Issues$outboundSchema).optional(),
  filters: z.array(StepFilterDto$outboundSchema),
  template: MessageTemplateDto$outboundSchema.optional(),
  variants: z.array(
    z.lazy(() => ActivityNotificationStepResponseDto$outboundSchema),
  ).optional(),
  templateId: z.string(),
  name: z.string().optional(),
  parentId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    templateId: "_templateId",
    parentId: "_parentId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNotificationStepResponseDto$ {
  /** @deprecated use `ActivityNotificationStepResponseDto$inboundSchema` instead. */
  export const inboundSchema =
    ActivityNotificationStepResponseDto$inboundSchema;
  /** @deprecated use `ActivityNotificationStepResponseDto$outboundSchema` instead. */
  export const outboundSchema =
    ActivityNotificationStepResponseDto$outboundSchema;
  /** @deprecated use `ActivityNotificationStepResponseDto$Outbound` instead. */
  export type Outbound = ActivityNotificationStepResponseDto$Outbound;
}

export function activityNotificationStepResponseDtoToJSON(
  activityNotificationStepResponseDto: ActivityNotificationStepResponseDto,
): string {
  return JSON.stringify(
    ActivityNotificationStepResponseDto$outboundSchema.parse(
      activityNotificationStepResponseDto,
    ),
  );
}

export function activityNotificationStepResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<ActivityNotificationStepResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ActivityNotificationStepResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityNotificationStepResponseDto' from JSON`,
  );
}
