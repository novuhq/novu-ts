/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TenantPayloadDtoData = {};

export type TenantPayloadDto = {
  identifier?: string | undefined;
  name?: string | undefined;
  data?: TenantPayloadDtoData | undefined;
};

/** @internal */
export const TenantPayloadDtoData$inboundSchema: z.ZodType<
  TenantPayloadDtoData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TenantPayloadDtoData$Outbound = {};

/** @internal */
export const TenantPayloadDtoData$outboundSchema: z.ZodType<
  TenantPayloadDtoData$Outbound,
  z.ZodTypeDef,
  TenantPayloadDtoData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TenantPayloadDtoData$ {
  /** @deprecated use `TenantPayloadDtoData$inboundSchema` instead. */
  export const inboundSchema = TenantPayloadDtoData$inboundSchema;
  /** @deprecated use `TenantPayloadDtoData$outboundSchema` instead. */
  export const outboundSchema = TenantPayloadDtoData$outboundSchema;
  /** @deprecated use `TenantPayloadDtoData$Outbound` instead. */
  export type Outbound = TenantPayloadDtoData$Outbound;
}

export function tenantPayloadDtoDataToJSON(
  tenantPayloadDtoData: TenantPayloadDtoData,
): string {
  return JSON.stringify(
    TenantPayloadDtoData$outboundSchema.parse(tenantPayloadDtoData),
  );
}

export function tenantPayloadDtoDataFromJSON(
  jsonString: string,
): SafeParseResult<TenantPayloadDtoData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TenantPayloadDtoData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TenantPayloadDtoData' from JSON`,
  );
}

/** @internal */
export const TenantPayloadDto$inboundSchema: z.ZodType<
  TenantPayloadDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  identifier: z.string().optional(),
  name: z.string().optional(),
  data: z.lazy(() => TenantPayloadDtoData$inboundSchema).optional(),
});

/** @internal */
export type TenantPayloadDto$Outbound = {
  identifier?: string | undefined;
  name?: string | undefined;
  data?: TenantPayloadDtoData$Outbound | undefined;
};

/** @internal */
export const TenantPayloadDto$outboundSchema: z.ZodType<
  TenantPayloadDto$Outbound,
  z.ZodTypeDef,
  TenantPayloadDto
> = z.object({
  identifier: z.string().optional(),
  name: z.string().optional(),
  data: z.lazy(() => TenantPayloadDtoData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TenantPayloadDto$ {
  /** @deprecated use `TenantPayloadDto$inboundSchema` instead. */
  export const inboundSchema = TenantPayloadDto$inboundSchema;
  /** @deprecated use `TenantPayloadDto$outboundSchema` instead. */
  export const outboundSchema = TenantPayloadDto$outboundSchema;
  /** @deprecated use `TenantPayloadDto$Outbound` instead. */
  export type Outbound = TenantPayloadDto$Outbound;
}

export function tenantPayloadDtoToJSON(
  tenantPayloadDto: TenantPayloadDto,
): string {
  return JSON.stringify(
    TenantPayloadDto$outboundSchema.parse(tenantPayloadDto),
  );
}

export function tenantPayloadDtoFromJSON(
  jsonString: string,
): SafeParseResult<TenantPayloadDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TenantPayloadDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TenantPayloadDto' from JSON`,
  );
}
