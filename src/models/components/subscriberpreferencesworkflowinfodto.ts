/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriberPreferencesWorkflowInfoDto = {
  /**
   * Workflow slug
   */
  slug: string;
  /**
   * Unique identifier of the workflow
   */
  identifier: string;
  /**
   * Display name of the workflow
   */
  name: string;
  /**
   * last updated date
   */
  updatedAt?: string | undefined;
};

/** @internal */
export const SubscriberPreferencesWorkflowInfoDto$inboundSchema: z.ZodType<
  SubscriberPreferencesWorkflowInfoDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  identifier: z.string(),
  name: z.string(),
  updatedAt: z.string().optional(),
});

/** @internal */
export type SubscriberPreferencesWorkflowInfoDto$Outbound = {
  slug: string;
  identifier: string;
  name: string;
  updatedAt?: string | undefined;
};

/** @internal */
export const SubscriberPreferencesWorkflowInfoDto$outboundSchema: z.ZodType<
  SubscriberPreferencesWorkflowInfoDto$Outbound,
  z.ZodTypeDef,
  SubscriberPreferencesWorkflowInfoDto
> = z.object({
  slug: z.string(),
  identifier: z.string(),
  name: z.string(),
  updatedAt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberPreferencesWorkflowInfoDto$ {
  /** @deprecated use `SubscriberPreferencesWorkflowInfoDto$inboundSchema` instead. */
  export const inboundSchema =
    SubscriberPreferencesWorkflowInfoDto$inboundSchema;
  /** @deprecated use `SubscriberPreferencesWorkflowInfoDto$outboundSchema` instead. */
  export const outboundSchema =
    SubscriberPreferencesWorkflowInfoDto$outboundSchema;
  /** @deprecated use `SubscriberPreferencesWorkflowInfoDto$Outbound` instead. */
  export type Outbound = SubscriberPreferencesWorkflowInfoDto$Outbound;
}

export function subscriberPreferencesWorkflowInfoDtoToJSON(
  subscriberPreferencesWorkflowInfoDto: SubscriberPreferencesWorkflowInfoDto,
): string {
  return JSON.stringify(
    SubscriberPreferencesWorkflowInfoDto$outboundSchema.parse(
      subscriberPreferencesWorkflowInfoDto,
    ),
  );
}

export function subscriberPreferencesWorkflowInfoDtoFromJSON(
  jsonString: string,
): SafeParseResult<SubscriberPreferencesWorkflowInfoDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriberPreferencesWorkflowInfoDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriberPreferencesWorkflowInfoDto' from JSON`,
  );
}
