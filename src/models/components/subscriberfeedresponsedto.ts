/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriberFeedResponseDto = {
  /**
   * The internal ID generated by Novu for your subscriber. This ID does not match the `subscriberId` used in your queries. Refer to `subscriberId` for that identifier.
   */
  id?: string | undefined;
  /**
   * The first name of the subscriber.
   */
  firstName?: string | undefined;
  /**
   * The last name of the subscriber.
   */
  lastName?: string | undefined;
  /**
   * The URL of the subscriber's avatar image.
   */
  avatar?: string | undefined;
  /**
   * The identifier used to create this subscriber, which typically corresponds to the user ID in your system.
   */
  subscriberId: string;
};

/** @internal */
export const SubscriberFeedResponseDto$inboundSchema: z.ZodType<
  SubscriberFeedResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  avatar: z.string().optional(),
  subscriberId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type SubscriberFeedResponseDto$Outbound = {
  _id?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  avatar?: string | undefined;
  subscriberId: string;
};

/** @internal */
export const SubscriberFeedResponseDto$outboundSchema: z.ZodType<
  SubscriberFeedResponseDto$Outbound,
  z.ZodTypeDef,
  SubscriberFeedResponseDto
> = z.object({
  id: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  avatar: z.string().optional(),
  subscriberId: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberFeedResponseDto$ {
  /** @deprecated use `SubscriberFeedResponseDto$inboundSchema` instead. */
  export const inboundSchema = SubscriberFeedResponseDto$inboundSchema;
  /** @deprecated use `SubscriberFeedResponseDto$outboundSchema` instead. */
  export const outboundSchema = SubscriberFeedResponseDto$outboundSchema;
  /** @deprecated use `SubscriberFeedResponseDto$Outbound` instead. */
  export type Outbound = SubscriberFeedResponseDto$Outbound;
}

export function subscriberFeedResponseDtoToJSON(
  subscriberFeedResponseDto: SubscriberFeedResponseDto,
): string {
  return JSON.stringify(
    SubscriberFeedResponseDto$outboundSchema.parse(subscriberFeedResponseDto),
  );
}

export function subscriberFeedResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<SubscriberFeedResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriberFeedResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriberFeedResponseDto' from JSON`,
  );
}
