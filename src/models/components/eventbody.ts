/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of the event
 */
export const Status = {
  Opened: "opened",
  Rejected: "rejected",
  Sent: "sent",
  Deferred: "deferred",
  Delivered: "delivered",
  Bounced: "bounced",
  Dropped: "dropped",
  Clicked: "clicked",
  Blocked: "blocked",
  Spam: "spam",
  Unsubscribed: "unsubscribed",
  Delayed: "delayed",
  Complaint: "complaint",
  Created: "created",
  Accepted: "accepted",
  Queued: "queued",
  Sending: "sending",
  Failed: "failed",
  Undelivered: "undelivered",
  Dismissed: "dismissed",
} as const;
/**
 * Status of the event
 */
export type Status = ClosedEnum<typeof Status>;

export type EventBody = {
  /**
   * Status of the event
   */
  status: Status;
  /**
   * Date of the event
   */
  date: string;
  /**
   * External ID from the provider
   */
  externalId?: string | undefined;
  /**
   * Number of attempts
   */
  attempts?: number | undefined;
  /**
   * Response from the provider
   */
  response?: string | undefined;
  /**
   * Raw content from the provider webhook
   */
  row?: string | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const EventBody$inboundSchema: z.ZodType<
  EventBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: Status$inboundSchema,
  date: z.string(),
  externalId: z.string().optional(),
  attempts: z.number().optional(),
  response: z.string().optional(),
  row: z.string().optional(),
});

/** @internal */
export type EventBody$Outbound = {
  status: string;
  date: string;
  externalId?: string | undefined;
  attempts?: number | undefined;
  response?: string | undefined;
  row?: string | undefined;
};

/** @internal */
export const EventBody$outboundSchema: z.ZodType<
  EventBody$Outbound,
  z.ZodTypeDef,
  EventBody
> = z.object({
  status: Status$outboundSchema,
  date: z.string(),
  externalId: z.string().optional(),
  attempts: z.number().optional(),
  response: z.string().optional(),
  row: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventBody$ {
  /** @deprecated use `EventBody$inboundSchema` instead. */
  export const inboundSchema = EventBody$inboundSchema;
  /** @deprecated use `EventBody$outboundSchema` instead. */
  export const outboundSchema = EventBody$outboundSchema;
  /** @deprecated use `EventBody$Outbound` instead. */
  export type Outbound = EventBody$Outbound;
}

export function eventBodyToJSON(eventBody: EventBody): string {
  return JSON.stringify(EventBody$outboundSchema.parse(eventBody));
}

export function eventBodyFromJSON(
  jsonString: string,
): SafeParseResult<EventBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventBody' from JSON`,
  );
}
