/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Resource type
 */
export const TranslationGroupDtoResourceType = {
  Workflow: "workflow",
} as const;
/**
 * Resource type
 */
export type TranslationGroupDtoResourceType = ClosedEnum<
  typeof TranslationGroupDtoResourceType
>;

export type TranslationGroupDto = {
  /**
   * Resource identifier (slugified ID)
   */
  resourceId: string;
  /**
   * Resource type
   */
  resourceType: TranslationGroupDtoResourceType;
  /**
   * Resource name (e.g., workflow name)
   */
  resourceName: string;
  /**
   * Array of available locales for this resource
   */
  locales: Array<string>;
  /**
   * Locales that are outdated compared to the default locale (only present when there are outdated locales)
   */
  outdatedLocales?: Array<string> | undefined;
  /**
   * Creation timestamp
   */
  createdAt: string;
  /**
   * Last update timestamp
   */
  updatedAt: string;
};

/** @internal */
export const TranslationGroupDtoResourceType$inboundSchema: z.ZodNativeEnum<
  typeof TranslationGroupDtoResourceType
> = z.nativeEnum(TranslationGroupDtoResourceType);

/** @internal */
export const TranslationGroupDtoResourceType$outboundSchema: z.ZodNativeEnum<
  typeof TranslationGroupDtoResourceType
> = TranslationGroupDtoResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationGroupDtoResourceType$ {
  /** @deprecated use `TranslationGroupDtoResourceType$inboundSchema` instead. */
  export const inboundSchema = TranslationGroupDtoResourceType$inboundSchema;
  /** @deprecated use `TranslationGroupDtoResourceType$outboundSchema` instead. */
  export const outboundSchema = TranslationGroupDtoResourceType$outboundSchema;
}

/** @internal */
export const TranslationGroupDto$inboundSchema: z.ZodType<
  TranslationGroupDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string(),
  resourceType: TranslationGroupDtoResourceType$inboundSchema,
  resourceName: z.string(),
  locales: z.array(z.string()),
  outdatedLocales: z.array(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type TranslationGroupDto$Outbound = {
  resourceId: string;
  resourceType: string;
  resourceName: string;
  locales: Array<string>;
  outdatedLocales?: Array<string> | undefined;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const TranslationGroupDto$outboundSchema: z.ZodType<
  TranslationGroupDto$Outbound,
  z.ZodTypeDef,
  TranslationGroupDto
> = z.object({
  resourceId: z.string(),
  resourceType: TranslationGroupDtoResourceType$outboundSchema,
  resourceName: z.string(),
  locales: z.array(z.string()),
  outdatedLocales: z.array(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TranslationGroupDto$ {
  /** @deprecated use `TranslationGroupDto$inboundSchema` instead. */
  export const inboundSchema = TranslationGroupDto$inboundSchema;
  /** @deprecated use `TranslationGroupDto$outboundSchema` instead. */
  export const outboundSchema = TranslationGroupDto$outboundSchema;
  /** @deprecated use `TranslationGroupDto$Outbound` instead. */
  export type Outbound = TranslationGroupDto$Outbound;
}

export function translationGroupDtoToJSON(
  translationGroupDto: TranslationGroupDto,
): string {
  return JSON.stringify(
    TranslationGroupDto$outboundSchema.parse(translationGroupDto),
  );
}

export function translationGroupDtoFromJSON(
  jsonString: string,
): SafeParseResult<TranslationGroupDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TranslationGroupDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TranslationGroupDto' from JSON`,
  );
}
