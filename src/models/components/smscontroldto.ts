/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SmsControlDto = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * Content of the SMS message.
   */
  body?: string | undefined;
};

/** @internal */
export const SmsControlDto$inboundSchema: z.ZodType<
  SmsControlDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.record(z.any()).optional(),
  body: z.string().optional(),
});

/** @internal */
export type SmsControlDto$Outbound = {
  skip?: { [k: string]: any } | undefined;
  body?: string | undefined;
};

/** @internal */
export const SmsControlDto$outboundSchema: z.ZodType<
  SmsControlDto$Outbound,
  z.ZodTypeDef,
  SmsControlDto
> = z.object({
  skip: z.record(z.any()).optional(),
  body: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsControlDto$ {
  /** @deprecated use `SmsControlDto$inboundSchema` instead. */
  export const inboundSchema = SmsControlDto$inboundSchema;
  /** @deprecated use `SmsControlDto$outboundSchema` instead. */
  export const outboundSchema = SmsControlDto$outboundSchema;
  /** @deprecated use `SmsControlDto$Outbound` instead. */
  export type Outbound = SmsControlDto$Outbound;
}

export function smsControlDtoToJSON(smsControlDto: SmsControlDto): string {
  return JSON.stringify(SmsControlDto$outboundSchema.parse(smsControlDto));
}

export function smsControlDtoFromJSON(
  jsonString: string,
): SafeParseResult<SmsControlDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsControlDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsControlDto' from JSON`,
  );
}
