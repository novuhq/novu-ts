/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageResponseDto,
  MessageResponseDto$inboundSchema,
  MessageResponseDto$Outbound,
  MessageResponseDto$outboundSchema,
} from "./messageresponsedto.js";

export type MessagesResponseDto = {
  /**
   * Total number of messages available
   */
  totalCount?: number | undefined;
  /**
   * Indicates if there are more messages available
   */
  hasMore: boolean;
  /**
   * List of messages
   */
  data: Array<MessageResponseDto>;
  /**
   * Number of messages per page
   */
  pageSize: number;
  /**
   * Current page number
   */
  page: number;
};

/** @internal */
export const MessagesResponseDto$inboundSchema: z.ZodType<
  MessagesResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalCount: z.number().optional(),
  hasMore: z.boolean(),
  data: z.array(MessageResponseDto$inboundSchema),
  pageSize: z.number(),
  page: z.number(),
});

/** @internal */
export type MessagesResponseDto$Outbound = {
  totalCount?: number | undefined;
  hasMore: boolean;
  data: Array<MessageResponseDto$Outbound>;
  pageSize: number;
  page: number;
};

/** @internal */
export const MessagesResponseDto$outboundSchema: z.ZodType<
  MessagesResponseDto$Outbound,
  z.ZodTypeDef,
  MessagesResponseDto
> = z.object({
  totalCount: z.number().optional(),
  hasMore: z.boolean(),
  data: z.array(MessageResponseDto$outboundSchema),
  pageSize: z.number(),
  page: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesResponseDto$ {
  /** @deprecated use `MessagesResponseDto$inboundSchema` instead. */
  export const inboundSchema = MessagesResponseDto$inboundSchema;
  /** @deprecated use `MessagesResponseDto$outboundSchema` instead. */
  export const outboundSchema = MessagesResponseDto$outboundSchema;
  /** @deprecated use `MessagesResponseDto$Outbound` instead. */
  export type Outbound = MessagesResponseDto$Outbound;
}

export function messagesResponseDtoToJSON(
  messagesResponseDto: MessagesResponseDto,
): string {
  return JSON.stringify(
    MessagesResponseDto$outboundSchema.parse(messagesResponseDto),
  );
}

export function messagesResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<MessagesResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagesResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagesResponseDto' from JSON`,
  );
}
