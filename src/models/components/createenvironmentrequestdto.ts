/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateEnvironmentRequestDto = {
  /**
   * Name of the environment to be created
   */
  name: string;
  /**
   * MongoDB ObjectId of the parent environment (optional)
   */
  parentId?: string | undefined;
  /**
   * Hex color code for the environment
   */
  color: string;
};

/** @internal */
export const CreateEnvironmentRequestDto$inboundSchema: z.ZodType<
  CreateEnvironmentRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  parentId: z.string().optional(),
  color: z.string(),
});

/** @internal */
export type CreateEnvironmentRequestDto$Outbound = {
  name: string;
  parentId?: string | undefined;
  color: string;
};

/** @internal */
export const CreateEnvironmentRequestDto$outboundSchema: z.ZodType<
  CreateEnvironmentRequestDto$Outbound,
  z.ZodTypeDef,
  CreateEnvironmentRequestDto
> = z.object({
  name: z.string(),
  parentId: z.string().optional(),
  color: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvironmentRequestDto$ {
  /** @deprecated use `CreateEnvironmentRequestDto$inboundSchema` instead. */
  export const inboundSchema = CreateEnvironmentRequestDto$inboundSchema;
  /** @deprecated use `CreateEnvironmentRequestDto$outboundSchema` instead. */
  export const outboundSchema = CreateEnvironmentRequestDto$outboundSchema;
  /** @deprecated use `CreateEnvironmentRequestDto$Outbound` instead. */
  export type Outbound = CreateEnvironmentRequestDto$Outbound;
}

export function createEnvironmentRequestDtoToJSON(
  createEnvironmentRequestDto: CreateEnvironmentRequestDto,
): string {
  return JSON.stringify(
    CreateEnvironmentRequestDto$outboundSchema.parse(
      createEnvironmentRequestDto,
    ),
  );
}

export function createEnvironmentRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnvironmentRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnvironmentRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnvironmentRequestDto' from JSON`,
  );
}
