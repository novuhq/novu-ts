/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const On = {
    Subscriber: "subscriber",
    Payload: "payload",
} as const;
export type On = ClosedEnum<typeof On>;

export const Operator = {
    Larger: "LARGER",
    Smaller: "SMALLER",
    LargerEqual: "LARGER_EQUAL",
    SmallerEqual: "SMALLER_EQUAL",
    Equal: "EQUAL",
    NotEqual: "NOT_EQUAL",
    AllIn: "ALL_IN",
    AnyIn: "ANY_IN",
    NotIn: "NOT_IN",
    Between: "BETWEEN",
    NotBetween: "NOT_BETWEEN",
    Like: "LIKE",
    NotLike: "NOT_LIKE",
    In: "IN",
} as const;
export type Operator = ClosedEnum<typeof Operator>;

export type FieldFilterPart = {
    field: string;
    on: On;
    operator: Operator;
    value: string;
};

/** @internal */
export const On$inboundSchema: z.ZodNativeEnum<typeof On> = z.nativeEnum(On);

/** @internal */
export const On$outboundSchema: z.ZodNativeEnum<typeof On> = On$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace On$ {
    /** @deprecated use `On$inboundSchema` instead. */
    export const inboundSchema = On$inboundSchema;
    /** @deprecated use `On$outboundSchema` instead. */
    export const outboundSchema = On$outboundSchema;
}

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z.nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> = Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
    /** @deprecated use `Operator$inboundSchema` instead. */
    export const inboundSchema = Operator$inboundSchema;
    /** @deprecated use `Operator$outboundSchema` instead. */
    export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const FieldFilterPart$inboundSchema: z.ZodType<FieldFilterPart, z.ZodTypeDef, unknown> =
    z.object({
        field: z.string(),
        on: On$inboundSchema,
        operator: Operator$inboundSchema,
        value: z.string(),
    });

/** @internal */
export type FieldFilterPart$Outbound = {
    field: string;
    on: string;
    operator: string;
    value: string;
};

/** @internal */
export const FieldFilterPart$outboundSchema: z.ZodType<
    FieldFilterPart$Outbound,
    z.ZodTypeDef,
    FieldFilterPart
> = z.object({
    field: z.string(),
    on: On$outboundSchema,
    operator: Operator$outboundSchema,
    value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldFilterPart$ {
    /** @deprecated use `FieldFilterPart$inboundSchema` instead. */
    export const inboundSchema = FieldFilterPart$inboundSchema;
    /** @deprecated use `FieldFilterPart$outboundSchema` instead. */
    export const outboundSchema = FieldFilterPart$outboundSchema;
    /** @deprecated use `FieldFilterPart$Outbound` instead. */
    export type Outbound = FieldFilterPart$Outbound;
}
