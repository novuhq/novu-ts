/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Operator = {
  Larger: "LARGER",
  Smaller: "SMALLER",
  LargerEqual: "LARGER_EQUAL",
  SmallerEqual: "SMALLER_EQUAL",
  Equal: "EQUAL",
  NotEqual: "NOT_EQUAL",
  AllIn: "ALL_IN",
  AnyIn: "ANY_IN",
  NotIn: "NOT_IN",
  Between: "BETWEEN",
  NotBetween: "NOT_BETWEEN",
  Like: "LIKE",
  NotLike: "NOT_LIKE",
  In: "IN",
} as const;
export type Operator = ClosedEnum<typeof Operator>;

export const On = {
  Subscriber: "subscriber",
  Payload: "payload",
} as const;
export type On = ClosedEnum<typeof On>;

export type FieldFilterPart = {
  field: string;
  value: string;
  operator: Operator;
  on: On;
};

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const On$inboundSchema: z.ZodNativeEnum<typeof On> = z.nativeEnum(On);

/** @internal */
export const On$outboundSchema: z.ZodNativeEnum<typeof On> = On$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace On$ {
  /** @deprecated use `On$inboundSchema` instead. */
  export const inboundSchema = On$inboundSchema;
  /** @deprecated use `On$outboundSchema` instead. */
  export const outboundSchema = On$outboundSchema;
}

/** @internal */
export const FieldFilterPart$inboundSchema: z.ZodType<
  FieldFilterPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.string(),
  value: z.string(),
  operator: Operator$inboundSchema,
  on: On$inboundSchema,
});

/** @internal */
export type FieldFilterPart$Outbound = {
  field: string;
  value: string;
  operator: string;
  on: string;
};

/** @internal */
export const FieldFilterPart$outboundSchema: z.ZodType<
  FieldFilterPart$Outbound,
  z.ZodTypeDef,
  FieldFilterPart
> = z.object({
  field: z.string(),
  value: z.string(),
  operator: Operator$outboundSchema,
  on: On$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldFilterPart$ {
  /** @deprecated use `FieldFilterPart$inboundSchema` instead. */
  export const inboundSchema = FieldFilterPart$inboundSchema;
  /** @deprecated use `FieldFilterPart$outboundSchema` instead. */
  export const outboundSchema = FieldFilterPart$outboundSchema;
  /** @deprecated use `FieldFilterPart$Outbound` instead. */
  export type Outbound = FieldFilterPart$Outbound;
}

export function fieldFilterPartToJSON(
  fieldFilterPart: FieldFilterPart,
): string {
  return JSON.stringify(FieldFilterPart$outboundSchema.parse(fieldFilterPart));
}

export function fieldFilterPartFromJSON(
  jsonString: string,
): SafeParseResult<FieldFilterPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldFilterPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldFilterPart' from JSON`,
  );
}
