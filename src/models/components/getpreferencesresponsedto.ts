/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PreferenceLevelEnum,
  PreferenceLevelEnum$inboundSchema,
  PreferenceLevelEnum$outboundSchema,
} from "./preferencelevelenum.js";
import {
  SeverityLevelEnum,
  SeverityLevelEnum$inboundSchema,
  SeverityLevelEnum$outboundSchema,
} from "./severitylevelenum.js";
import {
  SubscriberPreferenceChannels,
  SubscriberPreferenceChannels$inboundSchema,
  SubscriberPreferenceChannels$Outbound,
  SubscriberPreferenceChannels$outboundSchema,
} from "./subscriberpreferencechannels.js";

/**
 * Custom data associated with the workflow
 */
export type GetPreferencesResponseDtoData = {};

/**
 * Workflow information if this is a template-level preference
 */
export type Workflow = {
  /**
   * Unique identifier of the workflow
   */
  id: string;
  /**
   * Workflow identifier used for triggering
   */
  identifier: string;
  /**
   * Human-readable name of the workflow
   */
  name: string;
  /**
   * Whether this workflow is marked as critical
   */
  critical: boolean;
  /**
   * Tags associated with the workflow
   */
  tags?: Array<string> | undefined;
  /**
   * Custom data associated with the workflow
   */
  data?: GetPreferencesResponseDtoData | undefined;
  /**
   * Severity level of the workflow
   */
  severity: SeverityLevelEnum;
};

export type GetPreferencesResponseDto = {
  /**
   * The level of the preference (global or template)
   */
  level: PreferenceLevelEnum;
  /**
   * Workflow information if this is a template-level preference
   */
  workflow?: Workflow | null | undefined;
  /**
   * Whether the preference is enabled
   */
  enabled: boolean;
  /**
   * Channel-specific preference settings
   */
  channels: SubscriberPreferenceChannels;
};

/** @internal */
export const GetPreferencesResponseDtoData$inboundSchema: z.ZodType<
  GetPreferencesResponseDtoData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetPreferencesResponseDtoData$Outbound = {};

/** @internal */
export const GetPreferencesResponseDtoData$outboundSchema: z.ZodType<
  GetPreferencesResponseDtoData$Outbound,
  z.ZodTypeDef,
  GetPreferencesResponseDtoData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPreferencesResponseDtoData$ {
  /** @deprecated use `GetPreferencesResponseDtoData$inboundSchema` instead. */
  export const inboundSchema = GetPreferencesResponseDtoData$inboundSchema;
  /** @deprecated use `GetPreferencesResponseDtoData$outboundSchema` instead. */
  export const outboundSchema = GetPreferencesResponseDtoData$outboundSchema;
  /** @deprecated use `GetPreferencesResponseDtoData$Outbound` instead. */
  export type Outbound = GetPreferencesResponseDtoData$Outbound;
}

export function getPreferencesResponseDtoDataToJSON(
  getPreferencesResponseDtoData: GetPreferencesResponseDtoData,
): string {
  return JSON.stringify(
    GetPreferencesResponseDtoData$outboundSchema.parse(
      getPreferencesResponseDtoData,
    ),
  );
}

export function getPreferencesResponseDtoDataFromJSON(
  jsonString: string,
): SafeParseResult<GetPreferencesResponseDtoData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPreferencesResponseDtoData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPreferencesResponseDtoData' from JSON`,
  );
}

/** @internal */
export const Workflow$inboundSchema: z.ZodType<
  Workflow,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  identifier: z.string(),
  name: z.string(),
  critical: z.boolean(),
  tags: z.array(z.string()).optional(),
  data: z.lazy(() => GetPreferencesResponseDtoData$inboundSchema).optional(),
  severity: SeverityLevelEnum$inboundSchema,
});

/** @internal */
export type Workflow$Outbound = {
  id: string;
  identifier: string;
  name: string;
  critical: boolean;
  tags?: Array<string> | undefined;
  data?: GetPreferencesResponseDtoData$Outbound | undefined;
  severity: string;
};

/** @internal */
export const Workflow$outboundSchema: z.ZodType<
  Workflow$Outbound,
  z.ZodTypeDef,
  Workflow
> = z.object({
  id: z.string(),
  identifier: z.string(),
  name: z.string(),
  critical: z.boolean(),
  tags: z.array(z.string()).optional(),
  data: z.lazy(() => GetPreferencesResponseDtoData$outboundSchema).optional(),
  severity: SeverityLevelEnum$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workflow$ {
  /** @deprecated use `Workflow$inboundSchema` instead. */
  export const inboundSchema = Workflow$inboundSchema;
  /** @deprecated use `Workflow$outboundSchema` instead. */
  export const outboundSchema = Workflow$outboundSchema;
  /** @deprecated use `Workflow$Outbound` instead. */
  export type Outbound = Workflow$Outbound;
}

export function workflowToJSON(workflow: Workflow): string {
  return JSON.stringify(Workflow$outboundSchema.parse(workflow));
}

export function workflowFromJSON(
  jsonString: string,
): SafeParseResult<Workflow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Workflow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Workflow' from JSON`,
  );
}

/** @internal */
export const GetPreferencesResponseDto$inboundSchema: z.ZodType<
  GetPreferencesResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: PreferenceLevelEnum$inboundSchema,
  workflow: z.nullable(z.lazy(() => Workflow$inboundSchema)).optional(),
  enabled: z.boolean(),
  channels: SubscriberPreferenceChannels$inboundSchema,
});

/** @internal */
export type GetPreferencesResponseDto$Outbound = {
  level: string;
  workflow?: Workflow$Outbound | null | undefined;
  enabled: boolean;
  channels: SubscriberPreferenceChannels$Outbound;
};

/** @internal */
export const GetPreferencesResponseDto$outboundSchema: z.ZodType<
  GetPreferencesResponseDto$Outbound,
  z.ZodTypeDef,
  GetPreferencesResponseDto
> = z.object({
  level: PreferenceLevelEnum$outboundSchema,
  workflow: z.nullable(z.lazy(() => Workflow$outboundSchema)).optional(),
  enabled: z.boolean(),
  channels: SubscriberPreferenceChannels$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPreferencesResponseDto$ {
  /** @deprecated use `GetPreferencesResponseDto$inboundSchema` instead. */
  export const inboundSchema = GetPreferencesResponseDto$inboundSchema;
  /** @deprecated use `GetPreferencesResponseDto$outboundSchema` instead. */
  export const outboundSchema = GetPreferencesResponseDto$outboundSchema;
  /** @deprecated use `GetPreferencesResponseDto$Outbound` instead. */
  export type Outbound = GetPreferencesResponseDto$Outbound;
}

export function getPreferencesResponseDtoToJSON(
  getPreferencesResponseDto: GetPreferencesResponseDto,
): string {
  return JSON.stringify(
    GetPreferencesResponseDto$outboundSchema.parse(getPreferencesResponseDto),
  );
}

export function getPreferencesResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<GetPreferencesResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPreferencesResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPreferencesResponseDto' from JSON`,
  );
}
