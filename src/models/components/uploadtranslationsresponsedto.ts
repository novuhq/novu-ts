/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadTranslationsResponseDto = {
  /**
   * Total number of files processed
   */
  totalFiles: number;
  /**
   * Number of files successfully uploaded
   */
  successfulUploads: number;
  /**
   * Number of files that failed to upload
   */
  failedUploads: number;
  /**
   * List of error messages for failed uploads
   */
  errors: Array<string>;
};

/** @internal */
export const UploadTranslationsResponseDto$inboundSchema: z.ZodType<
  UploadTranslationsResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalFiles: z.number(),
  successfulUploads: z.number(),
  failedUploads: z.number(),
  errors: z.array(z.string()),
});

/** @internal */
export type UploadTranslationsResponseDto$Outbound = {
  totalFiles: number;
  successfulUploads: number;
  failedUploads: number;
  errors: Array<string>;
};

/** @internal */
export const UploadTranslationsResponseDto$outboundSchema: z.ZodType<
  UploadTranslationsResponseDto$Outbound,
  z.ZodTypeDef,
  UploadTranslationsResponseDto
> = z.object({
  totalFiles: z.number(),
  successfulUploads: z.number(),
  failedUploads: z.number(),
  errors: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadTranslationsResponseDto$ {
  /** @deprecated use `UploadTranslationsResponseDto$inboundSchema` instead. */
  export const inboundSchema = UploadTranslationsResponseDto$inboundSchema;
  /** @deprecated use `UploadTranslationsResponseDto$outboundSchema` instead. */
  export const outboundSchema = UploadTranslationsResponseDto$outboundSchema;
  /** @deprecated use `UploadTranslationsResponseDto$Outbound` instead. */
  export type Outbound = UploadTranslationsResponseDto$Outbound;
}

export function uploadTranslationsResponseDtoToJSON(
  uploadTranslationsResponseDto: UploadTranslationsResponseDto,
): string {
  return JSON.stringify(
    UploadTranslationsResponseDto$outboundSchema.parse(
      uploadTranslationsResponseDto,
    ),
  );
}

export function uploadTranslationsResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<UploadTranslationsResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadTranslationsResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadTranslationsResponseDto' from JSON`,
  );
}
