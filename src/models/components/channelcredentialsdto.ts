/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChannelCredentialsDto = {
  /**
   * The URL for the webhook associated with the channel.
   */
  webhookUrl?: string | undefined;
  /**
   * An array of device tokens for push notifications.
   */
  deviceTokens?: Array<string> | undefined;
};

/** @internal */
export const ChannelCredentialsDto$inboundSchema: z.ZodType<
  ChannelCredentialsDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhookUrl: z.string().optional(),
  deviceTokens: z.array(z.string()).optional(),
});

/** @internal */
export type ChannelCredentialsDto$Outbound = {
  webhookUrl?: string | undefined;
  deviceTokens?: Array<string> | undefined;
};

/** @internal */
export const ChannelCredentialsDto$outboundSchema: z.ZodType<
  ChannelCredentialsDto$Outbound,
  z.ZodTypeDef,
  ChannelCredentialsDto
> = z.object({
  webhookUrl: z.string().optional(),
  deviceTokens: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelCredentialsDto$ {
  /** @deprecated use `ChannelCredentialsDto$inboundSchema` instead. */
  export const inboundSchema = ChannelCredentialsDto$inboundSchema;
  /** @deprecated use `ChannelCredentialsDto$outboundSchema` instead. */
  export const outboundSchema = ChannelCredentialsDto$outboundSchema;
  /** @deprecated use `ChannelCredentialsDto$Outbound` instead. */
  export type Outbound = ChannelCredentialsDto$Outbound;
}

export function channelCredentialsDtoToJSON(
  channelCredentialsDto: ChannelCredentialsDto,
): string {
  return JSON.stringify(
    ChannelCredentialsDto$outboundSchema.parse(channelCredentialsDto),
  );
}

export function channelCredentialsDtoFromJSON(
  jsonString: string,
): SafeParseResult<ChannelCredentialsDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelCredentialsDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelCredentialsDto' from JSON`,
  );
}
