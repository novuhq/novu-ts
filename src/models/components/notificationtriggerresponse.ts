/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  NotificationTriggerVariableResponse,
  NotificationTriggerVariableResponse$inboundSchema,
  NotificationTriggerVariableResponse$Outbound,
  NotificationTriggerVariableResponse$outboundSchema,
} from "./notificationtriggervariableresponse.js";
import {
  TriggerReservedVariableResponse,
  TriggerReservedVariableResponse$inboundSchema,
  TriggerReservedVariableResponse$Outbound,
  TriggerReservedVariableResponse$outboundSchema,
} from "./triggerreservedvariableresponse.js";
import {
  TriggerTypeEnum,
  TriggerTypeEnum$inboundSchema,
  TriggerTypeEnum$outboundSchema,
} from "./triggertypeenum.js";

export type NotificationTriggerResponse = {
  /**
   * The type of the trigger
   */
  type: TriggerTypeEnum;
  /**
   * The identifier of the trigger
   */
  identifier: string;
  /**
   * The variables of the trigger
   */
  variables: Array<NotificationTriggerVariableResponse>;
  /**
   * The subscriber variables of the trigger
   */
  subscriberVariables?: Array<NotificationTriggerVariableResponse> | undefined;
  /**
   * The reserved variables of the trigger
   */
  reservedVariables?: Array<TriggerReservedVariableResponse> | undefined;
};

/** @internal */
export const NotificationTriggerResponse$inboundSchema: z.ZodType<
  NotificationTriggerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TriggerTypeEnum$inboundSchema,
  identifier: z.string(),
  variables: z.array(NotificationTriggerVariableResponse$inboundSchema),
  subscriberVariables: z.array(
    NotificationTriggerVariableResponse$inboundSchema,
  ).optional(),
  reservedVariables: z.array(TriggerReservedVariableResponse$inboundSchema)
    .optional(),
});

/** @internal */
export type NotificationTriggerResponse$Outbound = {
  type: string;
  identifier: string;
  variables: Array<NotificationTriggerVariableResponse$Outbound>;
  subscriberVariables?:
    | Array<NotificationTriggerVariableResponse$Outbound>
    | undefined;
  reservedVariables?:
    | Array<TriggerReservedVariableResponse$Outbound>
    | undefined;
};

/** @internal */
export const NotificationTriggerResponse$outboundSchema: z.ZodType<
  NotificationTriggerResponse$Outbound,
  z.ZodTypeDef,
  NotificationTriggerResponse
> = z.object({
  type: TriggerTypeEnum$outboundSchema,
  identifier: z.string(),
  variables: z.array(NotificationTriggerVariableResponse$outboundSchema),
  subscriberVariables: z.array(
    NotificationTriggerVariableResponse$outboundSchema,
  ).optional(),
  reservedVariables: z.array(TriggerReservedVariableResponse$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationTriggerResponse$ {
  /** @deprecated use `NotificationTriggerResponse$inboundSchema` instead. */
  export const inboundSchema = NotificationTriggerResponse$inboundSchema;
  /** @deprecated use `NotificationTriggerResponse$outboundSchema` instead. */
  export const outboundSchema = NotificationTriggerResponse$outboundSchema;
  /** @deprecated use `NotificationTriggerResponse$Outbound` instead. */
  export type Outbound = NotificationTriggerResponse$Outbound;
}

export function notificationTriggerResponseToJSON(
  notificationTriggerResponse: NotificationTriggerResponse,
): string {
  return JSON.stringify(
    NotificationTriggerResponse$outboundSchema.parse(
      notificationTriggerResponse,
    ),
  );
}

export function notificationTriggerResponseFromJSON(
  jsonString: string,
): SafeParseResult<NotificationTriggerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationTriggerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationTriggerResponse' from JSON`,
  );
}
