/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResourceOriginEnum,
  ResourceOriginEnum$inboundSchema,
  ResourceOriginEnum$outboundSchema,
} from "./resourceoriginenum.js";
import {
  StepIssuesDto,
  StepIssuesDto$inboundSchema,
  StepIssuesDto$Outbound,
  StepIssuesDto$outboundSchema,
} from "./stepissuesdto.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";
import {
  ThrottleControlsMetadataResponseDto,
  ThrottleControlsMetadataResponseDto$inboundSchema,
  ThrottleControlsMetadataResponseDto$Outbound,
  ThrottleControlsMetadataResponseDto$outboundSchema,
} from "./throttlecontrolsmetadataresponsedto.js";

/**
 * The type of throttle window.
 */
export const ThrottleStepResponseDtoType = {
  Fixed: "fixed",
  Dynamic: "dynamic",
} as const;
/**
 * The type of throttle window.
 */
export type ThrottleStepResponseDtoType = ClosedEnum<
  typeof ThrottleStepResponseDtoType
>;

/**
 * The unit of time for the throttle window (required for fixed type).
 */
export const ThrottleStepResponseDtoUnit = {
  Minutes: "minutes",
  Hours: "hours",
  Days: "days",
} as const;
/**
 * The unit of time for the throttle window (required for fixed type).
 */
export type ThrottleStepResponseDtoUnit = ClosedEnum<
  typeof ThrottleStepResponseDtoUnit
>;

/**
 * Control values for the throttle step
 */
export type ThrottleStepResponseDtoControlValues = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * The type of throttle window.
   */
  type?: ThrottleStepResponseDtoType | undefined;
  /**
   * The amount of time for the throttle window (required for fixed type).
   */
  amount?: number | undefined;
  /**
   * The unit of time for the throttle window (required for fixed type).
   */
  unit?: ThrottleStepResponseDtoUnit | undefined;
  /**
   * Key path to retrieve dynamic window value (required for dynamic type).
   */
  dynamicKey?: string | undefined;
  /**
   * The maximum number of executions allowed within the window. Defaults to 1.
   */
  threshold?: number | undefined;
  /**
   * Optional key for grouping throttle rules. If not provided, defaults to workflow and subscriber combination.
   */
  throttleKey?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

export type ThrottleStepResponseDto = {
  /**
   * Controls metadata for the throttle step
   */
  controls: ThrottleControlsMetadataResponseDto;
  /**
   * Control values for the throttle step
   */
  controlValues?: ThrottleStepResponseDtoControlValues | undefined;
  /**
   * JSON Schema for variables, follows the JSON Schema standard
   */
  variables: { [k: string]: any };
  /**
   * Unique identifier of the step
   */
  stepId: string;
  /**
   * Database identifier of the step
   */
  id: string;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Slug of the step
   */
  slug: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Origin of the layout
   */
  origin: ResourceOriginEnum;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Workflow database identifier
   */
  workflowDatabaseId: string;
  /**
   * Issues associated with the step
   */
  issues?: StepIssuesDto | undefined;
};

/** @internal */
export const ThrottleStepResponseDtoType$inboundSchema: z.ZodNativeEnum<
  typeof ThrottleStepResponseDtoType
> = z.nativeEnum(ThrottleStepResponseDtoType);

/** @internal */
export const ThrottleStepResponseDtoType$outboundSchema: z.ZodNativeEnum<
  typeof ThrottleStepResponseDtoType
> = ThrottleStepResponseDtoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThrottleStepResponseDtoType$ {
  /** @deprecated use `ThrottleStepResponseDtoType$inboundSchema` instead. */
  export const inboundSchema = ThrottleStepResponseDtoType$inboundSchema;
  /** @deprecated use `ThrottleStepResponseDtoType$outboundSchema` instead. */
  export const outboundSchema = ThrottleStepResponseDtoType$outboundSchema;
}

/** @internal */
export const ThrottleStepResponseDtoUnit$inboundSchema: z.ZodNativeEnum<
  typeof ThrottleStepResponseDtoUnit
> = z.nativeEnum(ThrottleStepResponseDtoUnit);

/** @internal */
export const ThrottleStepResponseDtoUnit$outboundSchema: z.ZodNativeEnum<
  typeof ThrottleStepResponseDtoUnit
> = ThrottleStepResponseDtoUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThrottleStepResponseDtoUnit$ {
  /** @deprecated use `ThrottleStepResponseDtoUnit$inboundSchema` instead. */
  export const inboundSchema = ThrottleStepResponseDtoUnit$inboundSchema;
  /** @deprecated use `ThrottleStepResponseDtoUnit$outboundSchema` instead. */
  export const outboundSchema = ThrottleStepResponseDtoUnit$outboundSchema;
}

/** @internal */
export const ThrottleStepResponseDtoControlValues$inboundSchema: z.ZodType<
  ThrottleStepResponseDtoControlValues,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    skip: z.record(z.any()).optional(),
    type: ThrottleStepResponseDtoType$inboundSchema.default("fixed"),
    amount: z.number().optional(),
    unit: ThrottleStepResponseDtoUnit$inboundSchema.optional(),
    dynamicKey: z.string().optional(),
    threshold: z.number().default(1),
    throttleKey: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type ThrottleStepResponseDtoControlValues$Outbound = {
  skip?: { [k: string]: any } | undefined;
  type: string;
  amount?: number | undefined;
  unit?: string | undefined;
  dynamicKey?: string | undefined;
  threshold: number;
  throttleKey?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ThrottleStepResponseDtoControlValues$outboundSchema: z.ZodType<
  ThrottleStepResponseDtoControlValues$Outbound,
  z.ZodTypeDef,
  ThrottleStepResponseDtoControlValues
> = z.object({
  skip: z.record(z.any()).optional(),
  type: ThrottleStepResponseDtoType$outboundSchema.default("fixed"),
  amount: z.number().optional(),
  unit: ThrottleStepResponseDtoUnit$outboundSchema.optional(),
  dynamicKey: z.string().optional(),
  threshold: z.number().default(1),
  throttleKey: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThrottleStepResponseDtoControlValues$ {
  /** @deprecated use `ThrottleStepResponseDtoControlValues$inboundSchema` instead. */
  export const inboundSchema =
    ThrottleStepResponseDtoControlValues$inboundSchema;
  /** @deprecated use `ThrottleStepResponseDtoControlValues$outboundSchema` instead. */
  export const outboundSchema =
    ThrottleStepResponseDtoControlValues$outboundSchema;
  /** @deprecated use `ThrottleStepResponseDtoControlValues$Outbound` instead. */
  export type Outbound = ThrottleStepResponseDtoControlValues$Outbound;
}

export function throttleStepResponseDtoControlValuesToJSON(
  throttleStepResponseDtoControlValues: ThrottleStepResponseDtoControlValues,
): string {
  return JSON.stringify(
    ThrottleStepResponseDtoControlValues$outboundSchema.parse(
      throttleStepResponseDtoControlValues,
    ),
  );
}

export function throttleStepResponseDtoControlValuesFromJSON(
  jsonString: string,
): SafeParseResult<ThrottleStepResponseDtoControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ThrottleStepResponseDtoControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThrottleStepResponseDtoControlValues' from JSON`,
  );
}

/** @internal */
export const ThrottleStepResponseDto$inboundSchema: z.ZodType<
  ThrottleStepResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  controls: ThrottleControlsMetadataResponseDto$inboundSchema,
  controlValues: z.lazy(() =>
    ThrottleStepResponseDtoControlValues$inboundSchema
  ).optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  _id: z.string(),
  name: z.string(),
  slug: z.string(),
  type: StepTypeEnum$inboundSchema,
  origin: ResourceOriginEnum$inboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type ThrottleStepResponseDto$Outbound = {
  controls: ThrottleControlsMetadataResponseDto$Outbound;
  controlValues?: ThrottleStepResponseDtoControlValues$Outbound | undefined;
  variables: { [k: string]: any };
  stepId: string;
  _id: string;
  name: string;
  slug: string;
  type: string;
  origin: string;
  workflowId: string;
  workflowDatabaseId: string;
  issues?: StepIssuesDto$Outbound | undefined;
};

/** @internal */
export const ThrottleStepResponseDto$outboundSchema: z.ZodType<
  ThrottleStepResponseDto$Outbound,
  z.ZodTypeDef,
  ThrottleStepResponseDto
> = z.object({
  controls: ThrottleControlsMetadataResponseDto$outboundSchema,
  controlValues: z.lazy(() =>
    ThrottleStepResponseDtoControlValues$outboundSchema
  ).optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  type: StepTypeEnum$outboundSchema,
  origin: ResourceOriginEnum$outboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThrottleStepResponseDto$ {
  /** @deprecated use `ThrottleStepResponseDto$inboundSchema` instead. */
  export const inboundSchema = ThrottleStepResponseDto$inboundSchema;
  /** @deprecated use `ThrottleStepResponseDto$outboundSchema` instead. */
  export const outboundSchema = ThrottleStepResponseDto$outboundSchema;
  /** @deprecated use `ThrottleStepResponseDto$Outbound` instead. */
  export type Outbound = ThrottleStepResponseDto$Outbound;
}

export function throttleStepResponseDtoToJSON(
  throttleStepResponseDto: ThrottleStepResponseDto,
): string {
  return JSON.stringify(
    ThrottleStepResponseDto$outboundSchema.parse(throttleStepResponseDto),
  );
}

export function throttleStepResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<ThrottleStepResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ThrottleStepResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ThrottleStepResponseDto' from JSON`,
  );
}
