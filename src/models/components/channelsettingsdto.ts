/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChannelCredentials,
  ChannelCredentials$inboundSchema,
  ChannelCredentials$Outbound,
  ChannelCredentials$outboundSchema,
} from "./channelcredentials.js";

/**
 * The provider identifier for the credentials
 */
export const ChannelSettingsDtoProviderId = {
  Slack: "slack",
  Discord: "discord",
  Msteams: "msteams",
  Mattermost: "mattermost",
  Ryver: "ryver",
  Zulip: "zulip",
  GrafanaOnCall: "grafana-on-call",
  Getstream: "getstream",
  RocketChat: "rocket-chat",
  WhatsappBusiness: "whatsapp-business",
  Fcm: "fcm",
  Apns: "apns",
  Expo: "expo",
  OneSignal: "one-signal",
  Pushpad: "pushpad",
  PushWebhook: "push-webhook",
  PusherBeams: "pusher-beams",
} as const;
/**
 * The provider identifier for the credentials
 */
export type ChannelSettingsDtoProviderId = ClosedEnum<
  typeof ChannelSettingsDtoProviderId
>;

export type ChannelSettingsDto = {
  /**
   * The provider identifier for the credentials
   */
  providerId: ChannelSettingsDtoProviderId;
  /**
   * The integration identifier
   */
  integrationIdentifier?: string | undefined;
  /**
   * Credentials payload for the specified provider
   */
  credentials: ChannelCredentials;
  /**
   * The unique identifier of the integration associated with this channel.
   */
  integrationId: string;
};

/** @internal */
export const ChannelSettingsDtoProviderId$inboundSchema: z.ZodNativeEnum<
  typeof ChannelSettingsDtoProviderId
> = z.nativeEnum(ChannelSettingsDtoProviderId);

/** @internal */
export const ChannelSettingsDtoProviderId$outboundSchema: z.ZodNativeEnum<
  typeof ChannelSettingsDtoProviderId
> = ChannelSettingsDtoProviderId$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelSettingsDtoProviderId$ {
  /** @deprecated use `ChannelSettingsDtoProviderId$inboundSchema` instead. */
  export const inboundSchema = ChannelSettingsDtoProviderId$inboundSchema;
  /** @deprecated use `ChannelSettingsDtoProviderId$outboundSchema` instead. */
  export const outboundSchema = ChannelSettingsDtoProviderId$outboundSchema;
}

/** @internal */
export const ChannelSettingsDto$inboundSchema: z.ZodType<
  ChannelSettingsDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  providerId: ChannelSettingsDtoProviderId$inboundSchema,
  integrationIdentifier: z.string().optional(),
  credentials: ChannelCredentials$inboundSchema,
  _integrationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_integrationId": "integrationId",
  });
});

/** @internal */
export type ChannelSettingsDto$Outbound = {
  providerId: string;
  integrationIdentifier?: string | undefined;
  credentials: ChannelCredentials$Outbound;
  _integrationId: string;
};

/** @internal */
export const ChannelSettingsDto$outboundSchema: z.ZodType<
  ChannelSettingsDto$Outbound,
  z.ZodTypeDef,
  ChannelSettingsDto
> = z.object({
  providerId: ChannelSettingsDtoProviderId$outboundSchema,
  integrationIdentifier: z.string().optional(),
  credentials: ChannelCredentials$outboundSchema,
  integrationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    integrationId: "_integrationId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelSettingsDto$ {
  /** @deprecated use `ChannelSettingsDto$inboundSchema` instead. */
  export const inboundSchema = ChannelSettingsDto$inboundSchema;
  /** @deprecated use `ChannelSettingsDto$outboundSchema` instead. */
  export const outboundSchema = ChannelSettingsDto$outboundSchema;
  /** @deprecated use `ChannelSettingsDto$Outbound` instead. */
  export type Outbound = ChannelSettingsDto$Outbound;
}

export function channelSettingsDtoToJSON(
  channelSettingsDto: ChannelSettingsDto,
): string {
  return JSON.stringify(
    ChannelSettingsDto$outboundSchema.parse(channelSettingsDto),
  );
}

export function channelSettingsDtoFromJSON(
  jsonString: string,
): SafeParseResult<ChannelSettingsDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelSettingsDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelSettingsDto' from JSON`,
  );
}
