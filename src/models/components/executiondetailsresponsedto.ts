/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Channel = {
  InApp: "in_app",
  Email: "email",
  Sms: "sms",
  Chat: "chat",
  Push: "push",
  Digest: "digest",
  Trigger: "trigger",
  Delay: "delay",
  Custom: "custom",
} as const;
export type Channel = ClosedEnum<typeof Channel>;

export const Source = {
  Credentials: "Credentials",
  Internal: "Internal",
  Payload: "Payload",
  Webhook: "Webhook",
} as const;
export type Source = ClosedEnum<typeof Source>;

export const Status = {
  Success: "Success",
  Warning: "Warning",
  Failed: "Failed",
  Pending: "Pending",
  Queued: "Queued",
  ReadConfirmation: "ReadConfirmation",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type ExecutionDetailsResponseDto = {
  id?: string | undefined;
  organizationId: string;
  jobId: string;
  environmentId: string;
  notificationId: string;
  notificationTemplateId: string;
  subscriberId: string;
  messageId?: string | undefined;
  providerId?: string | undefined;
  transactionId: string;
  channel: Channel;
  detail: string;
  source: Source;
  status: Status;
  isTest: boolean;
  isRetry: boolean;
  createdAt?: string | undefined;
};

/** @internal */
export const Channel$inboundSchema: z.ZodNativeEnum<typeof Channel> = z
  .nativeEnum(Channel);

/** @internal */
export const Channel$outboundSchema: z.ZodNativeEnum<typeof Channel> =
  Channel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Channel$ {
  /** @deprecated use `Channel$inboundSchema` instead. */
  export const inboundSchema = Channel$inboundSchema;
  /** @deprecated use `Channel$outboundSchema` instead. */
  export const outboundSchema = Channel$outboundSchema;
}

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> = z
  .nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const ExecutionDetailsResponseDto$inboundSchema: z.ZodType<
  ExecutionDetailsResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  _organizationId: z.string(),
  _jobId: z.string(),
  _environmentId: z.string(),
  _notificationId: z.string(),
  _notificationTemplateId: z.string(),
  _subscriberId: z.string(),
  _messageId: z.string().optional(),
  providerId: z.string().optional(),
  transactionId: z.string(),
  channel: Channel$inboundSchema,
  detail: z.string(),
  source: Source$inboundSchema,
  status: Status$inboundSchema,
  isTest: z.boolean(),
  isRetry: z.boolean(),
  createdAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_organizationId": "organizationId",
    "_jobId": "jobId",
    "_environmentId": "environmentId",
    "_notificationId": "notificationId",
    "_notificationTemplateId": "notificationTemplateId",
    "_subscriberId": "subscriberId",
    "_messageId": "messageId",
  });
});

/** @internal */
export type ExecutionDetailsResponseDto$Outbound = {
  _id?: string | undefined;
  _organizationId: string;
  _jobId: string;
  _environmentId: string;
  _notificationId: string;
  _notificationTemplateId: string;
  _subscriberId: string;
  _messageId?: string | undefined;
  providerId?: string | undefined;
  transactionId: string;
  channel: string;
  detail: string;
  source: string;
  status: string;
  isTest: boolean;
  isRetry: boolean;
  createdAt?: string | undefined;
};

/** @internal */
export const ExecutionDetailsResponseDto$outboundSchema: z.ZodType<
  ExecutionDetailsResponseDto$Outbound,
  z.ZodTypeDef,
  ExecutionDetailsResponseDto
> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  jobId: z.string(),
  environmentId: z.string(),
  notificationId: z.string(),
  notificationTemplateId: z.string(),
  subscriberId: z.string(),
  messageId: z.string().optional(),
  providerId: z.string().optional(),
  transactionId: z.string(),
  channel: Channel$outboundSchema,
  detail: z.string(),
  source: Source$outboundSchema,
  status: Status$outboundSchema,
  isTest: z.boolean(),
  isRetry: z.boolean(),
  createdAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    organizationId: "_organizationId",
    jobId: "_jobId",
    environmentId: "_environmentId",
    notificationId: "_notificationId",
    notificationTemplateId: "_notificationTemplateId",
    subscriberId: "_subscriberId",
    messageId: "_messageId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecutionDetailsResponseDto$ {
  /** @deprecated use `ExecutionDetailsResponseDto$inboundSchema` instead. */
  export const inboundSchema = ExecutionDetailsResponseDto$inboundSchema;
  /** @deprecated use `ExecutionDetailsResponseDto$outboundSchema` instead. */
  export const outboundSchema = ExecutionDetailsResponseDto$outboundSchema;
  /** @deprecated use `ExecutionDetailsResponseDto$Outbound` instead. */
  export type Outbound = ExecutionDetailsResponseDto$Outbound;
}

export function executionDetailsResponseDtoToJSON(
  executionDetailsResponseDto: ExecutionDetailsResponseDto,
): string {
  return JSON.stringify(
    ExecutionDetailsResponseDto$outboundSchema.parse(
      executionDetailsResponseDto,
    ),
  );
}

export function executionDetailsResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<ExecutionDetailsResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExecutionDetailsResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExecutionDetailsResponseDto' from JSON`,
  );
}
