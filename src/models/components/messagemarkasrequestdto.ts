/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MessageId = string | Array<string>;

export const MarkAs = {
  Read: "read",
  Seen: "seen",
  Unread: "unread",
  Unseen: "unseen",
} as const;
export type MarkAs = ClosedEnum<typeof MarkAs>;

export type MessageMarkAsRequestDto = {
  messageId: string | Array<string>;
  markAs: MarkAs;
};

/** @internal */
export const MessageId$inboundSchema: z.ZodType<
  MessageId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type MessageId$Outbound = string | Array<string>;

/** @internal */
export const MessageId$outboundSchema: z.ZodType<
  MessageId$Outbound,
  z.ZodTypeDef,
  MessageId
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageId$ {
  /** @deprecated use `MessageId$inboundSchema` instead. */
  export const inboundSchema = MessageId$inboundSchema;
  /** @deprecated use `MessageId$outboundSchema` instead. */
  export const outboundSchema = MessageId$outboundSchema;
  /** @deprecated use `MessageId$Outbound` instead. */
  export type Outbound = MessageId$Outbound;
}

export function messageIdToJSON(messageId: MessageId): string {
  return JSON.stringify(MessageId$outboundSchema.parse(messageId));
}

export function messageIdFromJSON(
  jsonString: string,
): SafeParseResult<MessageId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageId' from JSON`,
  );
}

/** @internal */
export const MarkAs$inboundSchema: z.ZodNativeEnum<typeof MarkAs> = z
  .nativeEnum(MarkAs);

/** @internal */
export const MarkAs$outboundSchema: z.ZodNativeEnum<typeof MarkAs> =
  MarkAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkAs$ {
  /** @deprecated use `MarkAs$inboundSchema` instead. */
  export const inboundSchema = MarkAs$inboundSchema;
  /** @deprecated use `MarkAs$outboundSchema` instead. */
  export const outboundSchema = MarkAs$outboundSchema;
}

/** @internal */
export const MessageMarkAsRequestDto$inboundSchema: z.ZodType<
  MessageMarkAsRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.union([z.string(), z.array(z.string())]),
  markAs: MarkAs$inboundSchema,
});

/** @internal */
export type MessageMarkAsRequestDto$Outbound = {
  messageId: string | Array<string>;
  markAs: string;
};

/** @internal */
export const MessageMarkAsRequestDto$outboundSchema: z.ZodType<
  MessageMarkAsRequestDto$Outbound,
  z.ZodTypeDef,
  MessageMarkAsRequestDto
> = z.object({
  messageId: z.union([z.string(), z.array(z.string())]),
  markAs: MarkAs$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageMarkAsRequestDto$ {
  /** @deprecated use `MessageMarkAsRequestDto$inboundSchema` instead. */
  export const inboundSchema = MessageMarkAsRequestDto$inboundSchema;
  /** @deprecated use `MessageMarkAsRequestDto$outboundSchema` instead. */
  export const outboundSchema = MessageMarkAsRequestDto$outboundSchema;
  /** @deprecated use `MessageMarkAsRequestDto$Outbound` instead. */
  export type Outbound = MessageMarkAsRequestDto$Outbound;
}

export function messageMarkAsRequestDtoToJSON(
  messageMarkAsRequestDto: MessageMarkAsRequestDto,
): string {
  return JSON.stringify(
    MessageMarkAsRequestDto$outboundSchema.parse(messageMarkAsRequestDto),
  );
}

export function messageMarkAsRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<MessageMarkAsRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageMarkAsRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageMarkAsRequestDto' from JSON`,
  );
}
