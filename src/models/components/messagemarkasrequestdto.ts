/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const MessageMarkAsRequestDtoMarkAs = {
    Read: "read",
    Seen: "seen",
    Unread: "unread",
    Unseen: "unseen",
} as const;
export type MessageMarkAsRequestDtoMarkAs = ClosedEnum<typeof MessageMarkAsRequestDtoMarkAs>;

export type MessageId = string | Array<string>;

export type MessageMarkAsRequestDto = {
    markAs: MessageMarkAsRequestDtoMarkAs;
    messageId: string | Array<string>;
};

/** @internal */
export const MessageMarkAsRequestDtoMarkAs$inboundSchema: z.ZodNativeEnum<
    typeof MessageMarkAsRequestDtoMarkAs
> = z.nativeEnum(MessageMarkAsRequestDtoMarkAs);

/** @internal */
export const MessageMarkAsRequestDtoMarkAs$outboundSchema: z.ZodNativeEnum<
    typeof MessageMarkAsRequestDtoMarkAs
> = MessageMarkAsRequestDtoMarkAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageMarkAsRequestDtoMarkAs$ {
    /** @deprecated use `MessageMarkAsRequestDtoMarkAs$inboundSchema` instead. */
    export const inboundSchema = MessageMarkAsRequestDtoMarkAs$inboundSchema;
    /** @deprecated use `MessageMarkAsRequestDtoMarkAs$outboundSchema` instead. */
    export const outboundSchema = MessageMarkAsRequestDtoMarkAs$outboundSchema;
}

/** @internal */
export const MessageId$inboundSchema: z.ZodType<MessageId, z.ZodTypeDef, unknown> = z.union([
    z.string(),
    z.array(z.string()),
]);

/** @internal */
export type MessageId$Outbound = string | Array<string>;

/** @internal */
export const MessageId$outboundSchema: z.ZodType<MessageId$Outbound, z.ZodTypeDef, MessageId> =
    z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageId$ {
    /** @deprecated use `MessageId$inboundSchema` instead. */
    export const inboundSchema = MessageId$inboundSchema;
    /** @deprecated use `MessageId$outboundSchema` instead. */
    export const outboundSchema = MessageId$outboundSchema;
    /** @deprecated use `MessageId$Outbound` instead. */
    export type Outbound = MessageId$Outbound;
}

/** @internal */
export const MessageMarkAsRequestDto$inboundSchema: z.ZodType<
    MessageMarkAsRequestDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    markAs: MessageMarkAsRequestDtoMarkAs$inboundSchema,
    messageId: z.union([z.string(), z.array(z.string())]),
});

/** @internal */
export type MessageMarkAsRequestDto$Outbound = {
    markAs: string;
    messageId: string | Array<string>;
};

/** @internal */
export const MessageMarkAsRequestDto$outboundSchema: z.ZodType<
    MessageMarkAsRequestDto$Outbound,
    z.ZodTypeDef,
    MessageMarkAsRequestDto
> = z.object({
    markAs: MessageMarkAsRequestDtoMarkAs$outboundSchema,
    messageId: z.union([z.string(), z.array(z.string())]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageMarkAsRequestDto$ {
    /** @deprecated use `MessageMarkAsRequestDto$inboundSchema` instead. */
    export const inboundSchema = MessageMarkAsRequestDto$inboundSchema;
    /** @deprecated use `MessageMarkAsRequestDto$outboundSchema` instead. */
    export const outboundSchema = MessageMarkAsRequestDto$outboundSchema;
    /** @deprecated use `MessageMarkAsRequestDto$Outbound` instead. */
    export type Outbound = MessageMarkAsRequestDto$Outbound;
}
