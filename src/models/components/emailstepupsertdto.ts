/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * Type of editor to use for the body.
 */
export const EmailStepUpsertDtoEditorType = {
  Block: "block",
  Html: "html",
} as const;
/**
 * Type of editor to use for the body.
 */
export type EmailStepUpsertDtoEditorType = ClosedEnum<
  typeof EmailStepUpsertDtoEditorType
>;

/**
 * Control values for the Email step
 */
export type EmailStepUpsertDtoControlValues = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * Subject of the email.
   */
  subject: string;
  /**
   * Body content of the email, either a valid Maily JSON object, or html string.
   */
  body?: string | undefined;
  /**
   * Type of editor to use for the body.
   */
  editorType?: EmailStepUpsertDtoEditorType | undefined;
  /**
   * Disable sanitization of the output.
   */
  disableOutputSanitization?: boolean | undefined;
};

export type EmailStepUpsertDto = {
  /**
   * Unique identifier of the step
   */
  id?: string | undefined;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Control values for the Email step
   */
  controlValues?: EmailStepUpsertDtoControlValues | null | undefined;
};

/** @internal */
export const EmailStepUpsertDtoEditorType$inboundSchema: z.ZodNativeEnum<
  typeof EmailStepUpsertDtoEditorType
> = z.nativeEnum(EmailStepUpsertDtoEditorType);

/** @internal */
export const EmailStepUpsertDtoEditorType$outboundSchema: z.ZodNativeEnum<
  typeof EmailStepUpsertDtoEditorType
> = EmailStepUpsertDtoEditorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailStepUpsertDtoEditorType$ {
  /** @deprecated use `EmailStepUpsertDtoEditorType$inboundSchema` instead. */
  export const inboundSchema = EmailStepUpsertDtoEditorType$inboundSchema;
  /** @deprecated use `EmailStepUpsertDtoEditorType$outboundSchema` instead. */
  export const outboundSchema = EmailStepUpsertDtoEditorType$outboundSchema;
}

/** @internal */
export const EmailStepUpsertDtoControlValues$inboundSchema: z.ZodType<
  EmailStepUpsertDtoControlValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.record(z.any()).optional(),
  subject: z.string(),
  body: z.string().default(""),
  editorType: EmailStepUpsertDtoEditorType$inboundSchema.default("block"),
  disableOutputSanitization: z.boolean().default(false),
});

/** @internal */
export type EmailStepUpsertDtoControlValues$Outbound = {
  skip?: { [k: string]: any } | undefined;
  subject: string;
  body: string;
  editorType: string;
  disableOutputSanitization: boolean;
};

/** @internal */
export const EmailStepUpsertDtoControlValues$outboundSchema: z.ZodType<
  EmailStepUpsertDtoControlValues$Outbound,
  z.ZodTypeDef,
  EmailStepUpsertDtoControlValues
> = z.object({
  skip: z.record(z.any()).optional(),
  subject: z.string(),
  body: z.string().default(""),
  editorType: EmailStepUpsertDtoEditorType$outboundSchema.default("block"),
  disableOutputSanitization: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailStepUpsertDtoControlValues$ {
  /** @deprecated use `EmailStepUpsertDtoControlValues$inboundSchema` instead. */
  export const inboundSchema = EmailStepUpsertDtoControlValues$inboundSchema;
  /** @deprecated use `EmailStepUpsertDtoControlValues$outboundSchema` instead. */
  export const outboundSchema = EmailStepUpsertDtoControlValues$outboundSchema;
  /** @deprecated use `EmailStepUpsertDtoControlValues$Outbound` instead. */
  export type Outbound = EmailStepUpsertDtoControlValues$Outbound;
}

export function emailStepUpsertDtoControlValuesToJSON(
  emailStepUpsertDtoControlValues: EmailStepUpsertDtoControlValues,
): string {
  return JSON.stringify(
    EmailStepUpsertDtoControlValues$outboundSchema.parse(
      emailStepUpsertDtoControlValues,
    ),
  );
}

export function emailStepUpsertDtoControlValuesFromJSON(
  jsonString: string,
): SafeParseResult<EmailStepUpsertDtoControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailStepUpsertDtoControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailStepUpsertDtoControlValues' from JSON`,
  );
}

/** @internal */
export const EmailStepUpsertDto$inboundSchema: z.ZodType<
  EmailStepUpsertDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$inboundSchema,
  controlValues: z.nullable(
    z.lazy(() => EmailStepUpsertDtoControlValues$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type EmailStepUpsertDto$Outbound = {
  _id?: string | undefined;
  name: string;
  type: string;
  controlValues?: EmailStepUpsertDtoControlValues$Outbound | null | undefined;
};

/** @internal */
export const EmailStepUpsertDto$outboundSchema: z.ZodType<
  EmailStepUpsertDto$Outbound,
  z.ZodTypeDef,
  EmailStepUpsertDto
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$outboundSchema,
  controlValues: z.nullable(
    z.lazy(() => EmailStepUpsertDtoControlValues$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailStepUpsertDto$ {
  /** @deprecated use `EmailStepUpsertDto$inboundSchema` instead. */
  export const inboundSchema = EmailStepUpsertDto$inboundSchema;
  /** @deprecated use `EmailStepUpsertDto$outboundSchema` instead. */
  export const outboundSchema = EmailStepUpsertDto$outboundSchema;
  /** @deprecated use `EmailStepUpsertDto$Outbound` instead. */
  export type Outbound = EmailStepUpsertDto$Outbound;
}

export function emailStepUpsertDtoToJSON(
  emailStepUpsertDto: EmailStepUpsertDto,
): string {
  return JSON.stringify(
    EmailStepUpsertDto$outboundSchema.parse(emailStepUpsertDto),
  );
}

export function emailStepUpsertDtoFromJSON(
  jsonString: string,
): SafeParseResult<EmailStepUpsertDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailStepUpsertDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailStepUpsertDto' from JSON`,
  );
}
