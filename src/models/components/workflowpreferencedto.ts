/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowPreferenceDto = {
  /**
   * A flag specifying if notification delivery is enabled for the workflow. If true, notification delivery is enabled by default for all channels. This setting can be overridden by the channel preferences.
   */
  enabled?: boolean | undefined;
  /**
   * A flag specifying if the preference is read-only. If true, the preference cannot be changed by the Subscriber.
   */
  readOnly?: boolean | undefined;
};

/** @internal */
export const WorkflowPreferenceDto$inboundSchema: z.ZodType<
  WorkflowPreferenceDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().default(true),
  readOnly: z.boolean().default(false),
});

/** @internal */
export type WorkflowPreferenceDto$Outbound = {
  enabled: boolean;
  readOnly: boolean;
};

/** @internal */
export const WorkflowPreferenceDto$outboundSchema: z.ZodType<
  WorkflowPreferenceDto$Outbound,
  z.ZodTypeDef,
  WorkflowPreferenceDto
> = z.object({
  enabled: z.boolean().default(true),
  readOnly: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowPreferenceDto$ {
  /** @deprecated use `WorkflowPreferenceDto$inboundSchema` instead. */
  export const inboundSchema = WorkflowPreferenceDto$inboundSchema;
  /** @deprecated use `WorkflowPreferenceDto$outboundSchema` instead. */
  export const outboundSchema = WorkflowPreferenceDto$outboundSchema;
  /** @deprecated use `WorkflowPreferenceDto$Outbound` instead. */
  export type Outbound = WorkflowPreferenceDto$Outbound;
}

export function workflowPreferenceDtoToJSON(
  workflowPreferenceDto: WorkflowPreferenceDto,
): string {
  return JSON.stringify(
    WorkflowPreferenceDto$outboundSchema.parse(workflowPreferenceDto),
  );
}

export function workflowPreferenceDtoFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowPreferenceDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowPreferenceDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowPreferenceDto' from JSON`,
  );
}
