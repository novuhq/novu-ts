/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * Type of the delay. Currently only 'regular' is supported by the schema.
 */
export const DelayStepUpsertDtoType = {
  Regular: "regular",
} as const;
/**
 * Type of the delay. Currently only 'regular' is supported by the schema.
 */
export type DelayStepUpsertDtoType = ClosedEnum<typeof DelayStepUpsertDtoType>;

/**
 * Unit of time for the delay amount.
 */
export const DelayStepUpsertDtoUnit = {
  Seconds: "seconds",
  Minutes: "minutes",
  Hours: "hours",
  Days: "days",
  Weeks: "weeks",
  Months: "months",
} as const;
/**
 * Unit of time for the delay amount.
 */
export type DelayStepUpsertDtoUnit = ClosedEnum<typeof DelayStepUpsertDtoUnit>;

/**
 * Control values for the Delay step
 */
export type DelayStepUpsertDtoControlValues = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * Type of the delay. Currently only 'regular' is supported by the schema.
   */
  type?: DelayStepUpsertDtoType | undefined;
  /**
   * Amount of time to delay.
   */
  amount: number;
  /**
   * Unit of time for the delay amount.
   */
  unit: DelayStepUpsertDtoUnit;
};

export type DelayStepUpsertDto = {
  /**
   * Unique identifier of the step
   */
  id?: string | undefined;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Control values for the Delay step
   */
  controlValues?: DelayStepUpsertDtoControlValues | null | undefined;
};

/** @internal */
export const DelayStepUpsertDtoType$inboundSchema: z.ZodNativeEnum<
  typeof DelayStepUpsertDtoType
> = z.nativeEnum(DelayStepUpsertDtoType);

/** @internal */
export const DelayStepUpsertDtoType$outboundSchema: z.ZodNativeEnum<
  typeof DelayStepUpsertDtoType
> = DelayStepUpsertDtoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DelayStepUpsertDtoType$ {
  /** @deprecated use `DelayStepUpsertDtoType$inboundSchema` instead. */
  export const inboundSchema = DelayStepUpsertDtoType$inboundSchema;
  /** @deprecated use `DelayStepUpsertDtoType$outboundSchema` instead. */
  export const outboundSchema = DelayStepUpsertDtoType$outboundSchema;
}

/** @internal */
export const DelayStepUpsertDtoUnit$inboundSchema: z.ZodNativeEnum<
  typeof DelayStepUpsertDtoUnit
> = z.nativeEnum(DelayStepUpsertDtoUnit);

/** @internal */
export const DelayStepUpsertDtoUnit$outboundSchema: z.ZodNativeEnum<
  typeof DelayStepUpsertDtoUnit
> = DelayStepUpsertDtoUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DelayStepUpsertDtoUnit$ {
  /** @deprecated use `DelayStepUpsertDtoUnit$inboundSchema` instead. */
  export const inboundSchema = DelayStepUpsertDtoUnit$inboundSchema;
  /** @deprecated use `DelayStepUpsertDtoUnit$outboundSchema` instead. */
  export const outboundSchema = DelayStepUpsertDtoUnit$outboundSchema;
}

/** @internal */
export const DelayStepUpsertDtoControlValues$inboundSchema: z.ZodType<
  DelayStepUpsertDtoControlValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.record(z.any()).optional(),
  type: DelayStepUpsertDtoType$inboundSchema.default("regular"),
  amount: z.number(),
  unit: DelayStepUpsertDtoUnit$inboundSchema,
});

/** @internal */
export type DelayStepUpsertDtoControlValues$Outbound = {
  skip?: { [k: string]: any } | undefined;
  type: string;
  amount: number;
  unit: string;
};

/** @internal */
export const DelayStepUpsertDtoControlValues$outboundSchema: z.ZodType<
  DelayStepUpsertDtoControlValues$Outbound,
  z.ZodTypeDef,
  DelayStepUpsertDtoControlValues
> = z.object({
  skip: z.record(z.any()).optional(),
  type: DelayStepUpsertDtoType$outboundSchema.default("regular"),
  amount: z.number(),
  unit: DelayStepUpsertDtoUnit$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DelayStepUpsertDtoControlValues$ {
  /** @deprecated use `DelayStepUpsertDtoControlValues$inboundSchema` instead. */
  export const inboundSchema = DelayStepUpsertDtoControlValues$inboundSchema;
  /** @deprecated use `DelayStepUpsertDtoControlValues$outboundSchema` instead. */
  export const outboundSchema = DelayStepUpsertDtoControlValues$outboundSchema;
  /** @deprecated use `DelayStepUpsertDtoControlValues$Outbound` instead. */
  export type Outbound = DelayStepUpsertDtoControlValues$Outbound;
}

export function delayStepUpsertDtoControlValuesToJSON(
  delayStepUpsertDtoControlValues: DelayStepUpsertDtoControlValues,
): string {
  return JSON.stringify(
    DelayStepUpsertDtoControlValues$outboundSchema.parse(
      delayStepUpsertDtoControlValues,
    ),
  );
}

export function delayStepUpsertDtoControlValuesFromJSON(
  jsonString: string,
): SafeParseResult<DelayStepUpsertDtoControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DelayStepUpsertDtoControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DelayStepUpsertDtoControlValues' from JSON`,
  );
}

/** @internal */
export const DelayStepUpsertDto$inboundSchema: z.ZodType<
  DelayStepUpsertDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$inboundSchema,
  controlValues: z.nullable(
    z.lazy(() => DelayStepUpsertDtoControlValues$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type DelayStepUpsertDto$Outbound = {
  _id?: string | undefined;
  name: string;
  type: string;
  controlValues?: DelayStepUpsertDtoControlValues$Outbound | null | undefined;
};

/** @internal */
export const DelayStepUpsertDto$outboundSchema: z.ZodType<
  DelayStepUpsertDto$Outbound,
  z.ZodTypeDef,
  DelayStepUpsertDto
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$outboundSchema,
  controlValues: z.nullable(
    z.lazy(() => DelayStepUpsertDtoControlValues$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DelayStepUpsertDto$ {
  /** @deprecated use `DelayStepUpsertDto$inboundSchema` instead. */
  export const inboundSchema = DelayStepUpsertDto$inboundSchema;
  /** @deprecated use `DelayStepUpsertDto$outboundSchema` instead. */
  export const outboundSchema = DelayStepUpsertDto$outboundSchema;
  /** @deprecated use `DelayStepUpsertDto$Outbound` instead. */
  export type Outbound = DelayStepUpsertDto$Outbound;
}

export function delayStepUpsertDtoToJSON(
  delayStepUpsertDto: DelayStepUpsertDto,
): string {
  return JSON.stringify(
    DelayStepUpsertDto$outboundSchema.parse(delayStepUpsertDto),
  );
}

export function delayStepUpsertDtoFromJSON(
  jsonString: string,
): SafeParseResult<DelayStepUpsertDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DelayStepUpsertDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DelayStepUpsertDto' from JSON`,
  );
}
