/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResourceOriginEnum,
  ResourceOriginEnum$inboundSchema,
  ResourceOriginEnum$outboundSchema,
} from "./resourceoriginenum.js";
import {
  SmsControlsMetadataResponseDto,
  SmsControlsMetadataResponseDto$inboundSchema,
  SmsControlsMetadataResponseDto$Outbound,
  SmsControlsMetadataResponseDto$outboundSchema,
} from "./smscontrolsmetadataresponsedto.js";
import {
  StepIssuesDto,
  StepIssuesDto$inboundSchema,
  StepIssuesDto$Outbound,
  StepIssuesDto$outboundSchema,
} from "./stepissuesdto.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * Control values for the SMS step
 */
export type SmsStepResponseDtoControlValues = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * Content of the SMS message.
   */
  body?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

export type SmsStepResponseDto = {
  /**
   * Controls metadata for the SMS step
   */
  controls: SmsControlsMetadataResponseDto;
  /**
   * Control values for the SMS step
   */
  controlValues?: SmsStepResponseDtoControlValues | undefined;
  /**
   * JSON Schema for variables, follows the JSON Schema standard
   */
  variables: { [k: string]: any };
  /**
   * Unique identifier of the step
   */
  stepId: string;
  /**
   * Database identifier of the step
   */
  id: string;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Slug of the step
   */
  slug: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Origin of the layout
   */
  origin: ResourceOriginEnum;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Workflow database identifier
   */
  workflowDatabaseId: string;
  /**
   * Issues associated with the step
   */
  issues?: StepIssuesDto | undefined;
};

/** @internal */
export const SmsStepResponseDtoControlValues$inboundSchema: z.ZodType<
  SmsStepResponseDtoControlValues,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    skip: z.record(z.any()).optional(),
    body: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type SmsStepResponseDtoControlValues$Outbound = {
  skip?: { [k: string]: any } | undefined;
  body?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SmsStepResponseDtoControlValues$outboundSchema: z.ZodType<
  SmsStepResponseDtoControlValues$Outbound,
  z.ZodTypeDef,
  SmsStepResponseDtoControlValues
> = z.object({
  skip: z.record(z.any()).optional(),
  body: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsStepResponseDtoControlValues$ {
  /** @deprecated use `SmsStepResponseDtoControlValues$inboundSchema` instead. */
  export const inboundSchema = SmsStepResponseDtoControlValues$inboundSchema;
  /** @deprecated use `SmsStepResponseDtoControlValues$outboundSchema` instead. */
  export const outboundSchema = SmsStepResponseDtoControlValues$outboundSchema;
  /** @deprecated use `SmsStepResponseDtoControlValues$Outbound` instead. */
  export type Outbound = SmsStepResponseDtoControlValues$Outbound;
}

export function smsStepResponseDtoControlValuesToJSON(
  smsStepResponseDtoControlValues: SmsStepResponseDtoControlValues,
): string {
  return JSON.stringify(
    SmsStepResponseDtoControlValues$outboundSchema.parse(
      smsStepResponseDtoControlValues,
    ),
  );
}

export function smsStepResponseDtoControlValuesFromJSON(
  jsonString: string,
): SafeParseResult<SmsStepResponseDtoControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsStepResponseDtoControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsStepResponseDtoControlValues' from JSON`,
  );
}

/** @internal */
export const SmsStepResponseDto$inboundSchema: z.ZodType<
  SmsStepResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  controls: SmsControlsMetadataResponseDto$inboundSchema,
  controlValues: z.lazy(() => SmsStepResponseDtoControlValues$inboundSchema)
    .optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  _id: z.string(),
  name: z.string(),
  slug: z.string(),
  type: StepTypeEnum$inboundSchema,
  origin: ResourceOriginEnum$inboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type SmsStepResponseDto$Outbound = {
  controls: SmsControlsMetadataResponseDto$Outbound;
  controlValues?: SmsStepResponseDtoControlValues$Outbound | undefined;
  variables: { [k: string]: any };
  stepId: string;
  _id: string;
  name: string;
  slug: string;
  type: string;
  origin: string;
  workflowId: string;
  workflowDatabaseId: string;
  issues?: StepIssuesDto$Outbound | undefined;
};

/** @internal */
export const SmsStepResponseDto$outboundSchema: z.ZodType<
  SmsStepResponseDto$Outbound,
  z.ZodTypeDef,
  SmsStepResponseDto
> = z.object({
  controls: SmsControlsMetadataResponseDto$outboundSchema,
  controlValues: z.lazy(() => SmsStepResponseDtoControlValues$outboundSchema)
    .optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  type: StepTypeEnum$outboundSchema,
  origin: ResourceOriginEnum$outboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsStepResponseDto$ {
  /** @deprecated use `SmsStepResponseDto$inboundSchema` instead. */
  export const inboundSchema = SmsStepResponseDto$inboundSchema;
  /** @deprecated use `SmsStepResponseDto$outboundSchema` instead. */
  export const outboundSchema = SmsStepResponseDto$outboundSchema;
  /** @deprecated use `SmsStepResponseDto$Outbound` instead. */
  export type Outbound = SmsStepResponseDto$Outbound;
}

export function smsStepResponseDtoToJSON(
  smsStepResponseDto: SmsStepResponseDto,
): string {
  return JSON.stringify(
    SmsStepResponseDto$outboundSchema.parse(smsStepResponseDto),
  );
}

export function smsStepResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<SmsStepResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsStepResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsStepResponseDto' from JSON`,
  );
}
