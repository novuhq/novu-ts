/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PreferenceChannels,
  PreferenceChannels$inboundSchema,
  PreferenceChannels$Outbound,
  PreferenceChannels$outboundSchema,
} from "./preferencechannels.js";

export type Preference = {
  /**
   * Sets if the workflow is fully enabled for all channels or not for the subscriber.
   */
  enabled: boolean;
  /**
   * Subscriber preferences for the different channels regarding this workflow
   */
  channels: PreferenceChannels;
};

/** @internal */
export const Preference$inboundSchema: z.ZodType<
  Preference,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean(),
  channels: PreferenceChannels$inboundSchema,
});

/** @internal */
export type Preference$Outbound = {
  enabled: boolean;
  channels: PreferenceChannels$Outbound;
};

/** @internal */
export const Preference$outboundSchema: z.ZodType<
  Preference$Outbound,
  z.ZodTypeDef,
  Preference
> = z.object({
  enabled: z.boolean(),
  channels: PreferenceChannels$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Preference$ {
  /** @deprecated use `Preference$inboundSchema` instead. */
  export const inboundSchema = Preference$inboundSchema;
  /** @deprecated use `Preference$outboundSchema` instead. */
  export const outboundSchema = Preference$outboundSchema;
  /** @deprecated use `Preference$Outbound` instead. */
  export type Outbound = Preference$Outbound;
}

export function preferenceToJSON(preference: Preference): string {
  return JSON.stringify(Preference$outboundSchema.parse(preference));
}

export function preferenceFromJSON(
  jsonString: string,
): SafeParseResult<Preference, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Preference$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Preference' from JSON`,
  );
}
