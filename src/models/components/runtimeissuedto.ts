/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const IssueType = {
  MissingValue: "MISSING_VALUE",
  MaxLengthAccessed: "MAX_LENGTH_ACCESSED",
  WorkflowIdAlreadyExists: "WORKFLOW_ID_ALREADY_EXISTS",
  DuplicatedValue: "DUPLICATED_VALUE",
  LimitReached: "LIMIT_REACHED",
} as const;
export type IssueType = ClosedEnum<typeof IssueType>;

export type RuntimeIssueDto = {
  issueType: IssueType;
  variableName?: string | undefined;
  message: string;
};

/** @internal */
export const IssueType$inboundSchema: z.ZodNativeEnum<typeof IssueType> = z
  .nativeEnum(IssueType);

/** @internal */
export const IssueType$outboundSchema: z.ZodNativeEnum<typeof IssueType> =
  IssueType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IssueType$ {
  /** @deprecated use `IssueType$inboundSchema` instead. */
  export const inboundSchema = IssueType$inboundSchema;
  /** @deprecated use `IssueType$outboundSchema` instead. */
  export const outboundSchema = IssueType$outboundSchema;
}

/** @internal */
export const RuntimeIssueDto$inboundSchema: z.ZodType<
  RuntimeIssueDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  issueType: IssueType$inboundSchema,
  variableName: z.string().optional(),
  message: z.string(),
});

/** @internal */
export type RuntimeIssueDto$Outbound = {
  issueType: string;
  variableName?: string | undefined;
  message: string;
};

/** @internal */
export const RuntimeIssueDto$outboundSchema: z.ZodType<
  RuntimeIssueDto$Outbound,
  z.ZodTypeDef,
  RuntimeIssueDto
> = z.object({
  issueType: IssueType$outboundSchema,
  variableName: z.string().optional(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RuntimeIssueDto$ {
  /** @deprecated use `RuntimeIssueDto$inboundSchema` instead. */
  export const inboundSchema = RuntimeIssueDto$inboundSchema;
  /** @deprecated use `RuntimeIssueDto$outboundSchema` instead. */
  export const outboundSchema = RuntimeIssueDto$outboundSchema;
  /** @deprecated use `RuntimeIssueDto$Outbound` instead. */
  export type Outbound = RuntimeIssueDto$Outbound;
}

export function runtimeIssueDtoToJSON(
  runtimeIssueDto: RuntimeIssueDto,
): string {
  return JSON.stringify(RuntimeIssueDto$outboundSchema.parse(runtimeIssueDto));
}

export function runtimeIssueDtoFromJSON(
  jsonString: string,
): SafeParseResult<RuntimeIssueDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RuntimeIssueDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RuntimeIssueDto' from JSON`,
  );
}
