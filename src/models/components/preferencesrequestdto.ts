/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChannelPreferenceDto,
  ChannelPreferenceDto$inboundSchema,
  ChannelPreferenceDto$Outbound,
  ChannelPreferenceDto$outboundSchema,
} from "./channelpreferencedto.js";
import {
  WorkflowPreferenceDto,
  WorkflowPreferenceDto$inboundSchema,
  WorkflowPreferenceDto$Outbound,
  WorkflowPreferenceDto$outboundSchema,
} from "./workflowpreferencedto.js";

/**
 * A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
 */
export type UserAll = WorkflowPreferenceDto;

export type UserWorkflowPreferencesDto = {
  /**
   * A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
   */
  all: WorkflowPreferenceDto;
  /**
   * Preferences for different communication channels
   */
  channels: { [k: string]: ChannelPreferenceDto };
};

/**
 * User workflow preferences
 */
export type User = UserWorkflowPreferencesDto;

/**
 * A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
 */
export type PreferencesRequestDtoAll = WorkflowPreferenceDto;

/**
 * Workflow-specific preferences
 */
export type Workflow = {
  /**
   * A preference for the workflow. The values specified here will be used if no preference is specified for a channel.
   */
  all: WorkflowPreferenceDto;
  /**
   * Preferences for different communication channels
   */
  channels: { [k: string]: ChannelPreferenceDto };
};

export type PreferencesRequestDto = {
  /**
   * User workflow preferences
   */
  user?: UserWorkflowPreferencesDto | null | undefined;
  /**
   * Workflow-specific preferences
   */
  workflow?: Workflow | null | undefined;
};

/** @internal */
export const UserAll$inboundSchema: z.ZodType<UserAll, z.ZodTypeDef, unknown> =
  WorkflowPreferenceDto$inboundSchema;

/** @internal */
export type UserAll$Outbound = WorkflowPreferenceDto$Outbound;

/** @internal */
export const UserAll$outboundSchema: z.ZodType<
  UserAll$Outbound,
  z.ZodTypeDef,
  UserAll
> = WorkflowPreferenceDto$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserAll$ {
  /** @deprecated use `UserAll$inboundSchema` instead. */
  export const inboundSchema = UserAll$inboundSchema;
  /** @deprecated use `UserAll$outboundSchema` instead. */
  export const outboundSchema = UserAll$outboundSchema;
  /** @deprecated use `UserAll$Outbound` instead. */
  export type Outbound = UserAll$Outbound;
}

export function userAllToJSON(userAll: UserAll): string {
  return JSON.stringify(UserAll$outboundSchema.parse(userAll));
}

export function userAllFromJSON(
  jsonString: string,
): SafeParseResult<UserAll, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserAll$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserAll' from JSON`,
  );
}

/** @internal */
export const UserWorkflowPreferencesDto$inboundSchema: z.ZodType<
  UserWorkflowPreferencesDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  all: WorkflowPreferenceDto$inboundSchema,
  channels: z.record(ChannelPreferenceDto$inboundSchema),
});

/** @internal */
export type UserWorkflowPreferencesDto$Outbound = {
  all: WorkflowPreferenceDto$Outbound;
  channels: { [k: string]: ChannelPreferenceDto$Outbound };
};

/** @internal */
export const UserWorkflowPreferencesDto$outboundSchema: z.ZodType<
  UserWorkflowPreferencesDto$Outbound,
  z.ZodTypeDef,
  UserWorkflowPreferencesDto
> = z.object({
  all: WorkflowPreferenceDto$outboundSchema,
  channels: z.record(ChannelPreferenceDto$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserWorkflowPreferencesDto$ {
  /** @deprecated use `UserWorkflowPreferencesDto$inboundSchema` instead. */
  export const inboundSchema = UserWorkflowPreferencesDto$inboundSchema;
  /** @deprecated use `UserWorkflowPreferencesDto$outboundSchema` instead. */
  export const outboundSchema = UserWorkflowPreferencesDto$outboundSchema;
  /** @deprecated use `UserWorkflowPreferencesDto$Outbound` instead. */
  export type Outbound = UserWorkflowPreferencesDto$Outbound;
}

export function userWorkflowPreferencesDtoToJSON(
  userWorkflowPreferencesDto: UserWorkflowPreferencesDto,
): string {
  return JSON.stringify(
    UserWorkflowPreferencesDto$outboundSchema.parse(userWorkflowPreferencesDto),
  );
}

export function userWorkflowPreferencesDtoFromJSON(
  jsonString: string,
): SafeParseResult<UserWorkflowPreferencesDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserWorkflowPreferencesDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserWorkflowPreferencesDto' from JSON`,
  );
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .lazy(() => UserWorkflowPreferencesDto$inboundSchema);

/** @internal */
export type User$Outbound = UserWorkflowPreferencesDto$Outbound;

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.lazy(() => UserWorkflowPreferencesDto$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}

/** @internal */
export const PreferencesRequestDtoAll$inboundSchema: z.ZodType<
  PreferencesRequestDtoAll,
  z.ZodTypeDef,
  unknown
> = WorkflowPreferenceDto$inboundSchema;

/** @internal */
export type PreferencesRequestDtoAll$Outbound = WorkflowPreferenceDto$Outbound;

/** @internal */
export const PreferencesRequestDtoAll$outboundSchema: z.ZodType<
  PreferencesRequestDtoAll$Outbound,
  z.ZodTypeDef,
  PreferencesRequestDtoAll
> = WorkflowPreferenceDto$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreferencesRequestDtoAll$ {
  /** @deprecated use `PreferencesRequestDtoAll$inboundSchema` instead. */
  export const inboundSchema = PreferencesRequestDtoAll$inboundSchema;
  /** @deprecated use `PreferencesRequestDtoAll$outboundSchema` instead. */
  export const outboundSchema = PreferencesRequestDtoAll$outboundSchema;
  /** @deprecated use `PreferencesRequestDtoAll$Outbound` instead. */
  export type Outbound = PreferencesRequestDtoAll$Outbound;
}

export function preferencesRequestDtoAllToJSON(
  preferencesRequestDtoAll: PreferencesRequestDtoAll,
): string {
  return JSON.stringify(
    PreferencesRequestDtoAll$outboundSchema.parse(preferencesRequestDtoAll),
  );
}

export function preferencesRequestDtoAllFromJSON(
  jsonString: string,
): SafeParseResult<PreferencesRequestDtoAll, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreferencesRequestDtoAll$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreferencesRequestDtoAll' from JSON`,
  );
}

/** @internal */
export const Workflow$inboundSchema: z.ZodType<
  Workflow,
  z.ZodTypeDef,
  unknown
> = z.object({
  all: WorkflowPreferenceDto$inboundSchema,
  channels: z.record(ChannelPreferenceDto$inboundSchema),
});

/** @internal */
export type Workflow$Outbound = {
  all: WorkflowPreferenceDto$Outbound;
  channels: { [k: string]: ChannelPreferenceDto$Outbound };
};

/** @internal */
export const Workflow$outboundSchema: z.ZodType<
  Workflow$Outbound,
  z.ZodTypeDef,
  Workflow
> = z.object({
  all: WorkflowPreferenceDto$outboundSchema,
  channels: z.record(ChannelPreferenceDto$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workflow$ {
  /** @deprecated use `Workflow$inboundSchema` instead. */
  export const inboundSchema = Workflow$inboundSchema;
  /** @deprecated use `Workflow$outboundSchema` instead. */
  export const outboundSchema = Workflow$outboundSchema;
  /** @deprecated use `Workflow$Outbound` instead. */
  export type Outbound = Workflow$Outbound;
}

export function workflowToJSON(workflow: Workflow): string {
  return JSON.stringify(Workflow$outboundSchema.parse(workflow));
}

export function workflowFromJSON(
  jsonString: string,
): SafeParseResult<Workflow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Workflow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Workflow' from JSON`,
  );
}

/** @internal */
export const PreferencesRequestDto$inboundSchema: z.ZodType<
  PreferencesRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.nullable(z.lazy(() => UserWorkflowPreferencesDto$inboundSchema))
    .optional(),
  workflow: z.nullable(z.lazy(() => Workflow$inboundSchema)).optional(),
});

/** @internal */
export type PreferencesRequestDto$Outbound = {
  user?: UserWorkflowPreferencesDto$Outbound | null | undefined;
  workflow?: Workflow$Outbound | null | undefined;
};

/** @internal */
export const PreferencesRequestDto$outboundSchema: z.ZodType<
  PreferencesRequestDto$Outbound,
  z.ZodTypeDef,
  PreferencesRequestDto
> = z.object({
  user: z.nullable(z.lazy(() => UserWorkflowPreferencesDto$outboundSchema))
    .optional(),
  workflow: z.nullable(z.lazy(() => Workflow$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreferencesRequestDto$ {
  /** @deprecated use `PreferencesRequestDto$inboundSchema` instead. */
  export const inboundSchema = PreferencesRequestDto$inboundSchema;
  /** @deprecated use `PreferencesRequestDto$outboundSchema` instead. */
  export const outboundSchema = PreferencesRequestDto$outboundSchema;
  /** @deprecated use `PreferencesRequestDto$Outbound` instead. */
  export type Outbound = PreferencesRequestDto$Outbound;
}

export function preferencesRequestDtoToJSON(
  preferencesRequestDto: PreferencesRequestDto,
): string {
  return JSON.stringify(
    PreferencesRequestDto$outboundSchema.parse(preferencesRequestDto),
  );
}

export function preferencesRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<PreferencesRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreferencesRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreferencesRequestDto' from JSON`,
  );
}
