/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActionDto,
  ActionDto$inboundSchema,
  ActionDto$Outbound,
  ActionDto$outboundSchema,
} from "./actiondto.js";
import {
  RedirectDto,
  RedirectDto$inboundSchema,
  RedirectDto$Outbound,
  RedirectDto$outboundSchema,
} from "./redirectdto.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * Control values for the In-App step
 */
export type ControlValues = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * Content/body of the in-app message. Required if subject is empty.
   */
  body?: string | undefined;
  /**
   * Subject/title of the in-app message. Required if body is empty.
   */
  subject?: string | undefined;
  /**
   * URL for an avatar image. Must be a valid URL or start with / or {{"{{"}} variable }}.
   */
  avatar?: string | undefined;
  /**
   * Primary action button details.
   */
  primaryAction?: ActionDto | undefined;
  /**
   * Secondary action button details.
   */
  secondaryAction?: ActionDto | undefined;
  /**
   * Redirection URL configuration for the main content click (if no actions defined/clicked)..
   */
  redirect?: RedirectDto | undefined;
  /**
   * Disable sanitization of the output.
   */
  disableOutputSanitization?: boolean | undefined;
  /**
   * Additional data payload for the step.
   */
  data?: { [k: string]: any } | undefined;
};

export type InAppStepUpsertDto = {
  /**
   * Unique identifier of the step
   */
  id?: string | undefined;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Control values for the In-App step
   */
  controlValues?: ControlValues | null | undefined;
};

/** @internal */
export const ControlValues$inboundSchema: z.ZodType<
  ControlValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  skip: z.record(z.any()).optional(),
  body: z.string().optional(),
  subject: z.string().optional(),
  avatar: z.string().optional(),
  primaryAction: ActionDto$inboundSchema.optional(),
  secondaryAction: ActionDto$inboundSchema.optional(),
  redirect: RedirectDto$inboundSchema.optional(),
  disableOutputSanitization: z.boolean().default(false),
  data: z.record(z.any()).optional(),
});

/** @internal */
export type ControlValues$Outbound = {
  skip?: { [k: string]: any } | undefined;
  body?: string | undefined;
  subject?: string | undefined;
  avatar?: string | undefined;
  primaryAction?: ActionDto$Outbound | undefined;
  secondaryAction?: ActionDto$Outbound | undefined;
  redirect?: RedirectDto$Outbound | undefined;
  disableOutputSanitization: boolean;
  data?: { [k: string]: any } | undefined;
};

/** @internal */
export const ControlValues$outboundSchema: z.ZodType<
  ControlValues$Outbound,
  z.ZodTypeDef,
  ControlValues
> = z.object({
  skip: z.record(z.any()).optional(),
  body: z.string().optional(),
  subject: z.string().optional(),
  avatar: z.string().optional(),
  primaryAction: ActionDto$outboundSchema.optional(),
  secondaryAction: ActionDto$outboundSchema.optional(),
  redirect: RedirectDto$outboundSchema.optional(),
  disableOutputSanitization: z.boolean().default(false),
  data: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ControlValues$ {
  /** @deprecated use `ControlValues$inboundSchema` instead. */
  export const inboundSchema = ControlValues$inboundSchema;
  /** @deprecated use `ControlValues$outboundSchema` instead. */
  export const outboundSchema = ControlValues$outboundSchema;
  /** @deprecated use `ControlValues$Outbound` instead. */
  export type Outbound = ControlValues$Outbound;
}

export function controlValuesToJSON(controlValues: ControlValues): string {
  return JSON.stringify(ControlValues$outboundSchema.parse(controlValues));
}

export function controlValuesFromJSON(
  jsonString: string,
): SafeParseResult<ControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ControlValues' from JSON`,
  );
}

/** @internal */
export const InAppStepUpsertDto$inboundSchema: z.ZodType<
  InAppStepUpsertDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$inboundSchema,
  controlValues: z.nullable(z.lazy(() => ControlValues$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type InAppStepUpsertDto$Outbound = {
  _id?: string | undefined;
  name: string;
  type: string;
  controlValues?: ControlValues$Outbound | null | undefined;
};

/** @internal */
export const InAppStepUpsertDto$outboundSchema: z.ZodType<
  InAppStepUpsertDto$Outbound,
  z.ZodTypeDef,
  InAppStepUpsertDto
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$outboundSchema,
  controlValues: z.nullable(z.lazy(() => ControlValues$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppStepUpsertDto$ {
  /** @deprecated use `InAppStepUpsertDto$inboundSchema` instead. */
  export const inboundSchema = InAppStepUpsertDto$inboundSchema;
  /** @deprecated use `InAppStepUpsertDto$outboundSchema` instead. */
  export const outboundSchema = InAppStepUpsertDto$outboundSchema;
  /** @deprecated use `InAppStepUpsertDto$Outbound` instead. */
  export type Outbound = InAppStepUpsertDto$Outbound;
}

export function inAppStepUpsertDtoToJSON(
  inAppStepUpsertDto: InAppStepUpsertDto,
): string {
  return JSON.stringify(
    InAppStepUpsertDto$outboundSchema.parse(inAppStepUpsertDto),
  );
}

export function inAppStepUpsertDtoFromJSON(
  jsonString: string,
): SafeParseResult<InAppStepUpsertDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InAppStepUpsertDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InAppStepUpsertDto' from JSON`,
  );
}
