/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InAppControlDto,
  InAppControlDto$inboundSchema,
  InAppControlDto$Outbound,
  InAppControlDto$outboundSchema,
} from "./inappcontroldto.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * Control values for the In-App step.
 */
export type InAppStepUpsertDtoControlValues = InAppControlDto | {
  [k: string]: any;
};

export type InAppStepUpsertDto = {
  /**
   * Unique identifier of the step
   */
  id?: string | undefined;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Control values for the In-App step.
   */
  controlValues?: InAppControlDto | { [k: string]: any } | undefined;
};

/** @internal */
export const InAppStepUpsertDtoControlValues$inboundSchema: z.ZodType<
  InAppStepUpsertDtoControlValues,
  z.ZodTypeDef,
  unknown
> = z.union([InAppControlDto$inboundSchema, z.record(z.any())]);

/** @internal */
export type InAppStepUpsertDtoControlValues$Outbound =
  | InAppControlDto$Outbound
  | { [k: string]: any };

/** @internal */
export const InAppStepUpsertDtoControlValues$outboundSchema: z.ZodType<
  InAppStepUpsertDtoControlValues$Outbound,
  z.ZodTypeDef,
  InAppStepUpsertDtoControlValues
> = z.union([InAppControlDto$outboundSchema, z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppStepUpsertDtoControlValues$ {
  /** @deprecated use `InAppStepUpsertDtoControlValues$inboundSchema` instead. */
  export const inboundSchema = InAppStepUpsertDtoControlValues$inboundSchema;
  /** @deprecated use `InAppStepUpsertDtoControlValues$outboundSchema` instead. */
  export const outboundSchema = InAppStepUpsertDtoControlValues$outboundSchema;
  /** @deprecated use `InAppStepUpsertDtoControlValues$Outbound` instead. */
  export type Outbound = InAppStepUpsertDtoControlValues$Outbound;
}

export function inAppStepUpsertDtoControlValuesToJSON(
  inAppStepUpsertDtoControlValues: InAppStepUpsertDtoControlValues,
): string {
  return JSON.stringify(
    InAppStepUpsertDtoControlValues$outboundSchema.parse(
      inAppStepUpsertDtoControlValues,
    ),
  );
}

export function inAppStepUpsertDtoControlValuesFromJSON(
  jsonString: string,
): SafeParseResult<InAppStepUpsertDtoControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InAppStepUpsertDtoControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InAppStepUpsertDtoControlValues' from JSON`,
  );
}

/** @internal */
export const InAppStepUpsertDto$inboundSchema: z.ZodType<
  InAppStepUpsertDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$inboundSchema,
  controlValues: z.union([InAppControlDto$inboundSchema, z.record(z.any())])
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type InAppStepUpsertDto$Outbound = {
  _id?: string | undefined;
  name: string;
  type: string;
  controlValues?: InAppControlDto$Outbound | { [k: string]: any } | undefined;
};

/** @internal */
export const InAppStepUpsertDto$outboundSchema: z.ZodType<
  InAppStepUpsertDto$Outbound,
  z.ZodTypeDef,
  InAppStepUpsertDto
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$outboundSchema,
  controlValues: z.union([InAppControlDto$outboundSchema, z.record(z.any())])
    .optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InAppStepUpsertDto$ {
  /** @deprecated use `InAppStepUpsertDto$inboundSchema` instead. */
  export const inboundSchema = InAppStepUpsertDto$inboundSchema;
  /** @deprecated use `InAppStepUpsertDto$outboundSchema` instead. */
  export const outboundSchema = InAppStepUpsertDto$outboundSchema;
  /** @deprecated use `InAppStepUpsertDto$Outbound` instead. */
  export type Outbound = InAppStepUpsertDto$Outbound;
}

export function inAppStepUpsertDtoToJSON(
  inAppStepUpsertDto: InAppStepUpsertDto,
): string {
  return JSON.stringify(
    InAppStepUpsertDto$outboundSchema.parse(inAppStepUpsertDto),
  );
}

export function inAppStepUpsertDtoFromJSON(
  jsonString: string,
): SafeParseResult<InAppStepUpsertDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InAppStepUpsertDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InAppStepUpsertDto' from JSON`,
  );
}
