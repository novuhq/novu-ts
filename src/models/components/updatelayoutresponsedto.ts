/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const UpdateLayoutResponseDtoChannel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type UpdateLayoutResponseDtoChannel = ClosedEnum<typeof UpdateLayoutResponseDtoChannel>;

export type UpdateLayoutResponseDto = {
    creatorId: string;
    environmentId: string;
    id?: string | undefined;
    organizationId: string;
    parentId?: string | undefined;
    channel: UpdateLayoutResponseDtoChannel;
    content: string;
    contentType: string;
    createdAt?: string | undefined;
    description?: string | undefined;
    identifier: string;
    isDefault: boolean;
    isDeleted: boolean;
    name: string;
    updatedAt?: string | undefined;
    variables?: Array<string> | undefined;
};

/** @internal */
export const UpdateLayoutResponseDtoChannel$inboundSchema: z.ZodNativeEnum<
    typeof UpdateLayoutResponseDtoChannel
> = z.nativeEnum(UpdateLayoutResponseDtoChannel);

/** @internal */
export const UpdateLayoutResponseDtoChannel$outboundSchema: z.ZodNativeEnum<
    typeof UpdateLayoutResponseDtoChannel
> = UpdateLayoutResponseDtoChannel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLayoutResponseDtoChannel$ {
    /** @deprecated use `UpdateLayoutResponseDtoChannel$inboundSchema` instead. */
    export const inboundSchema = UpdateLayoutResponseDtoChannel$inboundSchema;
    /** @deprecated use `UpdateLayoutResponseDtoChannel$outboundSchema` instead. */
    export const outboundSchema = UpdateLayoutResponseDtoChannel$outboundSchema;
}

/** @internal */
export const UpdateLayoutResponseDto$inboundSchema: z.ZodType<
    UpdateLayoutResponseDto,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        _creatorId: z.string(),
        _environmentId: z.string(),
        _id: z.string().optional(),
        _organizationId: z.string(),
        _parentId: z.string().optional(),
        channel: UpdateLayoutResponseDtoChannel$inboundSchema,
        content: z.string(),
        contentType: z.string(),
        createdAt: z.string().optional(),
        description: z.string().optional(),
        identifier: z.string(),
        isDefault: z.boolean(),
        isDeleted: z.boolean(),
        name: z.string(),
        updatedAt: z.string().optional(),
        variables: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            _creatorId: "creatorId",
            _environmentId: "environmentId",
            _id: "id",
            _organizationId: "organizationId",
            _parentId: "parentId",
        });
    });

/** @internal */
export type UpdateLayoutResponseDto$Outbound = {
    _creatorId: string;
    _environmentId: string;
    _id?: string | undefined;
    _organizationId: string;
    _parentId?: string | undefined;
    channel: string;
    content: string;
    contentType: string;
    createdAt?: string | undefined;
    description?: string | undefined;
    identifier: string;
    isDefault: boolean;
    isDeleted: boolean;
    name: string;
    updatedAt?: string | undefined;
    variables?: Array<string> | undefined;
};

/** @internal */
export const UpdateLayoutResponseDto$outboundSchema: z.ZodType<
    UpdateLayoutResponseDto$Outbound,
    z.ZodTypeDef,
    UpdateLayoutResponseDto
> = z
    .object({
        creatorId: z.string(),
        environmentId: z.string(),
        id: z.string().optional(),
        organizationId: z.string(),
        parentId: z.string().optional(),
        channel: UpdateLayoutResponseDtoChannel$outboundSchema,
        content: z.string(),
        contentType: z.string(),
        createdAt: z.string().optional(),
        description: z.string().optional(),
        identifier: z.string(),
        isDefault: z.boolean(),
        isDeleted: z.boolean(),
        name: z.string(),
        updatedAt: z.string().optional(),
        variables: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            creatorId: "_creatorId",
            environmentId: "_environmentId",
            id: "_id",
            organizationId: "_organizationId",
            parentId: "_parentId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLayoutResponseDto$ {
    /** @deprecated use `UpdateLayoutResponseDto$inboundSchema` instead. */
    export const inboundSchema = UpdateLayoutResponseDto$inboundSchema;
    /** @deprecated use `UpdateLayoutResponseDto$outboundSchema` instead. */
    export const outboundSchema = UpdateLayoutResponseDto$outboundSchema;
    /** @deprecated use `UpdateLayoutResponseDto$Outbound` instead. */
    export type Outbound = UpdateLayoutResponseDto$Outbound;
}
