/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionErrorDto = {
  /**
   * The subscriber ID that failed
   */
  subscriberId: string;
  /**
   * The error code
   */
  code: string;
  /**
   * The error message
   */
  message: string;
};

/** @internal */
export const SubscriptionErrorDto$inboundSchema: z.ZodType<
  SubscriptionErrorDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriberId: z.string(),
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type SubscriptionErrorDto$Outbound = {
  subscriberId: string;
  code: string;
  message: string;
};

/** @internal */
export const SubscriptionErrorDto$outboundSchema: z.ZodType<
  SubscriptionErrorDto$Outbound,
  z.ZodTypeDef,
  SubscriptionErrorDto
> = z.object({
  subscriberId: z.string(),
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionErrorDto$ {
  /** @deprecated use `SubscriptionErrorDto$inboundSchema` instead. */
  export const inboundSchema = SubscriptionErrorDto$inboundSchema;
  /** @deprecated use `SubscriptionErrorDto$outboundSchema` instead. */
  export const outboundSchema = SubscriptionErrorDto$outboundSchema;
  /** @deprecated use `SubscriptionErrorDto$Outbound` instead. */
  export type Outbound = SubscriptionErrorDto$Outbound;
}

export function subscriptionErrorDtoToJSON(
  subscriptionErrorDto: SubscriptionErrorDto,
): string {
  return JSON.stringify(
    SubscriptionErrorDto$outboundSchema.parse(subscriptionErrorDto),
  );
}

export function subscriptionErrorDtoFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionErrorDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionErrorDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionErrorDto' from JSON`,
  );
}
