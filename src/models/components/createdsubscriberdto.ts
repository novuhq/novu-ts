/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreatedSubscriberDto = {
  /**
   * The ID of the subscriber that was created.
   */
  subscriberId: string;
};

/** @internal */
export const CreatedSubscriberDto$inboundSchema: z.ZodType<
  CreatedSubscriberDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriberId: z.string(),
});

/** @internal */
export type CreatedSubscriberDto$Outbound = {
  subscriberId: string;
};

/** @internal */
export const CreatedSubscriberDto$outboundSchema: z.ZodType<
  CreatedSubscriberDto$Outbound,
  z.ZodTypeDef,
  CreatedSubscriberDto
> = z.object({
  subscriberId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedSubscriberDto$ {
  /** @deprecated use `CreatedSubscriberDto$inboundSchema` instead. */
  export const inboundSchema = CreatedSubscriberDto$inboundSchema;
  /** @deprecated use `CreatedSubscriberDto$outboundSchema` instead. */
  export const outboundSchema = CreatedSubscriberDto$outboundSchema;
  /** @deprecated use `CreatedSubscriberDto$Outbound` instead. */
  export type Outbound = CreatedSubscriberDto$Outbound;
}

export function createdSubscriberDtoToJSON(
  createdSubscriberDto: CreatedSubscriberDto,
): string {
  return JSON.stringify(
    CreatedSubscriberDto$outboundSchema.parse(createdSubscriberDto),
  );
}

export function createdSubscriberDtoFromJSON(
  jsonString: string,
): SafeParseResult<CreatedSubscriberDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatedSubscriberDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatedSubscriberDto' from JSON`,
  );
}
