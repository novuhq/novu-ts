/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChannelPreferenceDto = {
  /**
   * A flag specifying if notification delivery is enabled for the channel. If true, notification delivery is enabled.
   */
  enabled?: boolean | undefined;
};

/** @internal */
export const ChannelPreferenceDto$inboundSchema: z.ZodType<
  ChannelPreferenceDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().default(true),
});

/** @internal */
export type ChannelPreferenceDto$Outbound = {
  enabled: boolean;
};

/** @internal */
export const ChannelPreferenceDto$outboundSchema: z.ZodType<
  ChannelPreferenceDto$Outbound,
  z.ZodTypeDef,
  ChannelPreferenceDto
> = z.object({
  enabled: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelPreferenceDto$ {
  /** @deprecated use `ChannelPreferenceDto$inboundSchema` instead. */
  export const inboundSchema = ChannelPreferenceDto$inboundSchema;
  /** @deprecated use `ChannelPreferenceDto$outboundSchema` instead. */
  export const outboundSchema = ChannelPreferenceDto$outboundSchema;
  /** @deprecated use `ChannelPreferenceDto$Outbound` instead. */
  export type Outbound = ChannelPreferenceDto$Outbound;
}

export function channelPreferenceDtoToJSON(
  channelPreferenceDto: ChannelPreferenceDto,
): string {
  return JSON.stringify(
    ChannelPreferenceDto$outboundSchema.parse(channelPreferenceDto),
  );
}

export function channelPreferenceDtoFromJSON(
  jsonString: string,
): SafeParseResult<ChannelPreferenceDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChannelPreferenceDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChannelPreferenceDto' from JSON`,
  );
}
