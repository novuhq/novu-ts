/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepIntegrationIssueEnum,
  StepIntegrationIssueEnum$inboundSchema,
  StepIntegrationIssueEnum$outboundSchema,
} from "./stepintegrationissueenum.js";

export type StepIntegrationIssue = {
  /**
   * Type of integration issue
   */
  issueType: StepIntegrationIssueEnum;
  /**
   * Name of the variable related to the issue
   */
  variableName?: string | undefined;
  /**
   * Detailed message describing the issue
   */
  message: string;
};

/** @internal */
export const StepIntegrationIssue$inboundSchema: z.ZodType<
  StepIntegrationIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  issueType: StepIntegrationIssueEnum$inboundSchema,
  variableName: z.string().optional(),
  message: z.string(),
});

/** @internal */
export type StepIntegrationIssue$Outbound = {
  issueType: string;
  variableName?: string | undefined;
  message: string;
};

/** @internal */
export const StepIntegrationIssue$outboundSchema: z.ZodType<
  StepIntegrationIssue$Outbound,
  z.ZodTypeDef,
  StepIntegrationIssue
> = z.object({
  issueType: StepIntegrationIssueEnum$outboundSchema,
  variableName: z.string().optional(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepIntegrationIssue$ {
  /** @deprecated use `StepIntegrationIssue$inboundSchema` instead. */
  export const inboundSchema = StepIntegrationIssue$inboundSchema;
  /** @deprecated use `StepIntegrationIssue$outboundSchema` instead. */
  export const outboundSchema = StepIntegrationIssue$outboundSchema;
  /** @deprecated use `StepIntegrationIssue$Outbound` instead. */
  export type Outbound = StepIntegrationIssue$Outbound;
}

export function stepIntegrationIssueToJSON(
  stepIntegrationIssue: StepIntegrationIssue,
): string {
  return JSON.stringify(
    StepIntegrationIssue$outboundSchema.parse(stepIntegrationIssue),
  );
}

export function stepIntegrationIssueFromJSON(
  jsonString: string,
): SafeParseResult<StepIntegrationIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepIntegrationIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepIntegrationIssue' from JSON`,
  );
}
