/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GlobalPreferenceDto,
  GlobalPreferenceDto$inboundSchema,
  GlobalPreferenceDto$Outbound,
  GlobalPreferenceDto$outboundSchema,
} from "./globalpreferencedto.js";
import {
  WorkflowPreferenceDto,
  WorkflowPreferenceDto$inboundSchema,
  WorkflowPreferenceDto$Outbound,
  WorkflowPreferenceDto$outboundSchema,
} from "./workflowpreferencedto.js";

export type GetSubscriberPreferencesDto = {
  /**
   * Global preference settings
   */
  global: GlobalPreferenceDto;
  /**
   * Workflow-specific preference settings
   */
  workflows: Array<WorkflowPreferenceDto>;
};

/** @internal */
export const GetSubscriberPreferencesDto$inboundSchema: z.ZodType<
  GetSubscriberPreferencesDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  global: GlobalPreferenceDto$inboundSchema,
  workflows: z.array(WorkflowPreferenceDto$inboundSchema),
});

/** @internal */
export type GetSubscriberPreferencesDto$Outbound = {
  global: GlobalPreferenceDto$Outbound;
  workflows: Array<WorkflowPreferenceDto$Outbound>;
};

/** @internal */
export const GetSubscriberPreferencesDto$outboundSchema: z.ZodType<
  GetSubscriberPreferencesDto$Outbound,
  z.ZodTypeDef,
  GetSubscriberPreferencesDto
> = z.object({
  global: GlobalPreferenceDto$outboundSchema,
  workflows: z.array(WorkflowPreferenceDto$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSubscriberPreferencesDto$ {
  /** @deprecated use `GetSubscriberPreferencesDto$inboundSchema` instead. */
  export const inboundSchema = GetSubscriberPreferencesDto$inboundSchema;
  /** @deprecated use `GetSubscriberPreferencesDto$outboundSchema` instead. */
  export const outboundSchema = GetSubscriberPreferencesDto$outboundSchema;
  /** @deprecated use `GetSubscriberPreferencesDto$Outbound` instead. */
  export type Outbound = GetSubscriberPreferencesDto$Outbound;
}

export function getSubscriberPreferencesDtoToJSON(
  getSubscriberPreferencesDto: GetSubscriberPreferencesDto,
): string {
  return JSON.stringify(
    GetSubscriberPreferencesDto$outboundSchema.parse(
      getSubscriberPreferencesDto,
    ),
  );
}

export function getSubscriberPreferencesDtoFromJSON(
  jsonString: string,
): SafeParseResult<GetSubscriberPreferencesDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSubscriberPreferencesDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSubscriberPreferencesDto' from JSON`,
  );
}
