/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmailControlsDto,
  EmailControlsDto$inboundSchema,
  EmailControlsDto$Outbound,
  EmailControlsDto$outboundSchema,
} from "./emailcontrolsdto.js";

export type LayoutControlValuesDto = {
  /**
   * Email layout controls
   */
  email?: EmailControlsDto | undefined;
};

/** @internal */
export const LayoutControlValuesDto$inboundSchema: z.ZodType<
  LayoutControlValuesDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: EmailControlsDto$inboundSchema.optional(),
});

/** @internal */
export type LayoutControlValuesDto$Outbound = {
  email?: EmailControlsDto$Outbound | undefined;
};

/** @internal */
export const LayoutControlValuesDto$outboundSchema: z.ZodType<
  LayoutControlValuesDto$Outbound,
  z.ZodTypeDef,
  LayoutControlValuesDto
> = z.object({
  email: EmailControlsDto$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutControlValuesDto$ {
  /** @deprecated use `LayoutControlValuesDto$inboundSchema` instead. */
  export const inboundSchema = LayoutControlValuesDto$inboundSchema;
  /** @deprecated use `LayoutControlValuesDto$outboundSchema` instead. */
  export const outboundSchema = LayoutControlValuesDto$outboundSchema;
  /** @deprecated use `LayoutControlValuesDto$Outbound` instead. */
  export type Outbound = LayoutControlValuesDto$Outbound;
}

export function layoutControlValuesDtoToJSON(
  layoutControlValuesDto: LayoutControlValuesDto,
): string {
  return JSON.stringify(
    LayoutControlValuesDto$outboundSchema.parse(layoutControlValuesDto),
  );
}

export function layoutControlValuesDtoFromJSON(
  jsonString: string,
): SafeParseResult<LayoutControlValuesDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutControlValuesDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutControlValuesDto' from JSON`,
  );
}
