/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatedSubscriberDto = {
  /**
   * The ID of the subscriber that was updated.
   */
  subscriberId: string;
};

/** @internal */
export const UpdatedSubscriberDto$inboundSchema: z.ZodType<
  UpdatedSubscriberDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriberId: z.string(),
});

/** @internal */
export type UpdatedSubscriberDto$Outbound = {
  subscriberId: string;
};

/** @internal */
export const UpdatedSubscriberDto$outboundSchema: z.ZodType<
  UpdatedSubscriberDto$Outbound,
  z.ZodTypeDef,
  UpdatedSubscriberDto
> = z.object({
  subscriberId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatedSubscriberDto$ {
  /** @deprecated use `UpdatedSubscriberDto$inboundSchema` instead. */
  export const inboundSchema = UpdatedSubscriberDto$inboundSchema;
  /** @deprecated use `UpdatedSubscriberDto$outboundSchema` instead. */
  export const outboundSchema = UpdatedSubscriberDto$outboundSchema;
  /** @deprecated use `UpdatedSubscriberDto$Outbound` instead. */
  export type Outbound = UpdatedSubscriberDto$Outbound;
}

export function updatedSubscriberDtoToJSON(
  updatedSubscriberDto: UpdatedSubscriberDto,
): string {
  return JSON.stringify(
    UpdatedSubscriberDto$outboundSchema.parse(updatedSubscriberDto),
  );
}

export function updatedSubscriberDtoFromJSON(
  jsonString: string,
): SafeParseResult<UpdatedSubscriberDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatedSubscriberDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatedSubscriberDto' from JSON`,
  );
}
