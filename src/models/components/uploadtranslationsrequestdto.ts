/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The resource type to associate localizations with
 */
export const UploadTranslationsRequestDtoResourceType = {
  Workflow: "workflow",
} as const;
/**
 * The resource type to associate localizations with
 */
export type UploadTranslationsRequestDtoResourceType = ClosedEnum<
  typeof UploadTranslationsRequestDtoResourceType
>;

export type UploadTranslationsRequestDto = {
  /**
   * The resource ID to associate localizations with. Accepts identifier or slug format
   */
  resourceId: string;
  /**
   * The resource type to associate localizations with
   */
  resourceType: UploadTranslationsRequestDtoResourceType;
};

/** @internal */
export const UploadTranslationsRequestDtoResourceType$inboundSchema:
  z.ZodNativeEnum<typeof UploadTranslationsRequestDtoResourceType> = z
    .nativeEnum(UploadTranslationsRequestDtoResourceType);

/** @internal */
export const UploadTranslationsRequestDtoResourceType$outboundSchema:
  z.ZodNativeEnum<typeof UploadTranslationsRequestDtoResourceType> =
    UploadTranslationsRequestDtoResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadTranslationsRequestDtoResourceType$ {
  /** @deprecated use `UploadTranslationsRequestDtoResourceType$inboundSchema` instead. */
  export const inboundSchema =
    UploadTranslationsRequestDtoResourceType$inboundSchema;
  /** @deprecated use `UploadTranslationsRequestDtoResourceType$outboundSchema` instead. */
  export const outboundSchema =
    UploadTranslationsRequestDtoResourceType$outboundSchema;
}

/** @internal */
export const UploadTranslationsRequestDto$inboundSchema: z.ZodType<
  UploadTranslationsRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string(),
  resourceType: UploadTranslationsRequestDtoResourceType$inboundSchema,
});

/** @internal */
export type UploadTranslationsRequestDto$Outbound = {
  resourceId: string;
  resourceType: string;
};

/** @internal */
export const UploadTranslationsRequestDto$outboundSchema: z.ZodType<
  UploadTranslationsRequestDto$Outbound,
  z.ZodTypeDef,
  UploadTranslationsRequestDto
> = z.object({
  resourceId: z.string(),
  resourceType: UploadTranslationsRequestDtoResourceType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadTranslationsRequestDto$ {
  /** @deprecated use `UploadTranslationsRequestDto$inboundSchema` instead. */
  export const inboundSchema = UploadTranslationsRequestDto$inboundSchema;
  /** @deprecated use `UploadTranslationsRequestDto$outboundSchema` instead. */
  export const outboundSchema = UploadTranslationsRequestDto$outboundSchema;
  /** @deprecated use `UploadTranslationsRequestDto$Outbound` instead. */
  export type Outbound = UploadTranslationsRequestDto$Outbound;
}

export function uploadTranslationsRequestDtoToJSON(
  uploadTranslationsRequestDto: UploadTranslationsRequestDto,
): string {
  return JSON.stringify(
    UploadTranslationsRequestDto$outboundSchema.parse(
      uploadTranslationsRequestDto,
    ),
  );
}

export function uploadTranslationsRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<UploadTranslationsRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadTranslationsRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadTranslationsRequestDto' from JSON`,
  );
}
