/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MonthlyTypeEnum,
  MonthlyTypeEnum$inboundSchema,
  MonthlyTypeEnum$outboundSchema,
} from "./monthlytypeenum.js";
import {
  OrdinalEnum,
  OrdinalEnum$inboundSchema,
  OrdinalEnum$outboundSchema,
} from "./ordinalenum.js";
import {
  OrdinalValueEnum,
  OrdinalValueEnum$inboundSchema,
  OrdinalValueEnum$outboundSchema,
} from "./ordinalvalueenum.js";

export const WeekDays = {
  Monday: "monday",
  Tuesday: "tuesday",
  Wednesday: "wednesday",
  Thursday: "thursday",
  Friday: "friday",
  Saturday: "saturday",
  Sunday: "sunday",
} as const;
export type WeekDays = ClosedEnum<typeof WeekDays>;

export type DigestTimedConfigDto = {
  /**
   * Time at which the digest is triggered
   */
  atTime?: string | undefined;
  /**
   * Days of the week for the digest
   */
  weekDays?: Array<WeekDays> | undefined;
  /**
   * Specific days of the month for the digest
   */
  monthDays?: Array<number> | undefined;
  /**
   * Ordinal position for the digest
   */
  ordinal?: OrdinalEnum | undefined;
  /**
   * Value of the ordinal
   */
  ordinalValue?: OrdinalValueEnum | undefined;
  /**
   * Type of monthly schedule
   */
  monthlyType?: MonthlyTypeEnum | undefined;
  /**
   * Cron expression for scheduling
   */
  cronExpression?: string | undefined;
};

/** @internal */
export const WeekDays$inboundSchema: z.ZodNativeEnum<typeof WeekDays> = z
  .nativeEnum(WeekDays);

/** @internal */
export const WeekDays$outboundSchema: z.ZodNativeEnum<typeof WeekDays> =
  WeekDays$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeekDays$ {
  /** @deprecated use `WeekDays$inboundSchema` instead. */
  export const inboundSchema = WeekDays$inboundSchema;
  /** @deprecated use `WeekDays$outboundSchema` instead. */
  export const outboundSchema = WeekDays$outboundSchema;
}

/** @internal */
export const DigestTimedConfigDto$inboundSchema: z.ZodType<
  DigestTimedConfigDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  atTime: z.string().optional(),
  weekDays: z.array(WeekDays$inboundSchema).optional(),
  monthDays: z.array(z.number()).optional(),
  ordinal: OrdinalEnum$inboundSchema.optional(),
  ordinalValue: OrdinalValueEnum$inboundSchema.optional(),
  monthlyType: MonthlyTypeEnum$inboundSchema.optional(),
  cronExpression: z.string().optional(),
});

/** @internal */
export type DigestTimedConfigDto$Outbound = {
  atTime?: string | undefined;
  weekDays?: Array<string> | undefined;
  monthDays?: Array<number> | undefined;
  ordinal?: string | undefined;
  ordinalValue?: string | undefined;
  monthlyType?: string | undefined;
  cronExpression?: string | undefined;
};

/** @internal */
export const DigestTimedConfigDto$outboundSchema: z.ZodType<
  DigestTimedConfigDto$Outbound,
  z.ZodTypeDef,
  DigestTimedConfigDto
> = z.object({
  atTime: z.string().optional(),
  weekDays: z.array(WeekDays$outboundSchema).optional(),
  monthDays: z.array(z.number()).optional(),
  ordinal: OrdinalEnum$outboundSchema.optional(),
  ordinalValue: OrdinalValueEnum$outboundSchema.optional(),
  monthlyType: MonthlyTypeEnum$outboundSchema.optional(),
  cronExpression: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigestTimedConfigDto$ {
  /** @deprecated use `DigestTimedConfigDto$inboundSchema` instead. */
  export const inboundSchema = DigestTimedConfigDto$inboundSchema;
  /** @deprecated use `DigestTimedConfigDto$outboundSchema` instead. */
  export const outboundSchema = DigestTimedConfigDto$outboundSchema;
  /** @deprecated use `DigestTimedConfigDto$Outbound` instead. */
  export type Outbound = DigestTimedConfigDto$Outbound;
}

export function digestTimedConfigDtoToJSON(
  digestTimedConfigDto: DigestTimedConfigDto,
): string {
  return JSON.stringify(
    DigestTimedConfigDto$outboundSchema.parse(digestTimedConfigDto),
  );
}

export function digestTimedConfigDtoFromJSON(
  jsonString: string,
): SafeParseResult<DigestTimedConfigDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DigestTimedConfigDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DigestTimedConfigDto' from JSON`,
  );
}
