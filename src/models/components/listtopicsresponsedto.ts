/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TopicResponseDto,
  TopicResponseDto$inboundSchema,
  TopicResponseDto$Outbound,
  TopicResponseDto$outboundSchema,
} from "./topicresponsedto.js";

export type ListTopicsResponseDto = {
  /**
   * List of returned Topics
   */
  data: Array<TopicResponseDto>;
  /**
   * The cursor for the next page of results, or null if there are no more pages.
   */
  next: string | null;
  /**
   * The cursor for the previous page of results, or null if this is the first page.
   */
  previous: string | null;
};

/** @internal */
export const ListTopicsResponseDto$inboundSchema: z.ZodType<
  ListTopicsResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(TopicResponseDto$inboundSchema),
  next: z.nullable(z.string()),
  previous: z.nullable(z.string()),
});

/** @internal */
export type ListTopicsResponseDto$Outbound = {
  data: Array<TopicResponseDto$Outbound>;
  next: string | null;
  previous: string | null;
};

/** @internal */
export const ListTopicsResponseDto$outboundSchema: z.ZodType<
  ListTopicsResponseDto$Outbound,
  z.ZodTypeDef,
  ListTopicsResponseDto
> = z.object({
  data: z.array(TopicResponseDto$outboundSchema),
  next: z.nullable(z.string()),
  previous: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTopicsResponseDto$ {
  /** @deprecated use `ListTopicsResponseDto$inboundSchema` instead. */
  export const inboundSchema = ListTopicsResponseDto$inboundSchema;
  /** @deprecated use `ListTopicsResponseDto$outboundSchema` instead. */
  export const outboundSchema = ListTopicsResponseDto$outboundSchema;
  /** @deprecated use `ListTopicsResponseDto$Outbound` instead. */
  export type Outbound = ListTopicsResponseDto$Outbound;
}

export function listTopicsResponseDtoToJSON(
  listTopicsResponseDto: ListTopicsResponseDto,
): string {
  return JSON.stringify(
    ListTopicsResponseDto$outboundSchema.parse(listTopicsResponseDto),
  );
}

export function listTopicsResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<ListTopicsResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTopicsResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTopicsResponseDto' from JSON`,
  );
}
