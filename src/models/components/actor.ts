/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActorTypeEnum,
  ActorTypeEnum$inboundSchema,
  ActorTypeEnum$outboundSchema,
} from "./actortypeenum.js";

/**
 * The data associated with the actor, can be null if not applicable.
 */
export type ActorData = {};

export type Actor = {
  /**
   * The data associated with the actor, can be null if not applicable.
   */
  data: ActorData | null;
  /**
   * The type of the actor, indicating the role in the notification process.
   */
  type: ActorTypeEnum;
};

/** @internal */
export const ActorData$inboundSchema: z.ZodType<
  ActorData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActorData$Outbound = {};

/** @internal */
export const ActorData$outboundSchema: z.ZodType<
  ActorData$Outbound,
  z.ZodTypeDef,
  ActorData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActorData$ {
  /** @deprecated use `ActorData$inboundSchema` instead. */
  export const inboundSchema = ActorData$inboundSchema;
  /** @deprecated use `ActorData$outboundSchema` instead. */
  export const outboundSchema = ActorData$outboundSchema;
  /** @deprecated use `ActorData$Outbound` instead. */
  export type Outbound = ActorData$Outbound;
}

export function actorDataToJSON(actorData: ActorData): string {
  return JSON.stringify(ActorData$outboundSchema.parse(actorData));
}

export function actorDataFromJSON(
  jsonString: string,
): SafeParseResult<ActorData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActorData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActorData' from JSON`,
  );
}

/** @internal */
export const Actor$inboundSchema: z.ZodType<Actor, z.ZodTypeDef, unknown> = z
  .object({
    data: z.nullable(z.lazy(() => ActorData$inboundSchema)),
    type: ActorTypeEnum$inboundSchema,
  });

/** @internal */
export type Actor$Outbound = {
  data: ActorData$Outbound | null;
  type: string;
};

/** @internal */
export const Actor$outboundSchema: z.ZodType<
  Actor$Outbound,
  z.ZodTypeDef,
  Actor
> = z.object({
  data: z.nullable(z.lazy(() => ActorData$outboundSchema)),
  type: ActorTypeEnum$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Actor$ {
  /** @deprecated use `Actor$inboundSchema` instead. */
  export const inboundSchema = Actor$inboundSchema;
  /** @deprecated use `Actor$outboundSchema` instead. */
  export const outboundSchema = Actor$outboundSchema;
  /** @deprecated use `Actor$Outbound` instead. */
  export type Outbound = Actor$Outbound;
}

export function actorToJSON(actor: Actor): string {
  return JSON.stringify(Actor$outboundSchema.parse(actor));
}

export function actorFromJSON(
  jsonString: string,
): SafeParseResult<Actor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Actor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Actor' from JSON`,
  );
}
