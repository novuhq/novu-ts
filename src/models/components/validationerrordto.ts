/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Four = {};

export type ValidationErrorDtoValue = Four | string | number | boolean;

export type Errors = {
  messages: Array<string>;
  value: Four | string | number | boolean | null;
};

export type ValidationErrorDto = {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * A detailed error message.
   */
  message: string;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;
  /**
   * A record of validation errors keyed by field name
   */
  errors: { [k: string]: Errors };
};

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Four$Outbound = {};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const ValidationErrorDtoValue$inboundSchema: z.ZodType<
  ValidationErrorDtoValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Four$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type ValidationErrorDtoValue$Outbound =
  | Four$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const ValidationErrorDtoValue$outboundSchema: z.ZodType<
  ValidationErrorDtoValue$Outbound,
  z.ZodTypeDef,
  ValidationErrorDtoValue
> = z.union([
  z.lazy(() => Four$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidationErrorDtoValue$ {
  /** @deprecated use `ValidationErrorDtoValue$inboundSchema` instead. */
  export const inboundSchema = ValidationErrorDtoValue$inboundSchema;
  /** @deprecated use `ValidationErrorDtoValue$outboundSchema` instead. */
  export const outboundSchema = ValidationErrorDtoValue$outboundSchema;
  /** @deprecated use `ValidationErrorDtoValue$Outbound` instead. */
  export type Outbound = ValidationErrorDtoValue$Outbound;
}

export function validationErrorDtoValueToJSON(
  validationErrorDtoValue: ValidationErrorDtoValue,
): string {
  return JSON.stringify(
    ValidationErrorDtoValue$outboundSchema.parse(validationErrorDtoValue),
  );
}

export function validationErrorDtoValueFromJSON(
  jsonString: string,
): SafeParseResult<ValidationErrorDtoValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidationErrorDtoValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidationErrorDtoValue' from JSON`,
  );
}

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z
  .object({
    messages: z.array(z.string()),
    value: z.nullable(
      z.union([
        z.lazy(() => Four$inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
      ]),
    ),
  });

/** @internal */
export type Errors$Outbound = {
  messages: Array<string>;
  value: Four$Outbound | string | number | boolean | null;
};

/** @internal */
export const Errors$outboundSchema: z.ZodType<
  Errors$Outbound,
  z.ZodTypeDef,
  Errors
> = z.object({
  messages: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
  /** @deprecated use `Errors$inboundSchema` instead. */
  export const inboundSchema = Errors$inboundSchema;
  /** @deprecated use `Errors$outboundSchema` instead. */
  export const outboundSchema = Errors$outboundSchema;
  /** @deprecated use `Errors$Outbound` instead. */
  export type Outbound = Errors$Outbound;
}

export function errorsToJSON(errors: Errors): string {
  return JSON.stringify(Errors$outboundSchema.parse(errors));
}

export function errorsFromJSON(
  jsonString: string,
): SafeParseResult<Errors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Errors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Errors' from JSON`,
  );
}

/** @internal */
export const ValidationErrorDto$inboundSchema: z.ZodType<
  ValidationErrorDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number(),
  timestamp: z.string(),
  path: z.string(),
  message: z.string(),
  ctx: z.record(z.any()).optional(),
  errorId: z.string().optional(),
  errors: z.record(z.lazy(() => Errors$inboundSchema)),
});

/** @internal */
export type ValidationErrorDto$Outbound = {
  statusCode: number;
  timestamp: string;
  path: string;
  message: string;
  ctx?: { [k: string]: any } | undefined;
  errorId?: string | undefined;
  errors: { [k: string]: Errors$Outbound };
};

/** @internal */
export const ValidationErrorDto$outboundSchema: z.ZodType<
  ValidationErrorDto$Outbound,
  z.ZodTypeDef,
  ValidationErrorDto
> = z.object({
  statusCode: z.number(),
  timestamp: z.string(),
  path: z.string(),
  message: z.string(),
  ctx: z.record(z.any()).optional(),
  errorId: z.string().optional(),
  errors: z.record(z.lazy(() => Errors$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidationErrorDto$ {
  /** @deprecated use `ValidationErrorDto$inboundSchema` instead. */
  export const inboundSchema = ValidationErrorDto$inboundSchema;
  /** @deprecated use `ValidationErrorDto$outboundSchema` instead. */
  export const outboundSchema = ValidationErrorDto$outboundSchema;
  /** @deprecated use `ValidationErrorDto$Outbound` instead. */
  export type Outbound = ValidationErrorDto$Outbound;
}

export function validationErrorDtoToJSON(
  validationErrorDto: ValidationErrorDto,
): string {
  return JSON.stringify(
    ValidationErrorDto$outboundSchema.parse(validationErrorDto),
  );
}

export function validationErrorDtoFromJSON(
  jsonString: string,
): SafeParseResult<ValidationErrorDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidationErrorDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidationErrorDto' from JSON`,
  );
}
