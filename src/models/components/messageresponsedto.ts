/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    EmailBlock,
    EmailBlock$inboundSchema,
    EmailBlock$Outbound,
    EmailBlock$outboundSchema,
} from "./emailblock.js";
import {
    MessageCTA,
    MessageCTA$inboundSchema,
    MessageCTA$Outbound,
    MessageCTA$outboundSchema,
} from "./messagecta.js";
import {
    SubscriberResponseDto,
    SubscriberResponseDto$inboundSchema,
    SubscriberResponseDto$Outbound,
    SubscriberResponseDto$outboundSchema,
} from "./subscriberresponsedto.js";
import {
    WorkflowResponse,
    WorkflowResponse$inboundSchema,
    WorkflowResponse$Outbound,
    WorkflowResponse$outboundSchema,
} from "./workflowresponse.js";
import * as z from "zod";

export type FeedId = {};

export const MessageResponseDtoChannel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type MessageResponseDtoChannel = ClosedEnum<typeof MessageResponseDtoChannel>;

export type Content = EmailBlock | string;

/**
 * Provider specific overrides used when triggering the notification
 */
export type Overrides = {};

/**
 * The payload that was used to send the notification trigger
 */
export type MessageResponseDtoPayload = {};

export const MessageResponseDtoStatus = {
    Sent: "sent",
    Error: "error",
    Warning: "warning",
} as const;
export type MessageResponseDtoStatus = ClosedEnum<typeof MessageResponseDtoStatus>;

export type MessageResponseDto = {
    environmentId: string;
    feedId?: FeedId | null | undefined;
    id?: string | undefined;
    messageTemplateId: string;
    notificationId: string;
    organizationId: string;
    subscriberId: string;
    templateId: string;
    channel: MessageResponseDtoChannel;
    content: EmailBlock | string;
    createdAt: string;
    cta: MessageCTA;
    deviceTokens?: Array<string> | undefined;
    directWebhookUrl?: string | undefined;
    email?: string | undefined;
    errorId: string;
    errorText: string;
    lastReadDate?: string | undefined;
    lastSeenDate?: string | undefined;
    /**
     * Provider specific overrides used when triggering the notification
     */
    overrides: Overrides;
    /**
     * The payload that was used to send the notification trigger
     */
    payload: MessageResponseDtoPayload;
    phone?: string | undefined;
    providerId?: string | undefined;
    read: boolean;
    seen: boolean;
    status: MessageResponseDtoStatus;
    subject?: string | undefined;
    subscriber?: SubscriberResponseDto | undefined;
    template?: WorkflowResponse | undefined;
    templateIdentifier?: string | undefined;
    title?: string | undefined;
    transactionId: string;
};

/** @internal */
export const FeedId$inboundSchema: z.ZodType<FeedId, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type FeedId$Outbound = {};

/** @internal */
export const FeedId$outboundSchema: z.ZodType<FeedId$Outbound, z.ZodTypeDef, FeedId> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedId$ {
    /** @deprecated use `FeedId$inboundSchema` instead. */
    export const inboundSchema = FeedId$inboundSchema;
    /** @deprecated use `FeedId$outboundSchema` instead. */
    export const outboundSchema = FeedId$outboundSchema;
    /** @deprecated use `FeedId$Outbound` instead. */
    export type Outbound = FeedId$Outbound;
}

/** @internal */
export const MessageResponseDtoChannel$inboundSchema: z.ZodNativeEnum<
    typeof MessageResponseDtoChannel
> = z.nativeEnum(MessageResponseDtoChannel);

/** @internal */
export const MessageResponseDtoChannel$outboundSchema: z.ZodNativeEnum<
    typeof MessageResponseDtoChannel
> = MessageResponseDtoChannel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageResponseDtoChannel$ {
    /** @deprecated use `MessageResponseDtoChannel$inboundSchema` instead. */
    export const inboundSchema = MessageResponseDtoChannel$inboundSchema;
    /** @deprecated use `MessageResponseDtoChannel$outboundSchema` instead. */
    export const outboundSchema = MessageResponseDtoChannel$outboundSchema;
}

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> = z.union([
    EmailBlock$inboundSchema,
    z.string(),
]);

/** @internal */
export type Content$Outbound = EmailBlock$Outbound | string;

/** @internal */
export const Content$outboundSchema: z.ZodType<Content$Outbound, z.ZodTypeDef, Content> = z.union([
    EmailBlock$outboundSchema,
    z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
    /** @deprecated use `Content$inboundSchema` instead. */
    export const inboundSchema = Content$inboundSchema;
    /** @deprecated use `Content$outboundSchema` instead. */
    export const outboundSchema = Content$outboundSchema;
    /** @deprecated use `Content$Outbound` instead. */
    export type Outbound = Content$Outbound;
}

/** @internal */
export const Overrides$inboundSchema: z.ZodType<Overrides, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Overrides$Outbound = {};

/** @internal */
export const Overrides$outboundSchema: z.ZodType<Overrides$Outbound, z.ZodTypeDef, Overrides> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Overrides$ {
    /** @deprecated use `Overrides$inboundSchema` instead. */
    export const inboundSchema = Overrides$inboundSchema;
    /** @deprecated use `Overrides$outboundSchema` instead. */
    export const outboundSchema = Overrides$outboundSchema;
    /** @deprecated use `Overrides$Outbound` instead. */
    export type Outbound = Overrides$Outbound;
}

/** @internal */
export const MessageResponseDtoPayload$inboundSchema: z.ZodType<
    MessageResponseDtoPayload,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type MessageResponseDtoPayload$Outbound = {};

/** @internal */
export const MessageResponseDtoPayload$outboundSchema: z.ZodType<
    MessageResponseDtoPayload$Outbound,
    z.ZodTypeDef,
    MessageResponseDtoPayload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageResponseDtoPayload$ {
    /** @deprecated use `MessageResponseDtoPayload$inboundSchema` instead. */
    export const inboundSchema = MessageResponseDtoPayload$inboundSchema;
    /** @deprecated use `MessageResponseDtoPayload$outboundSchema` instead. */
    export const outboundSchema = MessageResponseDtoPayload$outboundSchema;
    /** @deprecated use `MessageResponseDtoPayload$Outbound` instead. */
    export type Outbound = MessageResponseDtoPayload$Outbound;
}

/** @internal */
export const MessageResponseDtoStatus$inboundSchema: z.ZodNativeEnum<
    typeof MessageResponseDtoStatus
> = z.nativeEnum(MessageResponseDtoStatus);

/** @internal */
export const MessageResponseDtoStatus$outboundSchema: z.ZodNativeEnum<
    typeof MessageResponseDtoStatus
> = MessageResponseDtoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageResponseDtoStatus$ {
    /** @deprecated use `MessageResponseDtoStatus$inboundSchema` instead. */
    export const inboundSchema = MessageResponseDtoStatus$inboundSchema;
    /** @deprecated use `MessageResponseDtoStatus$outboundSchema` instead. */
    export const outboundSchema = MessageResponseDtoStatus$outboundSchema;
}

/** @internal */
export const MessageResponseDto$inboundSchema: z.ZodType<
    MessageResponseDto,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        _environmentId: z.string(),
        _feedId: z.nullable(z.lazy(() => FeedId$inboundSchema)).optional(),
        _id: z.string().optional(),
        _messageTemplateId: z.string(),
        _notificationId: z.string(),
        _organizationId: z.string(),
        _subscriberId: z.string(),
        _templateId: z.string(),
        channel: MessageResponseDtoChannel$inboundSchema,
        content: z.union([EmailBlock$inboundSchema, z.string()]),
        createdAt: z.string(),
        cta: MessageCTA$inboundSchema,
        deviceTokens: z.array(z.string()).optional(),
        directWebhookUrl: z.string().optional(),
        email: z.string().optional(),
        errorId: z.string(),
        errorText: z.string(),
        lastReadDate: z.string().optional(),
        lastSeenDate: z.string().optional(),
        overrides: z.lazy(() => Overrides$inboundSchema),
        payload: z.lazy(() => MessageResponseDtoPayload$inboundSchema),
        phone: z.string().optional(),
        providerId: z.string().optional(),
        read: z.boolean(),
        seen: z.boolean(),
        status: MessageResponseDtoStatus$inboundSchema,
        subject: z.string().optional(),
        subscriber: SubscriberResponseDto$inboundSchema.optional(),
        template: WorkflowResponse$inboundSchema.optional(),
        templateIdentifier: z.string().optional(),
        title: z.string().optional(),
        transactionId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            _environmentId: "environmentId",
            _feedId: "feedId",
            _id: "id",
            _messageTemplateId: "messageTemplateId",
            _notificationId: "notificationId",
            _organizationId: "organizationId",
            _subscriberId: "subscriberId",
            _templateId: "templateId",
        });
    });

/** @internal */
export type MessageResponseDto$Outbound = {
    _environmentId: string;
    _feedId?: FeedId$Outbound | null | undefined;
    _id?: string | undefined;
    _messageTemplateId: string;
    _notificationId: string;
    _organizationId: string;
    _subscriberId: string;
    _templateId: string;
    channel: string;
    content: EmailBlock$Outbound | string;
    createdAt: string;
    cta: MessageCTA$Outbound;
    deviceTokens?: Array<string> | undefined;
    directWebhookUrl?: string | undefined;
    email?: string | undefined;
    errorId: string;
    errorText: string;
    lastReadDate?: string | undefined;
    lastSeenDate?: string | undefined;
    overrides: Overrides$Outbound;
    payload: MessageResponseDtoPayload$Outbound;
    phone?: string | undefined;
    providerId?: string | undefined;
    read: boolean;
    seen: boolean;
    status: string;
    subject?: string | undefined;
    subscriber?: SubscriberResponseDto$Outbound | undefined;
    template?: WorkflowResponse$Outbound | undefined;
    templateIdentifier?: string | undefined;
    title?: string | undefined;
    transactionId: string;
};

/** @internal */
export const MessageResponseDto$outboundSchema: z.ZodType<
    MessageResponseDto$Outbound,
    z.ZodTypeDef,
    MessageResponseDto
> = z
    .object({
        environmentId: z.string(),
        feedId: z.nullable(z.lazy(() => FeedId$outboundSchema)).optional(),
        id: z.string().optional(),
        messageTemplateId: z.string(),
        notificationId: z.string(),
        organizationId: z.string(),
        subscriberId: z.string(),
        templateId: z.string(),
        channel: MessageResponseDtoChannel$outboundSchema,
        content: z.union([EmailBlock$outboundSchema, z.string()]),
        createdAt: z.string(),
        cta: MessageCTA$outboundSchema,
        deviceTokens: z.array(z.string()).optional(),
        directWebhookUrl: z.string().optional(),
        email: z.string().optional(),
        errorId: z.string(),
        errorText: z.string(),
        lastReadDate: z.string().optional(),
        lastSeenDate: z.string().optional(),
        overrides: z.lazy(() => Overrides$outboundSchema),
        payload: z.lazy(() => MessageResponseDtoPayload$outboundSchema),
        phone: z.string().optional(),
        providerId: z.string().optional(),
        read: z.boolean(),
        seen: z.boolean(),
        status: MessageResponseDtoStatus$outboundSchema,
        subject: z.string().optional(),
        subscriber: SubscriberResponseDto$outboundSchema.optional(),
        template: WorkflowResponse$outboundSchema.optional(),
        templateIdentifier: z.string().optional(),
        title: z.string().optional(),
        transactionId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            environmentId: "_environmentId",
            feedId: "_feedId",
            id: "_id",
            messageTemplateId: "_messageTemplateId",
            notificationId: "_notificationId",
            organizationId: "_organizationId",
            subscriberId: "_subscriberId",
            templateId: "_templateId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageResponseDto$ {
    /** @deprecated use `MessageResponseDto$inboundSchema` instead. */
    export const inboundSchema = MessageResponseDto$inboundSchema;
    /** @deprecated use `MessageResponseDto$outboundSchema` instead. */
    export const outboundSchema = MessageResponseDto$outboundSchema;
    /** @deprecated use `MessageResponseDto$Outbound` instead. */
    export type Outbound = MessageResponseDto$Outbound;
}
