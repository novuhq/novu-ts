/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SubscriberResponseDtoOptional,
  SubscriberResponseDtoOptional$inboundSchema,
  SubscriberResponseDtoOptional$Outbound,
  SubscriberResponseDtoOptional$outboundSchema,
} from "./subscriberresponsedtooptional.js";

export type LayoutPreviewPayloadDto = {
  /**
   * Partial subscriber information
   */
  subscriber?: SubscriberResponseDtoOptional | undefined;
};

/** @internal */
export const LayoutPreviewPayloadDto$inboundSchema: z.ZodType<
  LayoutPreviewPayloadDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  subscriber: SubscriberResponseDtoOptional$inboundSchema.optional(),
});

/** @internal */
export type LayoutPreviewPayloadDto$Outbound = {
  subscriber?: SubscriberResponseDtoOptional$Outbound | undefined;
};

/** @internal */
export const LayoutPreviewPayloadDto$outboundSchema: z.ZodType<
  LayoutPreviewPayloadDto$Outbound,
  z.ZodTypeDef,
  LayoutPreviewPayloadDto
> = z.object({
  subscriber: SubscriberResponseDtoOptional$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LayoutPreviewPayloadDto$ {
  /** @deprecated use `LayoutPreviewPayloadDto$inboundSchema` instead. */
  export const inboundSchema = LayoutPreviewPayloadDto$inboundSchema;
  /** @deprecated use `LayoutPreviewPayloadDto$outboundSchema` instead. */
  export const outboundSchema = LayoutPreviewPayloadDto$outboundSchema;
  /** @deprecated use `LayoutPreviewPayloadDto$Outbound` instead. */
  export type Outbound = LayoutPreviewPayloadDto$Outbound;
}

export function layoutPreviewPayloadDtoToJSON(
  layoutPreviewPayloadDto: LayoutPreviewPayloadDto,
): string {
  return JSON.stringify(
    LayoutPreviewPayloadDto$outboundSchema.parse(layoutPreviewPayloadDto),
  );
}

export function layoutPreviewPayloadDtoFromJSON(
  jsonString: string,
): SafeParseResult<LayoutPreviewPayloadDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LayoutPreviewPayloadDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LayoutPreviewPayloadDto' from JSON`,
  );
}
