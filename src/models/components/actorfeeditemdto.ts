/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActorTypeEnum,
  ActorTypeEnum$inboundSchema,
  ActorTypeEnum$outboundSchema,
} from "./actortypeenum.js";

export type ActorFeedItemDto = {
  /**
   * The data associated with the actor, can be null if not applicable.
   */
  data: string | null;
  /**
   * The type of the actor, indicating the role in the notification process.
   */
  type: ActorTypeEnum;
};

/** @internal */
export const ActorFeedItemDto$inboundSchema: z.ZodType<
  ActorFeedItemDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.string()),
  type: ActorTypeEnum$inboundSchema,
});

/** @internal */
export type ActorFeedItemDto$Outbound = {
  data: string | null;
  type: string;
};

/** @internal */
export const ActorFeedItemDto$outboundSchema: z.ZodType<
  ActorFeedItemDto$Outbound,
  z.ZodTypeDef,
  ActorFeedItemDto
> = z.object({
  data: z.nullable(z.string()),
  type: ActorTypeEnum$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActorFeedItemDto$ {
  /** @deprecated use `ActorFeedItemDto$inboundSchema` instead. */
  export const inboundSchema = ActorFeedItemDto$inboundSchema;
  /** @deprecated use `ActorFeedItemDto$outboundSchema` instead. */
  export const outboundSchema = ActorFeedItemDto$outboundSchema;
  /** @deprecated use `ActorFeedItemDto$Outbound` instead. */
  export type Outbound = ActorFeedItemDto$Outbound;
}

export function actorFeedItemDtoToJSON(
  actorFeedItemDto: ActorFeedItemDto,
): string {
  return JSON.stringify(
    ActorFeedItemDto$outboundSchema.parse(actorFeedItemDto),
  );
}

export function actorFeedItemDtoFromJSON(
  jsonString: string,
): SafeParseResult<ActorFeedItemDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActorFeedItemDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActorFeedItemDto' from JSON`,
  );
}
