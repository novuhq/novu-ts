/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmailLayoutRenderOutput,
  EmailLayoutRenderOutput$inboundSchema,
  EmailLayoutRenderOutput$Outbound,
  EmailLayoutRenderOutput$outboundSchema,
} from "./emaillayoutrenderoutput.js";
import {
  LayoutPreviewPayloadDto,
  LayoutPreviewPayloadDto$inboundSchema,
  LayoutPreviewPayloadDto$Outbound,
  LayoutPreviewPayloadDto$outboundSchema,
} from "./layoutpreviewpayloaddto.js";

export const ResultType = {
  Email: "email",
} as const;
export type ResultType = ClosedEnum<typeof ResultType>;

export type One = {
  type?: ResultType | undefined;
  preview?: EmailLayoutRenderOutput | undefined;
};

/**
 * Preview result
 */
export type Result = One;

export type GenerateLayoutPreviewResponseDto = {
  /**
   * Preview payload example
   */
  previewPayloadExample: LayoutPreviewPayloadDto;
  /**
   * The payload schema that was used to generate the preview payload example
   */
  schema?: { [k: string]: any } | null | undefined;
  /**
   * Preview result
   */
  result: One;
};

/** @internal */
export const ResultType$inboundSchema: z.ZodNativeEnum<typeof ResultType> = z
  .nativeEnum(ResultType);

/** @internal */
export const ResultType$outboundSchema: z.ZodNativeEnum<typeof ResultType> =
  ResultType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultType$ {
  /** @deprecated use `ResultType$inboundSchema` instead. */
  export const inboundSchema = ResultType$inboundSchema;
  /** @deprecated use `ResultType$outboundSchema` instead. */
  export const outboundSchema = ResultType$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    type: ResultType$inboundSchema.optional(),
    preview: EmailLayoutRenderOutput$inboundSchema.optional(),
  });

/** @internal */
export type One$Outbound = {
  type?: string | undefined;
  preview?: EmailLayoutRenderOutput$Outbound | undefined;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    type: ResultType$outboundSchema.optional(),
    preview: EmailLayoutRenderOutput$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .lazy(() => One$inboundSchema);

/** @internal */
export type Result$Outbound = One$Outbound;

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.lazy(() => One$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const GenerateLayoutPreviewResponseDto$inboundSchema: z.ZodType<
  GenerateLayoutPreviewResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  previewPayloadExample: LayoutPreviewPayloadDto$inboundSchema,
  schema: z.nullable(z.record(z.any())).optional(),
  result: z.lazy(() => One$inboundSchema),
});

/** @internal */
export type GenerateLayoutPreviewResponseDto$Outbound = {
  previewPayloadExample: LayoutPreviewPayloadDto$Outbound;
  schema?: { [k: string]: any } | null | undefined;
  result: One$Outbound;
};

/** @internal */
export const GenerateLayoutPreviewResponseDto$outboundSchema: z.ZodType<
  GenerateLayoutPreviewResponseDto$Outbound,
  z.ZodTypeDef,
  GenerateLayoutPreviewResponseDto
> = z.object({
  previewPayloadExample: LayoutPreviewPayloadDto$outboundSchema,
  schema: z.nullable(z.record(z.any())).optional(),
  result: z.lazy(() => One$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenerateLayoutPreviewResponseDto$ {
  /** @deprecated use `GenerateLayoutPreviewResponseDto$inboundSchema` instead. */
  export const inboundSchema = GenerateLayoutPreviewResponseDto$inboundSchema;
  /** @deprecated use `GenerateLayoutPreviewResponseDto$outboundSchema` instead. */
  export const outboundSchema = GenerateLayoutPreviewResponseDto$outboundSchema;
  /** @deprecated use `GenerateLayoutPreviewResponseDto$Outbound` instead. */
  export type Outbound = GenerateLayoutPreviewResponseDto$Outbound;
}

export function generateLayoutPreviewResponseDtoToJSON(
  generateLayoutPreviewResponseDto: GenerateLayoutPreviewResponseDto,
): string {
  return JSON.stringify(
    GenerateLayoutPreviewResponseDto$outboundSchema.parse(
      generateLayoutPreviewResponseDto,
    ),
  );
}

export function generateLayoutPreviewResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<GenerateLayoutPreviewResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenerateLayoutPreviewResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenerateLayoutPreviewResponseDto' from JSON`,
  );
}
