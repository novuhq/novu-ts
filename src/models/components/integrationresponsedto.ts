/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CredentialsDto,
  CredentialsDto$inboundSchema,
  CredentialsDto$Outbound,
  CredentialsDto$outboundSchema,
} from "./credentialsdto.js";
import {
  StepFilterDto,
  StepFilterDto$inboundSchema,
  StepFilterDto$Outbound,
  StepFilterDto$outboundSchema,
} from "./stepfilterdto.js";

/**
 * The channel type for the integration, which defines how the integration communicates (e.g., email, SMS).
 */
export const Channel = {
  InApp: "in_app",
  Email: "email",
  Sms: "sms",
  Chat: "chat",
  Push: "push",
} as const;
/**
 * The channel type for the integration, which defines how the integration communicates (e.g., email, SMS).
 */
export type Channel = ClosedEnum<typeof Channel>;

export type IntegrationResponseDto = {
  /**
   * The unique identifier of the integration record in the database. This is automatically generated.
   */
  id?: string | undefined;
  /**
   * The unique identifier for the environment associated with this integration. This links to the Environment collection.
   */
  environmentId: string;
  /**
   * The unique identifier for the organization that owns this integration. This links to the Organization collection.
   */
  organizationId: string;
  /**
   * The name of the integration, which is used to identify it in the user interface.
   */
  name: string;
  /**
   * A unique string identifier for the integration, often used for API calls or internal references.
   */
  identifier: string;
  /**
   * The identifier for the provider of the integration (e.g., "mailgun", "twilio").
   */
  providerId: string;
  /**
   * The channel type for the integration, which defines how the integration communicates (e.g., email, SMS).
   */
  channel: Channel;
  /**
   * The credentials required for the integration to function, including API keys and other sensitive information.
   */
  credentials: CredentialsDto;
  /**
   * Indicates whether the integration is currently active. An active integration will process events and messages.
   */
  active: boolean;
  /**
   * Indicates whether the integration has been marked as deleted (soft delete).
   */
  deleted: boolean;
  /**
   * The timestamp indicating when the integration was deleted. This is set when the integration is soft deleted.
   */
  deletedAt?: string | undefined;
  /**
   * The identifier of the user who performed the deletion of this integration. Useful for audit trails.
   */
  deletedBy?: string | undefined;
  /**
   * Indicates whether this integration is marked as primary. A primary integration is often the default choice for processing.
   */
  primary: boolean;
  /**
   * An array of conditions associated with the integration that may influence its behavior or processing logic.
   */
  conditions?: Array<StepFilterDto> | undefined;
};

/** @internal */
export const Channel$inboundSchema: z.ZodNativeEnum<typeof Channel> = z
  .nativeEnum(Channel);

/** @internal */
export const Channel$outboundSchema: z.ZodNativeEnum<typeof Channel> =
  Channel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Channel$ {
  /** @deprecated use `Channel$inboundSchema` instead. */
  export const inboundSchema = Channel$inboundSchema;
  /** @deprecated use `Channel$outboundSchema` instead. */
  export const outboundSchema = Channel$outboundSchema;
}

/** @internal */
export const IntegrationResponseDto$inboundSchema: z.ZodType<
  IntegrationResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  _environmentId: z.string(),
  _organizationId: z.string(),
  name: z.string(),
  identifier: z.string(),
  providerId: z.string(),
  channel: Channel$inboundSchema,
  credentials: CredentialsDto$inboundSchema,
  active: z.boolean(),
  deleted: z.boolean(),
  deletedAt: z.string().optional(),
  deletedBy: z.string().optional(),
  primary: z.boolean(),
  conditions: z.array(StepFilterDto$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_environmentId": "environmentId",
    "_organizationId": "organizationId",
  });
});

/** @internal */
export type IntegrationResponseDto$Outbound = {
  _id?: string | undefined;
  _environmentId: string;
  _organizationId: string;
  name: string;
  identifier: string;
  providerId: string;
  channel: string;
  credentials: CredentialsDto$Outbound;
  active: boolean;
  deleted: boolean;
  deletedAt?: string | undefined;
  deletedBy?: string | undefined;
  primary: boolean;
  conditions?: Array<StepFilterDto$Outbound> | undefined;
};

/** @internal */
export const IntegrationResponseDto$outboundSchema: z.ZodType<
  IntegrationResponseDto$Outbound,
  z.ZodTypeDef,
  IntegrationResponseDto
> = z.object({
  id: z.string().optional(),
  environmentId: z.string(),
  organizationId: z.string(),
  name: z.string(),
  identifier: z.string(),
  providerId: z.string(),
  channel: Channel$outboundSchema,
  credentials: CredentialsDto$outboundSchema,
  active: z.boolean(),
  deleted: z.boolean(),
  deletedAt: z.string().optional(),
  deletedBy: z.string().optional(),
  primary: z.boolean(),
  conditions: z.array(StepFilterDto$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    environmentId: "_environmentId",
    organizationId: "_organizationId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationResponseDto$ {
  /** @deprecated use `IntegrationResponseDto$inboundSchema` instead. */
  export const inboundSchema = IntegrationResponseDto$inboundSchema;
  /** @deprecated use `IntegrationResponseDto$outboundSchema` instead. */
  export const outboundSchema = IntegrationResponseDto$outboundSchema;
  /** @deprecated use `IntegrationResponseDto$Outbound` instead. */
  export type Outbound = IntegrationResponseDto$Outbound;
}

export function integrationResponseDtoToJSON(
  integrationResponseDto: IntegrationResponseDto,
): string {
  return JSON.stringify(
    IntegrationResponseDto$outboundSchema.parse(integrationResponseDto),
  );
}

export function integrationResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<IntegrationResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IntegrationResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IntegrationResponseDto' from JSON`,
  );
}
