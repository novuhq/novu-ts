/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TopicDto,
  TopicDto$inboundSchema,
  TopicDto$Outbound,
  TopicDto$outboundSchema,
} from "./topicdto.js";

export type FilterTopicsResponseDto = {
  /**
   * The list of topics
   */
  data: Array<TopicDto>;
  /**
   * The current page number
   */
  page: number;
  /**
   * The number of items per page
   */
  pageSize: number;
  /**
   * The total number of items
   */
  totalCount: number;
};

/** @internal */
export const FilterTopicsResponseDto$inboundSchema: z.ZodType<
  FilterTopicsResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(TopicDto$inboundSchema),
  page: z.number(),
  pageSize: z.number(),
  totalCount: z.number(),
});

/** @internal */
export type FilterTopicsResponseDto$Outbound = {
  data: Array<TopicDto$Outbound>;
  page: number;
  pageSize: number;
  totalCount: number;
};

/** @internal */
export const FilterTopicsResponseDto$outboundSchema: z.ZodType<
  FilterTopicsResponseDto$Outbound,
  z.ZodTypeDef,
  FilterTopicsResponseDto
> = z.object({
  data: z.array(TopicDto$outboundSchema),
  page: z.number(),
  pageSize: z.number(),
  totalCount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterTopicsResponseDto$ {
  /** @deprecated use `FilterTopicsResponseDto$inboundSchema` instead. */
  export const inboundSchema = FilterTopicsResponseDto$inboundSchema;
  /** @deprecated use `FilterTopicsResponseDto$outboundSchema` instead. */
  export const outboundSchema = FilterTopicsResponseDto$outboundSchema;
  /** @deprecated use `FilterTopicsResponseDto$Outbound` instead. */
  export type Outbound = FilterTopicsResponseDto$Outbound;
}

export function filterTopicsResponseDtoToJSON(
  filterTopicsResponseDto: FilterTopicsResponseDto,
): string {
  return JSON.stringify(
    FilterTopicsResponseDto$outboundSchema.parse(filterTopicsResponseDto),
  );
}

export function filterTopicsResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<FilterTopicsResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterTopicsResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterTopicsResponseDto' from JSON`,
  );
}
