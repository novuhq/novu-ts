/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowToStepControlValuesDto = {
  /**
   * A mapping of step IDs to their corresponding data.
   */
  steps?: { [k: string]: { [k: string]: any } } | undefined;
};

/** @internal */
export const WorkflowToStepControlValuesDto$inboundSchema: z.ZodType<
  WorkflowToStepControlValuesDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  steps: z.record(z.record(z.any())).optional(),
});

/** @internal */
export type WorkflowToStepControlValuesDto$Outbound = {
  steps?: { [k: string]: { [k: string]: any } } | undefined;
};

/** @internal */
export const WorkflowToStepControlValuesDto$outboundSchema: z.ZodType<
  WorkflowToStepControlValuesDto$Outbound,
  z.ZodTypeDef,
  WorkflowToStepControlValuesDto
> = z.object({
  steps: z.record(z.record(z.any())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowToStepControlValuesDto$ {
  /** @deprecated use `WorkflowToStepControlValuesDto$inboundSchema` instead. */
  export const inboundSchema = WorkflowToStepControlValuesDto$inboundSchema;
  /** @deprecated use `WorkflowToStepControlValuesDto$outboundSchema` instead. */
  export const outboundSchema = WorkflowToStepControlValuesDto$outboundSchema;
  /** @deprecated use `WorkflowToStepControlValuesDto$Outbound` instead. */
  export type Outbound = WorkflowToStepControlValuesDto$Outbound;
}

export function workflowToStepControlValuesDtoToJSON(
  workflowToStepControlValuesDto: WorkflowToStepControlValuesDto,
): string {
  return JSON.stringify(
    WorkflowToStepControlValuesDto$outboundSchema.parse(
      workflowToStepControlValuesDto,
    ),
  );
}

export function workflowToStepControlValuesDtoFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowToStepControlValuesDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowToStepControlValuesDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowToStepControlValuesDto' from JSON`,
  );
}
