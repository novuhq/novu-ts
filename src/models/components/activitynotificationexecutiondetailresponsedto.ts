/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProvidersIdEnum,
  ProvidersIdEnum$inboundSchema,
  ProvidersIdEnum$outboundSchema,
} from "./providersidenum.js";

/**
 * Status of the execution detail
 */
export const ActivityNotificationExecutionDetailResponseDtoStatus = {
  Success: "Success",
  Warning: "Warning",
  Failed: "Failed",
  Pending: "Pending",
  Queued: "Queued",
  ReadConfirmation: "ReadConfirmation",
} as const;
/**
 * Status of the execution detail
 */
export type ActivityNotificationExecutionDetailResponseDtoStatus = ClosedEnum<
  typeof ActivityNotificationExecutionDetailResponseDtoStatus
>;

/**
 * Source of the execution detail
 */
export const Source = {
  Credentials: "Credentials",
  Internal: "Internal",
  Payload: "Payload",
  Webhook: "Webhook",
} as const;
/**
 * Source of the execution detail
 */
export type Source = ClosedEnum<typeof Source>;

export type ActivityNotificationExecutionDetailResponseDto = {
  /**
   * Unique identifier of the execution detail
   */
  id: string;
  /**
   * Unique identifier of the job
   */
  jobId: string;
  /**
   * Status of the execution detail
   */
  status: ActivityNotificationExecutionDetailResponseDtoStatus;
  /**
   * Detailed information about the execution
   */
  detail: string;
  /**
   * Whether the execution is a retry or not
   */
  isRetry: boolean;
  /**
   * Whether the execution is a test or not
   */
  isTest: boolean;
  /**
   * Provider ID of the job
   */
  providerId: ProvidersIdEnum;
  /**
   * Raw data of the execution
   */
  raw?: string | undefined;
  /**
   * Source of the execution detail
   */
  source: Source;
};

/** @internal */
export const ActivityNotificationExecutionDetailResponseDtoStatus$inboundSchema:
  z.ZodNativeEnum<typeof ActivityNotificationExecutionDetailResponseDtoStatus> =
    z.nativeEnum(ActivityNotificationExecutionDetailResponseDtoStatus);

/** @internal */
export const ActivityNotificationExecutionDetailResponseDtoStatus$outboundSchema:
  z.ZodNativeEnum<typeof ActivityNotificationExecutionDetailResponseDtoStatus> =
    ActivityNotificationExecutionDetailResponseDtoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNotificationExecutionDetailResponseDtoStatus$ {
  /** @deprecated use `ActivityNotificationExecutionDetailResponseDtoStatus$inboundSchema` instead. */
  export const inboundSchema =
    ActivityNotificationExecutionDetailResponseDtoStatus$inboundSchema;
  /** @deprecated use `ActivityNotificationExecutionDetailResponseDtoStatus$outboundSchema` instead. */
  export const outboundSchema =
    ActivityNotificationExecutionDetailResponseDtoStatus$outboundSchema;
}

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> = z
  .nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const ActivityNotificationExecutionDetailResponseDto$inboundSchema:
  z.ZodType<
    ActivityNotificationExecutionDetailResponseDto,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _id: z.string(),
    _jobId: z.string(),
    status: ActivityNotificationExecutionDetailResponseDtoStatus$inboundSchema,
    detail: z.string(),
    isRetry: z.boolean(),
    isTest: z.boolean(),
    providerId: ProvidersIdEnum$inboundSchema,
    raw: z.string().optional(),
    source: Source$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "_id": "id",
      "_jobId": "jobId",
    });
  });

/** @internal */
export type ActivityNotificationExecutionDetailResponseDto$Outbound = {
  _id: string;
  _jobId: string;
  status: string;
  detail: string;
  isRetry: boolean;
  isTest: boolean;
  providerId: string;
  raw?: string | undefined;
  source: string;
};

/** @internal */
export const ActivityNotificationExecutionDetailResponseDto$outboundSchema:
  z.ZodType<
    ActivityNotificationExecutionDetailResponseDto$Outbound,
    z.ZodTypeDef,
    ActivityNotificationExecutionDetailResponseDto
  > = z.object({
    id: z.string(),
    jobId: z.string(),
    status: ActivityNotificationExecutionDetailResponseDtoStatus$outboundSchema,
    detail: z.string(),
    isRetry: z.boolean(),
    isTest: z.boolean(),
    providerId: ProvidersIdEnum$outboundSchema,
    raw: z.string().optional(),
    source: Source$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      id: "_id",
      jobId: "_jobId",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityNotificationExecutionDetailResponseDto$ {
  /** @deprecated use `ActivityNotificationExecutionDetailResponseDto$inboundSchema` instead. */
  export const inboundSchema =
    ActivityNotificationExecutionDetailResponseDto$inboundSchema;
  /** @deprecated use `ActivityNotificationExecutionDetailResponseDto$outboundSchema` instead. */
  export const outboundSchema =
    ActivityNotificationExecutionDetailResponseDto$outboundSchema;
  /** @deprecated use `ActivityNotificationExecutionDetailResponseDto$Outbound` instead. */
  export type Outbound =
    ActivityNotificationExecutionDetailResponseDto$Outbound;
}

export function activityNotificationExecutionDetailResponseDtoToJSON(
  activityNotificationExecutionDetailResponseDto:
    ActivityNotificationExecutionDetailResponseDto,
): string {
  return JSON.stringify(
    ActivityNotificationExecutionDetailResponseDto$outboundSchema.parse(
      activityNotificationExecutionDetailResponseDto,
    ),
  );
}

export function activityNotificationExecutionDetailResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<
  ActivityNotificationExecutionDetailResponseDto,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ActivityNotificationExecutionDetailResponseDto$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ActivityNotificationExecutionDetailResponseDto' from JSON`,
  );
}
