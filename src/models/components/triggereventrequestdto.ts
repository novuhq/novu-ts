/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    SubscriberPayloadDto,
    SubscriberPayloadDto$inboundSchema,
    SubscriberPayloadDto$Outbound,
    SubscriberPayloadDto$outboundSchema,
} from "./subscriberpayloaddto.js";
import {
    TenantPayloadDto,
    TenantPayloadDto$inboundSchema,
    TenantPayloadDto$Outbound,
    TenantPayloadDto$outboundSchema,
} from "./tenantpayloaddto.js";
import {
    TopicPayloadDto,
    TopicPayloadDto$inboundSchema,
    TopicPayloadDto$Outbound,
    TopicPayloadDto$outboundSchema,
} from "./topicpayloaddto.js";
import * as z from "zod";

/**
 * It is used to display the Avatar of the provided actor's subscriber id or actor object.
 *
 * @remarks
 *     If a new actor object is provided, we will create a new subscriber in our system
 *
 */
export type Actor = SubscriberPayloadDto | string;

export type Controls = {};

/**
 * This could be used to override provider specific configurations
 */
export type TriggerEventRequestDtoOverrides = {};

/**
 * The payload object is used to pass additional custom information that could be used to render the workflow, or perform routing rules based on it.
 *
 * @remarks
 *       This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.
 */
export type TriggerEventRequestDtoPayload = {};

/**
 * It is used to specify a tenant context during trigger event.
 *
 * @remarks
 *     Existing tenants will be updated with the provided details.
 *
 */
export type Tenant = TenantPayloadDto | string;

export type To = TopicPayloadDto | SubscriberPayloadDto | string;

export type TriggerEventRequestDto = {
    /**
     * It is used to display the Avatar of the provided actor's subscriber id or actor object.
     *
     * @remarks
     *     If a new actor object is provided, we will create a new subscriber in our system
     *
     */
    actor?: SubscriberPayloadDto | string | undefined;
    bridgeUrl?: string | undefined;
    controls?: Controls | undefined;
    /**
     * The trigger identifier of the workflow you wish to send. This identifier can be found on the workflow page.
     */
    name: string;
    /**
     * This could be used to override provider specific configurations
     */
    overrides?: TriggerEventRequestDtoOverrides | undefined;
    /**
     * The payload object is used to pass additional custom information that could be used to render the workflow, or perform routing rules based on it.
     *
     * @remarks
     *       This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.
     */
    payload?: TriggerEventRequestDtoPayload | undefined;
    /**
     * It is used to specify a tenant context during trigger event.
     *
     * @remarks
     *     Existing tenants will be updated with the provided details.
     *
     */
    tenant?: TenantPayloadDto | string | undefined;
    /**
     * The recipients list of people who will receive the notification.
     */
    to: Array<TopicPayloadDto | SubscriberPayloadDto | string>;
    /**
     * A unique identifier for this transaction, we will generated a UUID if not provided.
     */
    transactionId?: string | undefined;
};

/** @internal */
export const Actor$inboundSchema: z.ZodType<Actor, z.ZodTypeDef, unknown> = z.union([
    SubscriberPayloadDto$inboundSchema,
    z.string(),
]);

/** @internal */
export type Actor$Outbound = SubscriberPayloadDto$Outbound | string;

/** @internal */
export const Actor$outboundSchema: z.ZodType<Actor$Outbound, z.ZodTypeDef, Actor> = z.union([
    SubscriberPayloadDto$outboundSchema,
    z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Actor$ {
    /** @deprecated use `Actor$inboundSchema` instead. */
    export const inboundSchema = Actor$inboundSchema;
    /** @deprecated use `Actor$outboundSchema` instead. */
    export const outboundSchema = Actor$outboundSchema;
    /** @deprecated use `Actor$Outbound` instead. */
    export type Outbound = Actor$Outbound;
}

/** @internal */
export const Controls$inboundSchema: z.ZodType<Controls, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Controls$Outbound = {};

/** @internal */
export const Controls$outboundSchema: z.ZodType<Controls$Outbound, z.ZodTypeDef, Controls> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Controls$ {
    /** @deprecated use `Controls$inboundSchema` instead. */
    export const inboundSchema = Controls$inboundSchema;
    /** @deprecated use `Controls$outboundSchema` instead. */
    export const outboundSchema = Controls$outboundSchema;
    /** @deprecated use `Controls$Outbound` instead. */
    export type Outbound = Controls$Outbound;
}

/** @internal */
export const TriggerEventRequestDtoOverrides$inboundSchema: z.ZodType<
    TriggerEventRequestDtoOverrides,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TriggerEventRequestDtoOverrides$Outbound = {};

/** @internal */
export const TriggerEventRequestDtoOverrides$outboundSchema: z.ZodType<
    TriggerEventRequestDtoOverrides$Outbound,
    z.ZodTypeDef,
    TriggerEventRequestDtoOverrides
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerEventRequestDtoOverrides$ {
    /** @deprecated use `TriggerEventRequestDtoOverrides$inboundSchema` instead. */
    export const inboundSchema = TriggerEventRequestDtoOverrides$inboundSchema;
    /** @deprecated use `TriggerEventRequestDtoOverrides$outboundSchema` instead. */
    export const outboundSchema = TriggerEventRequestDtoOverrides$outboundSchema;
    /** @deprecated use `TriggerEventRequestDtoOverrides$Outbound` instead. */
    export type Outbound = TriggerEventRequestDtoOverrides$Outbound;
}

/** @internal */
export const TriggerEventRequestDtoPayload$inboundSchema: z.ZodType<
    TriggerEventRequestDtoPayload,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TriggerEventRequestDtoPayload$Outbound = {};

/** @internal */
export const TriggerEventRequestDtoPayload$outboundSchema: z.ZodType<
    TriggerEventRequestDtoPayload$Outbound,
    z.ZodTypeDef,
    TriggerEventRequestDtoPayload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerEventRequestDtoPayload$ {
    /** @deprecated use `TriggerEventRequestDtoPayload$inboundSchema` instead. */
    export const inboundSchema = TriggerEventRequestDtoPayload$inboundSchema;
    /** @deprecated use `TriggerEventRequestDtoPayload$outboundSchema` instead. */
    export const outboundSchema = TriggerEventRequestDtoPayload$outboundSchema;
    /** @deprecated use `TriggerEventRequestDtoPayload$Outbound` instead. */
    export type Outbound = TriggerEventRequestDtoPayload$Outbound;
}

/** @internal */
export const Tenant$inboundSchema: z.ZodType<Tenant, z.ZodTypeDef, unknown> = z.union([
    TenantPayloadDto$inboundSchema,
    z.string(),
]);

/** @internal */
export type Tenant$Outbound = TenantPayloadDto$Outbound | string;

/** @internal */
export const Tenant$outboundSchema: z.ZodType<Tenant$Outbound, z.ZodTypeDef, Tenant> = z.union([
    TenantPayloadDto$outboundSchema,
    z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tenant$ {
    /** @deprecated use `Tenant$inboundSchema` instead. */
    export const inboundSchema = Tenant$inboundSchema;
    /** @deprecated use `Tenant$outboundSchema` instead. */
    export const outboundSchema = Tenant$outboundSchema;
    /** @deprecated use `Tenant$Outbound` instead. */
    export type Outbound = Tenant$Outbound;
}

/** @internal */
export const To$inboundSchema: z.ZodType<To, z.ZodTypeDef, unknown> = z.union([
    TopicPayloadDto$inboundSchema,
    SubscriberPayloadDto$inboundSchema,
    z.string(),
]);

/** @internal */
export type To$Outbound = TopicPayloadDto$Outbound | SubscriberPayloadDto$Outbound | string;

/** @internal */
export const To$outboundSchema: z.ZodType<To$Outbound, z.ZodTypeDef, To> = z.union([
    TopicPayloadDto$outboundSchema,
    SubscriberPayloadDto$outboundSchema,
    z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace To$ {
    /** @deprecated use `To$inboundSchema` instead. */
    export const inboundSchema = To$inboundSchema;
    /** @deprecated use `To$outboundSchema` instead. */
    export const outboundSchema = To$outboundSchema;
    /** @deprecated use `To$Outbound` instead. */
    export type Outbound = To$Outbound;
}

/** @internal */
export const TriggerEventRequestDto$inboundSchema: z.ZodType<
    TriggerEventRequestDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    actor: z.union([SubscriberPayloadDto$inboundSchema, z.string()]).optional(),
    bridgeUrl: z.string().optional(),
    controls: z.lazy(() => Controls$inboundSchema).optional(),
    name: z.string(),
    overrides: z.lazy(() => TriggerEventRequestDtoOverrides$inboundSchema).optional(),
    payload: z.lazy(() => TriggerEventRequestDtoPayload$inboundSchema).optional(),
    tenant: z.union([TenantPayloadDto$inboundSchema, z.string()]).optional(),
    to: z.array(
        z.union([TopicPayloadDto$inboundSchema, SubscriberPayloadDto$inboundSchema, z.string()])
    ),
    transactionId: z.string().optional(),
});

/** @internal */
export type TriggerEventRequestDto$Outbound = {
    actor?: SubscriberPayloadDto$Outbound | string | undefined;
    bridgeUrl?: string | undefined;
    controls?: Controls$Outbound | undefined;
    name: string;
    overrides?: TriggerEventRequestDtoOverrides$Outbound | undefined;
    payload?: TriggerEventRequestDtoPayload$Outbound | undefined;
    tenant?: TenantPayloadDto$Outbound | string | undefined;
    to: Array<TopicPayloadDto$Outbound | SubscriberPayloadDto$Outbound | string>;
    transactionId?: string | undefined;
};

/** @internal */
export const TriggerEventRequestDto$outboundSchema: z.ZodType<
    TriggerEventRequestDto$Outbound,
    z.ZodTypeDef,
    TriggerEventRequestDto
> = z.object({
    actor: z.union([SubscriberPayloadDto$outboundSchema, z.string()]).optional(),
    bridgeUrl: z.string().optional(),
    controls: z.lazy(() => Controls$outboundSchema).optional(),
    name: z.string(),
    overrides: z.lazy(() => TriggerEventRequestDtoOverrides$outboundSchema).optional(),
    payload: z.lazy(() => TriggerEventRequestDtoPayload$outboundSchema).optional(),
    tenant: z.union([TenantPayloadDto$outboundSchema, z.string()]).optional(),
    to: z.array(
        z.union([TopicPayloadDto$outboundSchema, SubscriberPayloadDto$outboundSchema, z.string()])
    ),
    transactionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerEventRequestDto$ {
    /** @deprecated use `TriggerEventRequestDto$inboundSchema` instead. */
    export const inboundSchema = TriggerEventRequestDto$inboundSchema;
    /** @deprecated use `TriggerEventRequestDto$outboundSchema` instead. */
    export const outboundSchema = TriggerEventRequestDto$outboundSchema;
    /** @deprecated use `TriggerEventRequestDto$Outbound` instead. */
    export type Outbound = TriggerEventRequestDto$Outbound;
}
