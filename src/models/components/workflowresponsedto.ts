/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatStepResponseDto,
  ChatStepResponseDto$inboundSchema,
  ChatStepResponseDto$Outbound,
  ChatStepResponseDto$outboundSchema,
} from "./chatstepresponsedto.js";
import {
  CustomStepResponseDto,
  CustomStepResponseDto$inboundSchema,
  CustomStepResponseDto$Outbound,
  CustomStepResponseDto$outboundSchema,
} from "./customstepresponsedto.js";
import {
  DelayStepResponseDto,
  DelayStepResponseDto$inboundSchema,
  DelayStepResponseDto$Outbound,
  DelayStepResponseDto$outboundSchema,
} from "./delaystepresponsedto.js";
import {
  DigestStepResponseDto,
  DigestStepResponseDto$inboundSchema,
  DigestStepResponseDto$Outbound,
  DigestStepResponseDto$outboundSchema,
} from "./digeststepresponsedto.js";
import {
  EmailStepResponseDto,
  EmailStepResponseDto$inboundSchema,
  EmailStepResponseDto$Outbound,
  EmailStepResponseDto$outboundSchema,
} from "./emailstepresponsedto.js";
import {
  InAppStepResponseDto,
  InAppStepResponseDto$inboundSchema,
  InAppStepResponseDto$Outbound,
  InAppStepResponseDto$outboundSchema,
} from "./inappstepresponsedto.js";
import {
  PushStepResponseDto,
  PushStepResponseDto$inboundSchema,
  PushStepResponseDto$Outbound,
  PushStepResponseDto$outboundSchema,
} from "./pushstepresponsedto.js";
import {
  ResourceOriginEnum,
  ResourceOriginEnum$inboundSchema,
  ResourceOriginEnum$outboundSchema,
} from "./resourceoriginenum.js";
import {
  RuntimeIssueDto,
  RuntimeIssueDto$inboundSchema,
  RuntimeIssueDto$Outbound,
  RuntimeIssueDto$outboundSchema,
} from "./runtimeissuedto.js";
import {
  SeverityLevelEnum,
  SeverityLevelEnum$inboundSchema,
  SeverityLevelEnum$outboundSchema,
} from "./severitylevelenum.js";
import {
  SmsStepResponseDto,
  SmsStepResponseDto$inboundSchema,
  SmsStepResponseDto$Outbound,
  SmsStepResponseDto$outboundSchema,
} from "./smsstepresponsedto.js";
import {
  ThrottleStepResponseDto,
  ThrottleStepResponseDto$inboundSchema,
  ThrottleStepResponseDto$Outbound,
  ThrottleStepResponseDto$outboundSchema,
} from "./throttlestepresponsedto.js";
import {
  WorkflowPreferencesResponseDto,
  WorkflowPreferencesResponseDto$inboundSchema,
  WorkflowPreferencesResponseDto$Outbound,
  WorkflowPreferencesResponseDto$outboundSchema,
} from "./workflowpreferencesresponsedto.js";
import {
  WorkflowStatusEnum,
  WorkflowStatusEnum$inboundSchema,
  WorkflowStatusEnum$outboundSchema,
} from "./workflowstatusenum.js";

/**
 * User who last updated the workflow
 */
export type WorkflowResponseDtoUpdatedBy = {
  /**
   * User ID
   */
  id: string;
  /**
   * User first name
   */
  firstName?: string | null | undefined;
  /**
   * User last name
   */
  lastName?: string | null | undefined;
  /**
   * User external ID
   */
  externalId?: string | null | undefined;
};

/**
 * User who last published the workflow
 */
export type LastPublishedBy = {
  /**
   * User ID
   */
  id: string;
  /**
   * User first name
   */
  firstName?: string | null | undefined;
  /**
   * User last name
   */
  lastName?: string | null | undefined;
  /**
   * User external ID
   */
  externalId?: string | null | undefined;
};

export type WorkflowResponseDtoSteps =
  | (InAppStepResponseDto & { type: "in_app" })
  | (EmailStepResponseDto & { type: "email" })
  | (SmsStepResponseDto & { type: "sms" })
  | (PushStepResponseDto & { type: "push" })
  | (ChatStepResponseDto & { type: "chat" })
  | (DelayStepResponseDto & { type: "delay" })
  | (DigestStepResponseDto & { type: "digest" })
  | (CustomStepResponseDto & { type: "custom" })
  | (ThrottleStepResponseDto & { type: "throttle" });

export type WorkflowResponseDto = {
  /**
   * Name of the workflow
   */
  name: string;
  /**
   * Description of the workflow
   */
  description?: string | undefined;
  /**
   * Tags associated with the workflow
   */
  tags?: Array<string> | undefined;
  /**
   * Whether the workflow is active
   */
  active?: boolean | undefined;
  /**
   * Enable or disable payload schema validation
   */
  validatePayload?: boolean | undefined;
  /**
   * The payload JSON Schema for the workflow
   */
  payloadSchema?: { [k: string]: any } | null | undefined;
  /**
   * Enable or disable translations for this workflow
   */
  isTranslationEnabled?: boolean | undefined;
  /**
   * Unique identifier of the workflow
   */
  id: string;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Slug of the workflow
   */
  slug: string;
  /**
   * Last updated timestamp
   */
  updatedAt: string;
  /**
   * Creation timestamp
   */
  createdAt: string;
  /**
   * User who last updated the workflow
   */
  updatedBy?: WorkflowResponseDtoUpdatedBy | null | undefined;
  /**
   * Timestamp of the last workflow publication
   */
  lastPublishedAt?: string | null | undefined;
  /**
   * User who last published the workflow
   */
  lastPublishedBy?: LastPublishedBy | null | undefined;
  /**
   * Steps of the workflow
   */
  steps: Array<
    | (InAppStepResponseDto & { type: "in_app" })
    | (EmailStepResponseDto & { type: "email" })
    | (SmsStepResponseDto & { type: "sms" })
    | (PushStepResponseDto & { type: "push" })
    | (ChatStepResponseDto & { type: "chat" })
    | (DelayStepResponseDto & { type: "delay" })
    | (DigestStepResponseDto & { type: "digest" })
    | (CustomStepResponseDto & { type: "custom" })
    | (ThrottleStepResponseDto & { type: "throttle" })
  >;
  /**
   * Origin of the layout
   */
  origin: ResourceOriginEnum;
  /**
   * Preferences for the workflow
   */
  preferences: WorkflowPreferencesResponseDto;
  /**
   * Status of the workflow
   */
  status: WorkflowStatusEnum;
  /**
   * Runtime issues for workflow creation and update
   */
  issues?: { [k: string]: RuntimeIssueDto } | undefined;
  /**
   * Timestamp of the last workflow trigger
   */
  lastTriggeredAt?: string | null | undefined;
  /**
   * Generated payload example based on the payload schema
   */
  payloadExample?: { [k: string]: any } | null | undefined;
  /**
   * Severity of the workflow
   */
  severity: SeverityLevelEnum;
};

/** @internal */
export const WorkflowResponseDtoUpdatedBy$inboundSchema: z.ZodType<
  WorkflowResponseDtoUpdatedBy,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type WorkflowResponseDtoUpdatedBy$Outbound = {
  _id: string;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
  externalId?: string | null | undefined;
};

/** @internal */
export const WorkflowResponseDtoUpdatedBy$outboundSchema: z.ZodType<
  WorkflowResponseDtoUpdatedBy$Outbound,
  z.ZodTypeDef,
  WorkflowResponseDtoUpdatedBy
> = z.object({
  id: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowResponseDtoUpdatedBy$ {
  /** @deprecated use `WorkflowResponseDtoUpdatedBy$inboundSchema` instead. */
  export const inboundSchema = WorkflowResponseDtoUpdatedBy$inboundSchema;
  /** @deprecated use `WorkflowResponseDtoUpdatedBy$outboundSchema` instead. */
  export const outboundSchema = WorkflowResponseDtoUpdatedBy$outboundSchema;
  /** @deprecated use `WorkflowResponseDtoUpdatedBy$Outbound` instead. */
  export type Outbound = WorkflowResponseDtoUpdatedBy$Outbound;
}

export function workflowResponseDtoUpdatedByToJSON(
  workflowResponseDtoUpdatedBy: WorkflowResponseDtoUpdatedBy,
): string {
  return JSON.stringify(
    WorkflowResponseDtoUpdatedBy$outboundSchema.parse(
      workflowResponseDtoUpdatedBy,
    ),
  );
}

export function workflowResponseDtoUpdatedByFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowResponseDtoUpdatedBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowResponseDtoUpdatedBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowResponseDtoUpdatedBy' from JSON`,
  );
}

/** @internal */
export const LastPublishedBy$inboundSchema: z.ZodType<
  LastPublishedBy,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type LastPublishedBy$Outbound = {
  _id: string;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
  externalId?: string | null | undefined;
};

/** @internal */
export const LastPublishedBy$outboundSchema: z.ZodType<
  LastPublishedBy$Outbound,
  z.ZodTypeDef,
  LastPublishedBy
> = z.object({
  id: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LastPublishedBy$ {
  /** @deprecated use `LastPublishedBy$inboundSchema` instead. */
  export const inboundSchema = LastPublishedBy$inboundSchema;
  /** @deprecated use `LastPublishedBy$outboundSchema` instead. */
  export const outboundSchema = LastPublishedBy$outboundSchema;
  /** @deprecated use `LastPublishedBy$Outbound` instead. */
  export type Outbound = LastPublishedBy$Outbound;
}

export function lastPublishedByToJSON(
  lastPublishedBy: LastPublishedBy,
): string {
  return JSON.stringify(LastPublishedBy$outboundSchema.parse(lastPublishedBy));
}

export function lastPublishedByFromJSON(
  jsonString: string,
): SafeParseResult<LastPublishedBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LastPublishedBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LastPublishedBy' from JSON`,
  );
}

/** @internal */
export const WorkflowResponseDtoSteps$inboundSchema: z.ZodType<
  WorkflowResponseDtoSteps,
  z.ZodTypeDef,
  unknown
> = z.union([
  InAppStepResponseDto$inboundSchema.and(
    z.object({ type: z.literal("in_app") }).transform((v) => ({
      type: v.type,
    })),
  ),
  EmailStepResponseDto$inboundSchema.and(
    z.object({ type: z.literal("email") }).transform((v) => ({ type: v.type })),
  ),
  SmsStepResponseDto$inboundSchema.and(
    z.object({ type: z.literal("sms") }).transform((v) => ({ type: v.type })),
  ),
  PushStepResponseDto$inboundSchema.and(
    z.object({ type: z.literal("push") }).transform((v) => ({ type: v.type })),
  ),
  ChatStepResponseDto$inboundSchema.and(
    z.object({ type: z.literal("chat") }).transform((v) => ({ type: v.type })),
  ),
  DelayStepResponseDto$inboundSchema.and(
    z.object({ type: z.literal("delay") }).transform((v) => ({ type: v.type })),
  ),
  DigestStepResponseDto$inboundSchema.and(
    z.object({ type: z.literal("digest") }).transform((v) => ({
      type: v.type,
    })),
  ),
  CustomStepResponseDto$inboundSchema.and(
    z.object({ type: z.literal("custom") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ThrottleStepResponseDto$inboundSchema.and(
    z.object({ type: z.literal("throttle") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type WorkflowResponseDtoSteps$Outbound =
  | (InAppStepResponseDto$Outbound & { type: "in_app" })
  | (EmailStepResponseDto$Outbound & { type: "email" })
  | (SmsStepResponseDto$Outbound & { type: "sms" })
  | (PushStepResponseDto$Outbound & { type: "push" })
  | (ChatStepResponseDto$Outbound & { type: "chat" })
  | (DelayStepResponseDto$Outbound & { type: "delay" })
  | (DigestStepResponseDto$Outbound & { type: "digest" })
  | (CustomStepResponseDto$Outbound & { type: "custom" })
  | (ThrottleStepResponseDto$Outbound & { type: "throttle" });

/** @internal */
export const WorkflowResponseDtoSteps$outboundSchema: z.ZodType<
  WorkflowResponseDtoSteps$Outbound,
  z.ZodTypeDef,
  WorkflowResponseDtoSteps
> = z.union([
  InAppStepResponseDto$outboundSchema.and(
    z.object({ type: z.literal("in_app") }).transform((v) => ({
      type: v.type,
    })),
  ),
  EmailStepResponseDto$outboundSchema.and(
    z.object({ type: z.literal("email") }).transform((v) => ({ type: v.type })),
  ),
  SmsStepResponseDto$outboundSchema.and(
    z.object({ type: z.literal("sms") }).transform((v) => ({ type: v.type })),
  ),
  PushStepResponseDto$outboundSchema.and(
    z.object({ type: z.literal("push") }).transform((v) => ({ type: v.type })),
  ),
  ChatStepResponseDto$outboundSchema.and(
    z.object({ type: z.literal("chat") }).transform((v) => ({ type: v.type })),
  ),
  DelayStepResponseDto$outboundSchema.and(
    z.object({ type: z.literal("delay") }).transform((v) => ({ type: v.type })),
  ),
  DigestStepResponseDto$outboundSchema.and(
    z.object({ type: z.literal("digest") }).transform((v) => ({
      type: v.type,
    })),
  ),
  CustomStepResponseDto$outboundSchema.and(
    z.object({ type: z.literal("custom") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ThrottleStepResponseDto$outboundSchema.and(
    z.object({ type: z.literal("throttle") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowResponseDtoSteps$ {
  /** @deprecated use `WorkflowResponseDtoSteps$inboundSchema` instead. */
  export const inboundSchema = WorkflowResponseDtoSteps$inboundSchema;
  /** @deprecated use `WorkflowResponseDtoSteps$outboundSchema` instead. */
  export const outboundSchema = WorkflowResponseDtoSteps$outboundSchema;
  /** @deprecated use `WorkflowResponseDtoSteps$Outbound` instead. */
  export type Outbound = WorkflowResponseDtoSteps$Outbound;
}

export function workflowResponseDtoStepsToJSON(
  workflowResponseDtoSteps: WorkflowResponseDtoSteps,
): string {
  return JSON.stringify(
    WorkflowResponseDtoSteps$outboundSchema.parse(workflowResponseDtoSteps),
  );
}

export function workflowResponseDtoStepsFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowResponseDtoSteps, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowResponseDtoSteps$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowResponseDtoSteps' from JSON`,
  );
}

/** @internal */
export const WorkflowResponseDto$inboundSchema: z.ZodType<
  WorkflowResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  active: z.boolean().default(false),
  validatePayload: z.boolean().optional(),
  payloadSchema: z.nullable(z.record(z.any())).optional(),
  isTranslationEnabled: z.boolean().default(false),
  _id: z.string(),
  workflowId: z.string(),
  slug: z.string(),
  updatedAt: z.string(),
  createdAt: z.string(),
  updatedBy: z.nullable(
    z.lazy(() => WorkflowResponseDtoUpdatedBy$inboundSchema),
  ).optional(),
  lastPublishedAt: z.nullable(z.string()).optional(),
  lastPublishedBy: z.nullable(z.lazy(() => LastPublishedBy$inboundSchema))
    .optional(),
  steps: z.array(
    z.union([
      InAppStepResponseDto$inboundSchema.and(
        z.object({ type: z.literal("in_app") }).transform((v) => ({
          type: v.type,
        })),
      ),
      EmailStepResponseDto$inboundSchema.and(
        z.object({ type: z.literal("email") }).transform((v) => ({
          type: v.type,
        })),
      ),
      SmsStepResponseDto$inboundSchema.and(
        z.object({ type: z.literal("sms") }).transform((v) => ({
          type: v.type,
        })),
      ),
      PushStepResponseDto$inboundSchema.and(
        z.object({ type: z.literal("push") }).transform((v) => ({
          type: v.type,
        })),
      ),
      ChatStepResponseDto$inboundSchema.and(
        z.object({ type: z.literal("chat") }).transform((v) => ({
          type: v.type,
        })),
      ),
      DelayStepResponseDto$inboundSchema.and(
        z.object({ type: z.literal("delay") }).transform((v) => ({
          type: v.type,
        })),
      ),
      DigestStepResponseDto$inboundSchema.and(
        z.object({ type: z.literal("digest") }).transform((v) => ({
          type: v.type,
        })),
      ),
      CustomStepResponseDto$inboundSchema.and(
        z.object({ type: z.literal("custom") }).transform((v) => ({
          type: v.type,
        })),
      ),
      ThrottleStepResponseDto$inboundSchema.and(
        z.object({ type: z.literal("throttle") }).transform((v) => ({
          type: v.type,
        })),
      ),
    ]),
  ),
  origin: ResourceOriginEnum$inboundSchema,
  preferences: WorkflowPreferencesResponseDto$inboundSchema,
  status: WorkflowStatusEnum$inboundSchema,
  issues: z.record(RuntimeIssueDto$inboundSchema).optional(),
  lastTriggeredAt: z.nullable(z.string()).optional(),
  payloadExample: z.nullable(z.record(z.any())).optional(),
  severity: SeverityLevelEnum$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type WorkflowResponseDto$Outbound = {
  name: string;
  description?: string | undefined;
  tags?: Array<string> | undefined;
  active: boolean;
  validatePayload?: boolean | undefined;
  payloadSchema?: { [k: string]: any } | null | undefined;
  isTranslationEnabled: boolean;
  _id: string;
  workflowId: string;
  slug: string;
  updatedAt: string;
  createdAt: string;
  updatedBy?: WorkflowResponseDtoUpdatedBy$Outbound | null | undefined;
  lastPublishedAt?: string | null | undefined;
  lastPublishedBy?: LastPublishedBy$Outbound | null | undefined;
  steps: Array<
    | (InAppStepResponseDto$Outbound & { type: "in_app" })
    | (EmailStepResponseDto$Outbound & { type: "email" })
    | (SmsStepResponseDto$Outbound & { type: "sms" })
    | (PushStepResponseDto$Outbound & { type: "push" })
    | (ChatStepResponseDto$Outbound & { type: "chat" })
    | (DelayStepResponseDto$Outbound & { type: "delay" })
    | (DigestStepResponseDto$Outbound & { type: "digest" })
    | (CustomStepResponseDto$Outbound & { type: "custom" })
    | (ThrottleStepResponseDto$Outbound & { type: "throttle" })
  >;
  origin: string;
  preferences: WorkflowPreferencesResponseDto$Outbound;
  status: string;
  issues?: { [k: string]: RuntimeIssueDto$Outbound } | undefined;
  lastTriggeredAt?: string | null | undefined;
  payloadExample?: { [k: string]: any } | null | undefined;
  severity: string;
};

/** @internal */
export const WorkflowResponseDto$outboundSchema: z.ZodType<
  WorkflowResponseDto$Outbound,
  z.ZodTypeDef,
  WorkflowResponseDto
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  active: z.boolean().default(false),
  validatePayload: z.boolean().optional(),
  payloadSchema: z.nullable(z.record(z.any())).optional(),
  isTranslationEnabled: z.boolean().default(false),
  id: z.string(),
  workflowId: z.string(),
  slug: z.string(),
  updatedAt: z.string(),
  createdAt: z.string(),
  updatedBy: z.nullable(
    z.lazy(() => WorkflowResponseDtoUpdatedBy$outboundSchema),
  ).optional(),
  lastPublishedAt: z.nullable(z.string()).optional(),
  lastPublishedBy: z.nullable(z.lazy(() => LastPublishedBy$outboundSchema))
    .optional(),
  steps: z.array(
    z.union([
      InAppStepResponseDto$outboundSchema.and(
        z.object({ type: z.literal("in_app") }).transform((v) => ({
          type: v.type,
        })),
      ),
      EmailStepResponseDto$outboundSchema.and(
        z.object({ type: z.literal("email") }).transform((v) => ({
          type: v.type,
        })),
      ),
      SmsStepResponseDto$outboundSchema.and(
        z.object({ type: z.literal("sms") }).transform((v) => ({
          type: v.type,
        })),
      ),
      PushStepResponseDto$outboundSchema.and(
        z.object({ type: z.literal("push") }).transform((v) => ({
          type: v.type,
        })),
      ),
      ChatStepResponseDto$outboundSchema.and(
        z.object({ type: z.literal("chat") }).transform((v) => ({
          type: v.type,
        })),
      ),
      DelayStepResponseDto$outboundSchema.and(
        z.object({ type: z.literal("delay") }).transform((v) => ({
          type: v.type,
        })),
      ),
      DigestStepResponseDto$outboundSchema.and(
        z.object({ type: z.literal("digest") }).transform((v) => ({
          type: v.type,
        })),
      ),
      CustomStepResponseDto$outboundSchema.and(
        z.object({ type: z.literal("custom") }).transform((v) => ({
          type: v.type,
        })),
      ),
      ThrottleStepResponseDto$outboundSchema.and(
        z.object({ type: z.literal("throttle") }).transform((v) => ({
          type: v.type,
        })),
      ),
    ]),
  ),
  origin: ResourceOriginEnum$outboundSchema,
  preferences: WorkflowPreferencesResponseDto$outboundSchema,
  status: WorkflowStatusEnum$outboundSchema,
  issues: z.record(RuntimeIssueDto$outboundSchema).optional(),
  lastTriggeredAt: z.nullable(z.string()).optional(),
  payloadExample: z.nullable(z.record(z.any())).optional(),
  severity: SeverityLevelEnum$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowResponseDto$ {
  /** @deprecated use `WorkflowResponseDto$inboundSchema` instead. */
  export const inboundSchema = WorkflowResponseDto$inboundSchema;
  /** @deprecated use `WorkflowResponseDto$outboundSchema` instead. */
  export const outboundSchema = WorkflowResponseDto$outboundSchema;
  /** @deprecated use `WorkflowResponseDto$Outbound` instead. */
  export type Outbound = WorkflowResponseDto$Outbound;
}

export function workflowResponseDtoToJSON(
  workflowResponseDto: WorkflowResponseDto,
): string {
  return JSON.stringify(
    WorkflowResponseDto$outboundSchema.parse(workflowResponseDto),
  );
}

export function workflowResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowResponseDto' from JSON`,
  );
}
