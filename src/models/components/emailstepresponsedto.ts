/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmailControlsMetadataResponseDto,
  EmailControlsMetadataResponseDto$inboundSchema,
  EmailControlsMetadataResponseDto$Outbound,
  EmailControlsMetadataResponseDto$outboundSchema,
} from "./emailcontrolsmetadataresponsedto.js";
import {
  ResourceOriginEnum,
  ResourceOriginEnum$inboundSchema,
  ResourceOriginEnum$outboundSchema,
} from "./resourceoriginenum.js";
import {
  StepIssuesDto,
  StepIssuesDto$inboundSchema,
  StepIssuesDto$Outbound,
  StepIssuesDto$outboundSchema,
} from "./stepissuesdto.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * Type of editor to use for the body.
 */
export const EmailStepResponseDtoEditorType = {
  Block: "block",
  Html: "html",
} as const;
/**
 * Type of editor to use for the body.
 */
export type EmailStepResponseDtoEditorType = ClosedEnum<
  typeof EmailStepResponseDtoEditorType
>;

/**
 * Control values for the email step
 */
export type EmailStepResponseDtoControlValues = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * Subject of the email.
   */
  subject: string;
  /**
   * Body content of the email, either a valid Maily JSON object, or html string.
   */
  body?: string | undefined;
  /**
   * Type of editor to use for the body.
   */
  editorType?: EmailStepResponseDtoEditorType | undefined;
  /**
   * Disable sanitization of the output.
   */
  disableOutputSanitization?: boolean | undefined;
  /**
   * Layout ID to use for the email. Null means no layout, undefined means default layout.
   */
  layoutId?: string | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export type EmailStepResponseDto = {
  /**
   * Controls metadata for the email step
   */
  controls: EmailControlsMetadataResponseDto;
  /**
   * Control values for the email step
   */
  controlValues?: EmailStepResponseDtoControlValues | undefined;
  /**
   * JSON Schema for variables, follows the JSON Schema standard
   */
  variables: { [k: string]: any };
  /**
   * Unique identifier of the step
   */
  stepId: string;
  /**
   * Database identifier of the step
   */
  id: string;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Slug of the step
   */
  slug: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Origin of the layout
   */
  origin: ResourceOriginEnum;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Workflow database identifier
   */
  workflowDatabaseId: string;
  /**
   * Issues associated with the step
   */
  issues?: StepIssuesDto | undefined;
};

/** @internal */
export const EmailStepResponseDtoEditorType$inboundSchema: z.ZodNativeEnum<
  typeof EmailStepResponseDtoEditorType
> = z.nativeEnum(EmailStepResponseDtoEditorType);

/** @internal */
export const EmailStepResponseDtoEditorType$outboundSchema: z.ZodNativeEnum<
  typeof EmailStepResponseDtoEditorType
> = EmailStepResponseDtoEditorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailStepResponseDtoEditorType$ {
  /** @deprecated use `EmailStepResponseDtoEditorType$inboundSchema` instead. */
  export const inboundSchema = EmailStepResponseDtoEditorType$inboundSchema;
  /** @deprecated use `EmailStepResponseDtoEditorType$outboundSchema` instead. */
  export const outboundSchema = EmailStepResponseDtoEditorType$outboundSchema;
}

/** @internal */
export const EmailStepResponseDtoControlValues$inboundSchema: z.ZodType<
  EmailStepResponseDtoControlValues,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    skip: z.record(z.any()).optional(),
    subject: z.string(),
    body: z.string().default(""),
    editorType: EmailStepResponseDtoEditorType$inboundSchema.default("block"),
    disableOutputSanitization: z.boolean().default(false),
    layoutId: z.nullable(z.string()).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type EmailStepResponseDtoControlValues$Outbound = {
  skip?: { [k: string]: any } | undefined;
  subject: string;
  body: string;
  editorType: string;
  disableOutputSanitization: boolean;
  layoutId?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const EmailStepResponseDtoControlValues$outboundSchema: z.ZodType<
  EmailStepResponseDtoControlValues$Outbound,
  z.ZodTypeDef,
  EmailStepResponseDtoControlValues
> = z.object({
  skip: z.record(z.any()).optional(),
  subject: z.string(),
  body: z.string().default(""),
  editorType: EmailStepResponseDtoEditorType$outboundSchema.default("block"),
  disableOutputSanitization: z.boolean().default(false),
  layoutId: z.nullable(z.string()).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailStepResponseDtoControlValues$ {
  /** @deprecated use `EmailStepResponseDtoControlValues$inboundSchema` instead. */
  export const inboundSchema = EmailStepResponseDtoControlValues$inboundSchema;
  /** @deprecated use `EmailStepResponseDtoControlValues$outboundSchema` instead. */
  export const outboundSchema =
    EmailStepResponseDtoControlValues$outboundSchema;
  /** @deprecated use `EmailStepResponseDtoControlValues$Outbound` instead. */
  export type Outbound = EmailStepResponseDtoControlValues$Outbound;
}

export function emailStepResponseDtoControlValuesToJSON(
  emailStepResponseDtoControlValues: EmailStepResponseDtoControlValues,
): string {
  return JSON.stringify(
    EmailStepResponseDtoControlValues$outboundSchema.parse(
      emailStepResponseDtoControlValues,
    ),
  );
}

export function emailStepResponseDtoControlValuesFromJSON(
  jsonString: string,
): SafeParseResult<EmailStepResponseDtoControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailStepResponseDtoControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailStepResponseDtoControlValues' from JSON`,
  );
}

/** @internal */
export const EmailStepResponseDto$inboundSchema: z.ZodType<
  EmailStepResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  controls: EmailControlsMetadataResponseDto$inboundSchema,
  controlValues: z.lazy(() => EmailStepResponseDtoControlValues$inboundSchema)
    .optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  _id: z.string(),
  name: z.string(),
  slug: z.string(),
  type: StepTypeEnum$inboundSchema,
  origin: ResourceOriginEnum$inboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type EmailStepResponseDto$Outbound = {
  controls: EmailControlsMetadataResponseDto$Outbound;
  controlValues?: EmailStepResponseDtoControlValues$Outbound | undefined;
  variables: { [k: string]: any };
  stepId: string;
  _id: string;
  name: string;
  slug: string;
  type: string;
  origin: string;
  workflowId: string;
  workflowDatabaseId: string;
  issues?: StepIssuesDto$Outbound | undefined;
};

/** @internal */
export const EmailStepResponseDto$outboundSchema: z.ZodType<
  EmailStepResponseDto$Outbound,
  z.ZodTypeDef,
  EmailStepResponseDto
> = z.object({
  controls: EmailControlsMetadataResponseDto$outboundSchema,
  controlValues: z.lazy(() => EmailStepResponseDtoControlValues$outboundSchema)
    .optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  type: StepTypeEnum$outboundSchema,
  origin: ResourceOriginEnum$outboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailStepResponseDto$ {
  /** @deprecated use `EmailStepResponseDto$inboundSchema` instead. */
  export const inboundSchema = EmailStepResponseDto$inboundSchema;
  /** @deprecated use `EmailStepResponseDto$outboundSchema` instead. */
  export const outboundSchema = EmailStepResponseDto$outboundSchema;
  /** @deprecated use `EmailStepResponseDto$Outbound` instead. */
  export type Outbound = EmailStepResponseDto$Outbound;
}

export function emailStepResponseDtoToJSON(
  emailStepResponseDto: EmailStepResponseDto,
): string {
  return JSON.stringify(
    EmailStepResponseDto$outboundSchema.parse(emailStepResponseDto),
  );
}

export function emailStepResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<EmailStepResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailStepResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailStepResponseDto' from JSON`,
  );
}
