/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActivityTopicDto = {
  /**
   * Internal Topic ID of the notification
   */
  topicId: string;
  /**
   * Topic Key of the notification
   */
  topicKey: string;
};

/** @internal */
export const ActivityTopicDto$inboundSchema: z.ZodType<
  ActivityTopicDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _topicId: z.string(),
  topicKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_topicId": "topicId",
  });
});

/** @internal */
export type ActivityTopicDto$Outbound = {
  _topicId: string;
  topicKey: string;
};

/** @internal */
export const ActivityTopicDto$outboundSchema: z.ZodType<
  ActivityTopicDto$Outbound,
  z.ZodTypeDef,
  ActivityTopicDto
> = z.object({
  topicId: z.string(),
  topicKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    topicId: "_topicId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivityTopicDto$ {
  /** @deprecated use `ActivityTopicDto$inboundSchema` instead. */
  export const inboundSchema = ActivityTopicDto$inboundSchema;
  /** @deprecated use `ActivityTopicDto$outboundSchema` instead. */
  export const outboundSchema = ActivityTopicDto$outboundSchema;
  /** @deprecated use `ActivityTopicDto$Outbound` instead. */
  export type Outbound = ActivityTopicDto$Outbound;
}

export function activityTopicDtoToJSON(
  activityTopicDto: ActivityTopicDto,
): string {
  return JSON.stringify(
    ActivityTopicDto$outboundSchema.parse(activityTopicDto),
  );
}

export function activityTopicDtoFromJSON(
  jsonString: string,
): SafeParseResult<ActivityTopicDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivityTopicDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivityTopicDto' from JSON`,
  );
}
