/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DigestControlsMetadataResponseDto,
  DigestControlsMetadataResponseDto$inboundSchema,
  DigestControlsMetadataResponseDto$Outbound,
  DigestControlsMetadataResponseDto$outboundSchema,
} from "./digestcontrolsmetadataresponsedto.js";
import {
  LookBackWindowDto,
  LookBackWindowDto$inboundSchema,
  LookBackWindowDto$Outbound,
  LookBackWindowDto$outboundSchema,
} from "./lookbackwindowdto.js";
import {
  ResourceOriginEnum,
  ResourceOriginEnum$inboundSchema,
  ResourceOriginEnum$outboundSchema,
} from "./resourceoriginenum.js";
import {
  StepIssuesDto,
  StepIssuesDto$inboundSchema,
  StepIssuesDto$Outbound,
  StepIssuesDto$outboundSchema,
} from "./stepissuesdto.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * The type of digest strategy. Determines which fields are applicable.
 */
export const DigestStepResponseDtoType = {
  Regular: "regular",
  Timed: "timed",
} as const;
/**
 * The type of digest strategy. Determines which fields are applicable.
 */
export type DigestStepResponseDtoType = ClosedEnum<
  typeof DigestStepResponseDtoType
>;

/**
 * The unit of time for the digest interval (for REGULAR type).
 */
export const DigestStepResponseDtoUnit = {
  Seconds: "seconds",
  Minutes: "minutes",
  Hours: "hours",
  Days: "days",
  Weeks: "weeks",
  Months: "months",
} as const;
/**
 * The unit of time for the digest interval (for REGULAR type).
 */
export type DigestStepResponseDtoUnit = ClosedEnum<
  typeof DigestStepResponseDtoUnit
>;

/**
 * Control values for the digest step
 */
export type DigestStepResponseDtoControlValues = {
  /**
   * JSONLogic filter conditions for conditionally skipping the step execution. Supports complex logical operations with AND, OR, and comparison operators. See https://jsonlogic.com/ for full typing reference.
   */
  skip?: { [k: string]: any } | undefined;
  /**
   * The type of digest strategy. Determines which fields are applicable.
   */
  type?: DigestStepResponseDtoType | undefined;
  /**
   * The amount of time for the digest interval (for REGULAR type). Min 1.
   */
  amount?: number | undefined;
  /**
   * The unit of time for the digest interval (for REGULAR type).
   */
  unit?: DigestStepResponseDtoUnit | undefined;
  /**
   * Configuration for look-back window (for REGULAR type).
   */
  lookBackWindow?: LookBackWindowDto | undefined;
  /**
   * Cron expression for TIMED digest. Min length 1.
   */
  cron?: string | undefined;
  /**
   * Specify a custom key for digesting events instead of the default event key.
   */
  digestKey?: string | undefined;
  additionalProperties?: { [k: string]: any };
};

export type DigestStepResponseDto = {
  /**
   * Controls metadata for the digest step
   */
  controls: DigestControlsMetadataResponseDto;
  /**
   * Control values for the digest step
   */
  controlValues?: DigestStepResponseDtoControlValues | undefined;
  /**
   * JSON Schema for variables, follows the JSON Schema standard
   */
  variables: { [k: string]: any };
  /**
   * Unique identifier of the step
   */
  stepId: string;
  /**
   * Database identifier of the step
   */
  id: string;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Slug of the step
   */
  slug: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Origin of the layout
   */
  origin: ResourceOriginEnum;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Workflow database identifier
   */
  workflowDatabaseId: string;
  /**
   * Issues associated with the step
   */
  issues?: StepIssuesDto | undefined;
};

/** @internal */
export const DigestStepResponseDtoType$inboundSchema: z.ZodNativeEnum<
  typeof DigestStepResponseDtoType
> = z.nativeEnum(DigestStepResponseDtoType);

/** @internal */
export const DigestStepResponseDtoType$outboundSchema: z.ZodNativeEnum<
  typeof DigestStepResponseDtoType
> = DigestStepResponseDtoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigestStepResponseDtoType$ {
  /** @deprecated use `DigestStepResponseDtoType$inboundSchema` instead. */
  export const inboundSchema = DigestStepResponseDtoType$inboundSchema;
  /** @deprecated use `DigestStepResponseDtoType$outboundSchema` instead. */
  export const outboundSchema = DigestStepResponseDtoType$outboundSchema;
}

/** @internal */
export const DigestStepResponseDtoUnit$inboundSchema: z.ZodNativeEnum<
  typeof DigestStepResponseDtoUnit
> = z.nativeEnum(DigestStepResponseDtoUnit);

/** @internal */
export const DigestStepResponseDtoUnit$outboundSchema: z.ZodNativeEnum<
  typeof DigestStepResponseDtoUnit
> = DigestStepResponseDtoUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigestStepResponseDtoUnit$ {
  /** @deprecated use `DigestStepResponseDtoUnit$inboundSchema` instead. */
  export const inboundSchema = DigestStepResponseDtoUnit$inboundSchema;
  /** @deprecated use `DigestStepResponseDtoUnit$outboundSchema` instead. */
  export const outboundSchema = DigestStepResponseDtoUnit$outboundSchema;
}

/** @internal */
export const DigestStepResponseDtoControlValues$inboundSchema: z.ZodType<
  DigestStepResponseDtoControlValues,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    skip: z.record(z.any()).optional(),
    type: DigestStepResponseDtoType$inboundSchema.optional(),
    amount: z.number().optional(),
    unit: DigestStepResponseDtoUnit$inboundSchema.optional(),
    lookBackWindow: LookBackWindowDto$inboundSchema.optional(),
    cron: z.string().optional(),
    digestKey: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type DigestStepResponseDtoControlValues$Outbound = {
  skip?: { [k: string]: any } | undefined;
  type?: string | undefined;
  amount?: number | undefined;
  unit?: string | undefined;
  lookBackWindow?: LookBackWindowDto$Outbound | undefined;
  cron?: string | undefined;
  digestKey?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const DigestStepResponseDtoControlValues$outboundSchema: z.ZodType<
  DigestStepResponseDtoControlValues$Outbound,
  z.ZodTypeDef,
  DigestStepResponseDtoControlValues
> = z.object({
  skip: z.record(z.any()).optional(),
  type: DigestStepResponseDtoType$outboundSchema.optional(),
  amount: z.number().optional(),
  unit: DigestStepResponseDtoUnit$outboundSchema.optional(),
  lookBackWindow: LookBackWindowDto$outboundSchema.optional(),
  cron: z.string().optional(),
  digestKey: z.string().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigestStepResponseDtoControlValues$ {
  /** @deprecated use `DigestStepResponseDtoControlValues$inboundSchema` instead. */
  export const inboundSchema = DigestStepResponseDtoControlValues$inboundSchema;
  /** @deprecated use `DigestStepResponseDtoControlValues$outboundSchema` instead. */
  export const outboundSchema =
    DigestStepResponseDtoControlValues$outboundSchema;
  /** @deprecated use `DigestStepResponseDtoControlValues$Outbound` instead. */
  export type Outbound = DigestStepResponseDtoControlValues$Outbound;
}

export function digestStepResponseDtoControlValuesToJSON(
  digestStepResponseDtoControlValues: DigestStepResponseDtoControlValues,
): string {
  return JSON.stringify(
    DigestStepResponseDtoControlValues$outboundSchema.parse(
      digestStepResponseDtoControlValues,
    ),
  );
}

export function digestStepResponseDtoControlValuesFromJSON(
  jsonString: string,
): SafeParseResult<DigestStepResponseDtoControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DigestStepResponseDtoControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DigestStepResponseDtoControlValues' from JSON`,
  );
}

/** @internal */
export const DigestStepResponseDto$inboundSchema: z.ZodType<
  DigestStepResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  controls: DigestControlsMetadataResponseDto$inboundSchema,
  controlValues: z.lazy(() => DigestStepResponseDtoControlValues$inboundSchema)
    .optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  _id: z.string(),
  name: z.string(),
  slug: z.string(),
  type: StepTypeEnum$inboundSchema,
  origin: ResourceOriginEnum$inboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type DigestStepResponseDto$Outbound = {
  controls: DigestControlsMetadataResponseDto$Outbound;
  controlValues?: DigestStepResponseDtoControlValues$Outbound | undefined;
  variables: { [k: string]: any };
  stepId: string;
  _id: string;
  name: string;
  slug: string;
  type: string;
  origin: string;
  workflowId: string;
  workflowDatabaseId: string;
  issues?: StepIssuesDto$Outbound | undefined;
};

/** @internal */
export const DigestStepResponseDto$outboundSchema: z.ZodType<
  DigestStepResponseDto$Outbound,
  z.ZodTypeDef,
  DigestStepResponseDto
> = z.object({
  controls: DigestControlsMetadataResponseDto$outboundSchema,
  controlValues: z.lazy(() => DigestStepResponseDtoControlValues$outboundSchema)
    .optional(),
  variables: z.record(z.any()),
  stepId: z.string(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  type: StepTypeEnum$outboundSchema,
  origin: ResourceOriginEnum$outboundSchema,
  workflowId: z.string(),
  workflowDatabaseId: z.string(),
  issues: StepIssuesDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigestStepResponseDto$ {
  /** @deprecated use `DigestStepResponseDto$inboundSchema` instead. */
  export const inboundSchema = DigestStepResponseDto$inboundSchema;
  /** @deprecated use `DigestStepResponseDto$outboundSchema` instead. */
  export const outboundSchema = DigestStepResponseDto$outboundSchema;
  /** @deprecated use `DigestStepResponseDto$Outbound` instead. */
  export type Outbound = DigestStepResponseDto$Outbound;
}

export function digestStepResponseDtoToJSON(
  digestStepResponseDto: DigestStepResponseDto,
): string {
  return JSON.stringify(
    DigestStepResponseDto$outboundSchema.parse(digestStepResponseDto),
  );
}

export function digestStepResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<DigestStepResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DigestStepResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DigestStepResponseDto' from JSON`,
  );
}
