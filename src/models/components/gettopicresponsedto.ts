/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTopicResponseDto = {
  id?: string | undefined;
  organizationId: string;
  environmentId: string;
  key: string;
  name: string;
  subscribers: Array<string>;
};

/** @internal */
export const GetTopicResponseDto$inboundSchema: z.ZodType<
  GetTopicResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  _organizationId: z.string(),
  _environmentId: z.string(),
  key: z.string(),
  name: z.string(),
  subscribers: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_organizationId": "organizationId",
    "_environmentId": "environmentId",
  });
});

/** @internal */
export type GetTopicResponseDto$Outbound = {
  _id?: string | undefined;
  _organizationId: string;
  _environmentId: string;
  key: string;
  name: string;
  subscribers: Array<string>;
};

/** @internal */
export const GetTopicResponseDto$outboundSchema: z.ZodType<
  GetTopicResponseDto$Outbound,
  z.ZodTypeDef,
  GetTopicResponseDto
> = z.object({
  id: z.string().optional(),
  organizationId: z.string(),
  environmentId: z.string(),
  key: z.string(),
  name: z.string(),
  subscribers: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    organizationId: "_organizationId",
    environmentId: "_environmentId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTopicResponseDto$ {
  /** @deprecated use `GetTopicResponseDto$inboundSchema` instead. */
  export const inboundSchema = GetTopicResponseDto$inboundSchema;
  /** @deprecated use `GetTopicResponseDto$outboundSchema` instead. */
  export const outboundSchema = GetTopicResponseDto$outboundSchema;
  /** @deprecated use `GetTopicResponseDto$Outbound` instead. */
  export type Outbound = GetTopicResponseDto$Outbound;
}

export function getTopicResponseDtoToJSON(
  getTopicResponseDto: GetTopicResponseDto,
): string {
  return JSON.stringify(
    GetTopicResponseDto$outboundSchema.parse(getTopicResponseDto),
  );
}

export function getTopicResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<GetTopicResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTopicResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTopicResponseDto' from JSON`,
  );
}
