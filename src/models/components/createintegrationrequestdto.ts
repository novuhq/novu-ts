/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    CredentialsDto,
    CredentialsDto$inboundSchema,
    CredentialsDto$Outbound,
    CredentialsDto$outboundSchema,
} from "./credentialsdto.js";
import {
    StepFilter,
    StepFilter$inboundSchema,
    StepFilter$Outbound,
    StepFilter$outboundSchema,
} from "./stepfilter.js";
import * as z from "zod";

export const Channel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type Channel = ClosedEnum<typeof Channel>;

export type CreateIntegrationRequestDto = {
    environmentId?: string | undefined;
    /**
     * If the integration is active the validation on the credentials field will run
     */
    active?: boolean | undefined;
    channel: Channel;
    check?: boolean | undefined;
    conditions?: Array<StepFilter> | undefined;
    credentials?: CredentialsDto | undefined;
    identifier?: string | undefined;
    name?: string | undefined;
    providerId: string;
};

/** @internal */
export const Channel$inboundSchema: z.ZodNativeEnum<typeof Channel> = z.nativeEnum(Channel);

/** @internal */
export const Channel$outboundSchema: z.ZodNativeEnum<typeof Channel> = Channel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Channel$ {
    /** @deprecated use `Channel$inboundSchema` instead. */
    export const inboundSchema = Channel$inboundSchema;
    /** @deprecated use `Channel$outboundSchema` instead. */
    export const outboundSchema = Channel$outboundSchema;
}

/** @internal */
export const CreateIntegrationRequestDto$inboundSchema: z.ZodType<
    CreateIntegrationRequestDto,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        _environmentId: z.string().optional(),
        active: z.boolean().optional(),
        channel: Channel$inboundSchema,
        check: z.boolean().optional(),
        conditions: z.array(StepFilter$inboundSchema).optional(),
        credentials: CredentialsDto$inboundSchema.optional(),
        identifier: z.string().optional(),
        name: z.string().optional(),
        providerId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            _environmentId: "environmentId",
        });
    });

/** @internal */
export type CreateIntegrationRequestDto$Outbound = {
    _environmentId?: string | undefined;
    active?: boolean | undefined;
    channel: string;
    check?: boolean | undefined;
    conditions?: Array<StepFilter$Outbound> | undefined;
    credentials?: CredentialsDto$Outbound | undefined;
    identifier?: string | undefined;
    name?: string | undefined;
    providerId: string;
};

/** @internal */
export const CreateIntegrationRequestDto$outboundSchema: z.ZodType<
    CreateIntegrationRequestDto$Outbound,
    z.ZodTypeDef,
    CreateIntegrationRequestDto
> = z
    .object({
        environmentId: z.string().optional(),
        active: z.boolean().optional(),
        channel: Channel$outboundSchema,
        check: z.boolean().optional(),
        conditions: z.array(StepFilter$outboundSchema).optional(),
        credentials: CredentialsDto$outboundSchema.optional(),
        identifier: z.string().optional(),
        name: z.string().optional(),
        providerId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            environmentId: "_environmentId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateIntegrationRequestDto$ {
    /** @deprecated use `CreateIntegrationRequestDto$inboundSchema` instead. */
    export const inboundSchema = CreateIntegrationRequestDto$inboundSchema;
    /** @deprecated use `CreateIntegrationRequestDto$outboundSchema` instead. */
    export const outboundSchema = CreateIntegrationRequestDto$outboundSchema;
    /** @deprecated use `CreateIntegrationRequestDto$Outbound` instead. */
    export type Outbound = CreateIntegrationRequestDto$Outbound;
}
