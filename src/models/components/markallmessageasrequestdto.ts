/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Optional feed identifier or array of feed identifiers
 */
export type FeedIdentifier = string | Array<string>;

/**
 * Mark all subscriber messages as read, unread, seen or unseen
 */
export const MarkAs = {
    Read: "read",
    Seen: "seen",
    Unread: "unread",
    Unseen: "unseen",
} as const;
/**
 * Mark all subscriber messages as read, unread, seen or unseen
 */
export type MarkAs = ClosedEnum<typeof MarkAs>;

export type MarkAllMessageAsRequestDto = {
    /**
     * Optional feed identifier or array of feed identifiers
     */
    feedIdentifier?: string | Array<string> | undefined;
    /**
     * Mark all subscriber messages as read, unread, seen or unseen
     */
    markAs: MarkAs;
};

/** @internal */
export const FeedIdentifier$inboundSchema: z.ZodType<FeedIdentifier, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.array(z.string())]);

/** @internal */
export type FeedIdentifier$Outbound = string | Array<string>;

/** @internal */
export const FeedIdentifier$outboundSchema: z.ZodType<
    FeedIdentifier$Outbound,
    z.ZodTypeDef,
    FeedIdentifier
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedIdentifier$ {
    /** @deprecated use `FeedIdentifier$inboundSchema` instead. */
    export const inboundSchema = FeedIdentifier$inboundSchema;
    /** @deprecated use `FeedIdentifier$outboundSchema` instead. */
    export const outboundSchema = FeedIdentifier$outboundSchema;
    /** @deprecated use `FeedIdentifier$Outbound` instead. */
    export type Outbound = FeedIdentifier$Outbound;
}

/** @internal */
export const MarkAs$inboundSchema: z.ZodNativeEnum<typeof MarkAs> = z.nativeEnum(MarkAs);

/** @internal */
export const MarkAs$outboundSchema: z.ZodNativeEnum<typeof MarkAs> = MarkAs$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkAs$ {
    /** @deprecated use `MarkAs$inboundSchema` instead. */
    export const inboundSchema = MarkAs$inboundSchema;
    /** @deprecated use `MarkAs$outboundSchema` instead. */
    export const outboundSchema = MarkAs$outboundSchema;
}

/** @internal */
export const MarkAllMessageAsRequestDto$inboundSchema: z.ZodType<
    MarkAllMessageAsRequestDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    feedIdentifier: z.union([z.string(), z.array(z.string())]).optional(),
    markAs: MarkAs$inboundSchema,
});

/** @internal */
export type MarkAllMessageAsRequestDto$Outbound = {
    feedIdentifier?: string | Array<string> | undefined;
    markAs: string;
};

/** @internal */
export const MarkAllMessageAsRequestDto$outboundSchema: z.ZodType<
    MarkAllMessageAsRequestDto$Outbound,
    z.ZodTypeDef,
    MarkAllMessageAsRequestDto
> = z.object({
    feedIdentifier: z.union([z.string(), z.array(z.string())]).optional(),
    markAs: MarkAs$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkAllMessageAsRequestDto$ {
    /** @deprecated use `MarkAllMessageAsRequestDto$inboundSchema` instead. */
    export const inboundSchema = MarkAllMessageAsRequestDto$inboundSchema;
    /** @deprecated use `MarkAllMessageAsRequestDto$outboundSchema` instead. */
    export const outboundSchema = MarkAllMessageAsRequestDto$outboundSchema;
    /** @deprecated use `MarkAllMessageAsRequestDto$Outbound` instead. */
    export type Outbound = MarkAllMessageAsRequestDto$Outbound;
}
