/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Preference,
  Preference$inboundSchema,
  Preference$Outbound,
  Preference$outboundSchema,
} from "./preference.js";

export type UpdateSubscriberPreferenceGlobalResponseDto = {
  /**
   * The preferences of the subscriber regarding the related workflow
   */
  preference: Preference;
};

/** @internal */
export const UpdateSubscriberPreferenceGlobalResponseDto$inboundSchema:
  z.ZodType<
    UpdateSubscriberPreferenceGlobalResponseDto,
    z.ZodTypeDef,
    unknown
  > = z.object({
    preference: Preference$inboundSchema,
  });

/** @internal */
export type UpdateSubscriberPreferenceGlobalResponseDto$Outbound = {
  preference: Preference$Outbound;
};

/** @internal */
export const UpdateSubscriberPreferenceGlobalResponseDto$outboundSchema:
  z.ZodType<
    UpdateSubscriberPreferenceGlobalResponseDto$Outbound,
    z.ZodTypeDef,
    UpdateSubscriberPreferenceGlobalResponseDto
  > = z.object({
    preference: Preference$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSubscriberPreferenceGlobalResponseDto$ {
  /** @deprecated use `UpdateSubscriberPreferenceGlobalResponseDto$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSubscriberPreferenceGlobalResponseDto$inboundSchema;
  /** @deprecated use `UpdateSubscriberPreferenceGlobalResponseDto$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSubscriberPreferenceGlobalResponseDto$outboundSchema;
  /** @deprecated use `UpdateSubscriberPreferenceGlobalResponseDto$Outbound` instead. */
  export type Outbound = UpdateSubscriberPreferenceGlobalResponseDto$Outbound;
}

export function updateSubscriberPreferenceGlobalResponseDtoToJSON(
  updateSubscriberPreferenceGlobalResponseDto:
    UpdateSubscriberPreferenceGlobalResponseDto,
): string {
  return JSON.stringify(
    UpdateSubscriberPreferenceGlobalResponseDto$outboundSchema.parse(
      updateSubscriberPreferenceGlobalResponseDto,
    ),
  );
}

export function updateSubscriberPreferenceGlobalResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSubscriberPreferenceGlobalResponseDto,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSubscriberPreferenceGlobalResponseDto$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSubscriberPreferenceGlobalResponseDto' from JSON`,
  );
}
