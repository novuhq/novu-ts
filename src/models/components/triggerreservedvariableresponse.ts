/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the reserved variable
 */
export const TriggerReservedVariableResponseType = {
  Tenant: "tenant",
  Actor: "actor",
} as const;
/**
 * The type of the reserved variable
 */
export type TriggerReservedVariableResponseType = ClosedEnum<
  typeof TriggerReservedVariableResponseType
>;

export type TriggerReservedVariableResponse = {
  /**
   * The type of the reserved variable
   */
  type: TriggerReservedVariableResponseType;
  /**
   * The reserved variables of the trigger
   */
  variables: Array<string>;
};

/** @internal */
export const TriggerReservedVariableResponseType$inboundSchema: z.ZodNativeEnum<
  typeof TriggerReservedVariableResponseType
> = z.nativeEnum(TriggerReservedVariableResponseType);

/** @internal */
export const TriggerReservedVariableResponseType$outboundSchema:
  z.ZodNativeEnum<typeof TriggerReservedVariableResponseType> =
    TriggerReservedVariableResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReservedVariableResponseType$ {
  /** @deprecated use `TriggerReservedVariableResponseType$inboundSchema` instead. */
  export const inboundSchema =
    TriggerReservedVariableResponseType$inboundSchema;
  /** @deprecated use `TriggerReservedVariableResponseType$outboundSchema` instead. */
  export const outboundSchema =
    TriggerReservedVariableResponseType$outboundSchema;
}

/** @internal */
export const TriggerReservedVariableResponse$inboundSchema: z.ZodType<
  TriggerReservedVariableResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TriggerReservedVariableResponseType$inboundSchema,
  variables: z.array(z.string()),
});

/** @internal */
export type TriggerReservedVariableResponse$Outbound = {
  type: string;
  variables: Array<string>;
};

/** @internal */
export const TriggerReservedVariableResponse$outboundSchema: z.ZodType<
  TriggerReservedVariableResponse$Outbound,
  z.ZodTypeDef,
  TriggerReservedVariableResponse
> = z.object({
  type: TriggerReservedVariableResponseType$outboundSchema,
  variables: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerReservedVariableResponse$ {
  /** @deprecated use `TriggerReservedVariableResponse$inboundSchema` instead. */
  export const inboundSchema = TriggerReservedVariableResponse$inboundSchema;
  /** @deprecated use `TriggerReservedVariableResponse$outboundSchema` instead. */
  export const outboundSchema = TriggerReservedVariableResponse$outboundSchema;
  /** @deprecated use `TriggerReservedVariableResponse$Outbound` instead. */
  export type Outbound = TriggerReservedVariableResponse$Outbound;
}

export function triggerReservedVariableResponseToJSON(
  triggerReservedVariableResponse: TriggerReservedVariableResponse,
): string {
  return JSON.stringify(
    TriggerReservedVariableResponse$outboundSchema.parse(
      triggerReservedVariableResponse,
    ),
  );
}

export function triggerReservedVariableResponseFromJSON(
  jsonString: string,
): SafeParseResult<TriggerReservedVariableResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggerReservedVariableResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggerReservedVariableResponse' from JSON`,
  );
}
