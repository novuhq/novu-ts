/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ApiKeyDto,
  ApiKeyDto$inboundSchema,
  ApiKeyDto$Outbound,
  ApiKeyDto$outboundSchema,
} from "./apikeydto.js";

export type EnvironmentResponseDto = {
  /**
   * Unique identifier of the environment
   */
  id: string;
  /**
   * Name of the environment
   */
  name: string;
  /**
   * Organization ID associated with the environment
   */
  organizationId: string;
  /**
   * Unique identifier for the environment
   */
  identifier: string;
  /**
   * List of API keys associated with the environment
   */
  apiKeys?: Array<ApiKeyDto> | undefined;
  /**
   * Parent environment ID
   */
  parentId?: string | undefined;
  /**
   * URL-friendly slug for the environment
   */
  slug?: string | undefined;
};

/** @internal */
export const EnvironmentResponseDto$inboundSchema: z.ZodType<
  EnvironmentResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  name: z.string(),
  _organizationId: z.string(),
  identifier: z.string(),
  apiKeys: z.array(ApiKeyDto$inboundSchema).optional(),
  _parentId: z.string().optional(),
  slug: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_organizationId": "organizationId",
    "_parentId": "parentId",
  });
});

/** @internal */
export type EnvironmentResponseDto$Outbound = {
  _id: string;
  name: string;
  _organizationId: string;
  identifier: string;
  apiKeys?: Array<ApiKeyDto$Outbound> | undefined;
  _parentId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const EnvironmentResponseDto$outboundSchema: z.ZodType<
  EnvironmentResponseDto$Outbound,
  z.ZodTypeDef,
  EnvironmentResponseDto
> = z.object({
  id: z.string(),
  name: z.string(),
  organizationId: z.string(),
  identifier: z.string(),
  apiKeys: z.array(ApiKeyDto$outboundSchema).optional(),
  parentId: z.string().optional(),
  slug: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    organizationId: "_organizationId",
    parentId: "_parentId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentResponseDto$ {
  /** @deprecated use `EnvironmentResponseDto$inboundSchema` instead. */
  export const inboundSchema = EnvironmentResponseDto$inboundSchema;
  /** @deprecated use `EnvironmentResponseDto$outboundSchema` instead. */
  export const outboundSchema = EnvironmentResponseDto$outboundSchema;
  /** @deprecated use `EnvironmentResponseDto$Outbound` instead. */
  export type Outbound = EnvironmentResponseDto$Outbound;
}

export function environmentResponseDtoToJSON(
  environmentResponseDto: EnvironmentResponseDto,
): string {
  return JSON.stringify(
    EnvironmentResponseDto$outboundSchema.parse(environmentResponseDto),
  );
}

export function environmentResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentResponseDto' from JSON`,
  );
}
