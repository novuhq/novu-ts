/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Message action status
 */
export const MarkMessageActionAsSeenDtoStatus = {
  Pending: "pending",
  Done: "done",
} as const;
/**
 * Message action status
 */
export type MarkMessageActionAsSeenDtoStatus = ClosedEnum<
  typeof MarkMessageActionAsSeenDtoStatus
>;

/**
 * Message action payload
 */
export type Payload = {};

export type MarkMessageActionAsSeenDto = {
  /**
   * Message action status
   */
  status: MarkMessageActionAsSeenDtoStatus;
  /**
   * Message action payload
   */
  payload?: Payload | undefined;
};

/** @internal */
export const MarkMessageActionAsSeenDtoStatus$inboundSchema: z.ZodNativeEnum<
  typeof MarkMessageActionAsSeenDtoStatus
> = z.nativeEnum(MarkMessageActionAsSeenDtoStatus);

/** @internal */
export const MarkMessageActionAsSeenDtoStatus$outboundSchema: z.ZodNativeEnum<
  typeof MarkMessageActionAsSeenDtoStatus
> = MarkMessageActionAsSeenDtoStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkMessageActionAsSeenDtoStatus$ {
  /** @deprecated use `MarkMessageActionAsSeenDtoStatus$inboundSchema` instead. */
  export const inboundSchema = MarkMessageActionAsSeenDtoStatus$inboundSchema;
  /** @deprecated use `MarkMessageActionAsSeenDtoStatus$outboundSchema` instead. */
  export const outboundSchema = MarkMessageActionAsSeenDtoStatus$outboundSchema;
}

/** @internal */
export const Payload$inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Payload$Outbound = {};

/** @internal */
export const Payload$outboundSchema: z.ZodType<
  Payload$Outbound,
  z.ZodTypeDef,
  Payload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payload$ {
  /** @deprecated use `Payload$inboundSchema` instead. */
  export const inboundSchema = Payload$inboundSchema;
  /** @deprecated use `Payload$outboundSchema` instead. */
  export const outboundSchema = Payload$outboundSchema;
  /** @deprecated use `Payload$Outbound` instead. */
  export type Outbound = Payload$Outbound;
}

export function payloadToJSON(payload: Payload): string {
  return JSON.stringify(Payload$outboundSchema.parse(payload));
}

export function payloadFromJSON(
  jsonString: string,
): SafeParseResult<Payload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payload' from JSON`,
  );
}

/** @internal */
export const MarkMessageActionAsSeenDto$inboundSchema: z.ZodType<
  MarkMessageActionAsSeenDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: MarkMessageActionAsSeenDtoStatus$inboundSchema,
  payload: z.lazy(() => Payload$inboundSchema).optional(),
});

/** @internal */
export type MarkMessageActionAsSeenDto$Outbound = {
  status: string;
  payload?: Payload$Outbound | undefined;
};

/** @internal */
export const MarkMessageActionAsSeenDto$outboundSchema: z.ZodType<
  MarkMessageActionAsSeenDto$Outbound,
  z.ZodTypeDef,
  MarkMessageActionAsSeenDto
> = z.object({
  status: MarkMessageActionAsSeenDtoStatus$outboundSchema,
  payload: z.lazy(() => Payload$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkMessageActionAsSeenDto$ {
  /** @deprecated use `MarkMessageActionAsSeenDto$inboundSchema` instead. */
  export const inboundSchema = MarkMessageActionAsSeenDto$inboundSchema;
  /** @deprecated use `MarkMessageActionAsSeenDto$outboundSchema` instead. */
  export const outboundSchema = MarkMessageActionAsSeenDto$outboundSchema;
  /** @deprecated use `MarkMessageActionAsSeenDto$Outbound` instead. */
  export type Outbound = MarkMessageActionAsSeenDto$Outbound;
}

export function markMessageActionAsSeenDtoToJSON(
  markMessageActionAsSeenDto: MarkMessageActionAsSeenDto,
): string {
  return JSON.stringify(
    MarkMessageActionAsSeenDto$outboundSchema.parse(markMessageActionAsSeenDto),
  );
}

export function markMessageActionAsSeenDtoFromJSON(
  jsonString: string,
): SafeParseResult<MarkMessageActionAsSeenDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MarkMessageActionAsSeenDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarkMessageActionAsSeenDto' from JSON`,
  );
}
