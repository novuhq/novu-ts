/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DigestRegularMetadataUnit = {
  Seconds: "seconds",
  Minutes: "minutes",
  Hours: "hours",
  Days: "days",
  Weeks: "weeks",
  Months: "months",
} as const;
export type DigestRegularMetadataUnit = ClosedEnum<
  typeof DigestRegularMetadataUnit
>;

export const DigestRegularMetadataType = {
  Regular: "regular",
  Backoff: "backoff",
} as const;
export type DigestRegularMetadataType = ClosedEnum<
  typeof DigestRegularMetadataType
>;

export const BackoffUnit = {
  Seconds: "seconds",
  Minutes: "minutes",
  Hours: "hours",
  Days: "days",
  Weeks: "weeks",
  Months: "months",
} as const;
export type BackoffUnit = ClosedEnum<typeof BackoffUnit>;

export type DigestRegularMetadata = {
  amount?: number | undefined;
  unit?: DigestRegularMetadataUnit | undefined;
  digestKey?: string | undefined;
  type: DigestRegularMetadataType;
  backoff?: boolean | undefined;
  backoffAmount?: number | undefined;
  backoffUnit?: BackoffUnit | undefined;
  updateMode?: boolean | undefined;
};

/** @internal */
export const DigestRegularMetadataUnit$inboundSchema: z.ZodNativeEnum<
  typeof DigestRegularMetadataUnit
> = z.nativeEnum(DigestRegularMetadataUnit);

/** @internal */
export const DigestRegularMetadataUnit$outboundSchema: z.ZodNativeEnum<
  typeof DigestRegularMetadataUnit
> = DigestRegularMetadataUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigestRegularMetadataUnit$ {
  /** @deprecated use `DigestRegularMetadataUnit$inboundSchema` instead. */
  export const inboundSchema = DigestRegularMetadataUnit$inboundSchema;
  /** @deprecated use `DigestRegularMetadataUnit$outboundSchema` instead. */
  export const outboundSchema = DigestRegularMetadataUnit$outboundSchema;
}

/** @internal */
export const DigestRegularMetadataType$inboundSchema: z.ZodNativeEnum<
  typeof DigestRegularMetadataType
> = z.nativeEnum(DigestRegularMetadataType);

/** @internal */
export const DigestRegularMetadataType$outboundSchema: z.ZodNativeEnum<
  typeof DigestRegularMetadataType
> = DigestRegularMetadataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigestRegularMetadataType$ {
  /** @deprecated use `DigestRegularMetadataType$inboundSchema` instead. */
  export const inboundSchema = DigestRegularMetadataType$inboundSchema;
  /** @deprecated use `DigestRegularMetadataType$outboundSchema` instead. */
  export const outboundSchema = DigestRegularMetadataType$outboundSchema;
}

/** @internal */
export const BackoffUnit$inboundSchema: z.ZodNativeEnum<typeof BackoffUnit> = z
  .nativeEnum(BackoffUnit);

/** @internal */
export const BackoffUnit$outboundSchema: z.ZodNativeEnum<typeof BackoffUnit> =
  BackoffUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BackoffUnit$ {
  /** @deprecated use `BackoffUnit$inboundSchema` instead. */
  export const inboundSchema = BackoffUnit$inboundSchema;
  /** @deprecated use `BackoffUnit$outboundSchema` instead. */
  export const outboundSchema = BackoffUnit$outboundSchema;
}

/** @internal */
export const DigestRegularMetadata$inboundSchema: z.ZodType<
  DigestRegularMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().optional(),
  unit: DigestRegularMetadataUnit$inboundSchema.optional(),
  digestKey: z.string().optional(),
  type: DigestRegularMetadataType$inboundSchema,
  backoff: z.boolean().optional(),
  backoffAmount: z.number().optional(),
  backoffUnit: BackoffUnit$inboundSchema.optional(),
  updateMode: z.boolean().optional(),
});

/** @internal */
export type DigestRegularMetadata$Outbound = {
  amount?: number | undefined;
  unit?: string | undefined;
  digestKey?: string | undefined;
  type: string;
  backoff?: boolean | undefined;
  backoffAmount?: number | undefined;
  backoffUnit?: string | undefined;
  updateMode?: boolean | undefined;
};

/** @internal */
export const DigestRegularMetadata$outboundSchema: z.ZodType<
  DigestRegularMetadata$Outbound,
  z.ZodTypeDef,
  DigestRegularMetadata
> = z.object({
  amount: z.number().optional(),
  unit: DigestRegularMetadataUnit$outboundSchema.optional(),
  digestKey: z.string().optional(),
  type: DigestRegularMetadataType$outboundSchema,
  backoff: z.boolean().optional(),
  backoffAmount: z.number().optional(),
  backoffUnit: BackoffUnit$outboundSchema.optional(),
  updateMode: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DigestRegularMetadata$ {
  /** @deprecated use `DigestRegularMetadata$inboundSchema` instead. */
  export const inboundSchema = DigestRegularMetadata$inboundSchema;
  /** @deprecated use `DigestRegularMetadata$outboundSchema` instead. */
  export const outboundSchema = DigestRegularMetadata$outboundSchema;
  /** @deprecated use `DigestRegularMetadata$Outbound` instead. */
  export type Outbound = DigestRegularMetadata$Outbound;
}

export function digestRegularMetadataToJSON(
  digestRegularMetadata: DigestRegularMetadata,
): string {
  return JSON.stringify(
    DigestRegularMetadata$outboundSchema.parse(digestRegularMetadata),
  );
}

export function digestRegularMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DigestRegularMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DigestRegularMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DigestRegularMetadata' from JSON`,
  );
}
