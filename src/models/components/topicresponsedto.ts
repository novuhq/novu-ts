/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TopicResponseDto = {
  /**
   * The identifier of the topic
   */
  id: string;
  /**
   * The unique key of the topic
   */
  key: string;
  /**
   * The name of the topic
   */
  name?: string | undefined;
  /**
   * The date the topic was created
   */
  createdAt?: string | undefined;
  /**
   * The date the topic was last updated
   */
  updatedAt?: string | undefined;
};

/** @internal */
export const TopicResponseDto$inboundSchema: z.ZodType<
  TopicResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  name: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type TopicResponseDto$Outbound = {
  _id: string;
  key: string;
  name?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

/** @internal */
export const TopicResponseDto$outboundSchema: z.ZodType<
  TopicResponseDto$Outbound,
  z.ZodTypeDef,
  TopicResponseDto
> = z.object({
  id: z.string(),
  key: z.string(),
  name: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicResponseDto$ {
  /** @deprecated use `TopicResponseDto$inboundSchema` instead. */
  export const inboundSchema = TopicResponseDto$inboundSchema;
  /** @deprecated use `TopicResponseDto$outboundSchema` instead. */
  export const outboundSchema = TopicResponseDto$outboundSchema;
  /** @deprecated use `TopicResponseDto$Outbound` instead. */
  export type Outbound = TopicResponseDto$Outbound;
}

export function topicResponseDtoToJSON(
  topicResponseDto: TopicResponseDto,
): string {
  return JSON.stringify(
    TopicResponseDto$outboundSchema.parse(topicResponseDto),
  );
}

export function topicResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<TopicResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicResponseDto' from JSON`,
  );
}
