/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Optional custom data to associate with this context.
 */
export type Data = {};

export type CreateContextRequestDto = {
  /**
   * Context type (e.g., tenant, app, workspace). Must be lowercase alphanumeric with optional separators.
   */
  type: string;
  /**
   * Unique identifier for this context. Must be lowercase alphanumeric with optional separators.
   */
  id: string;
  /**
   * Optional custom data to associate with this context.
   */
  data?: Data | undefined;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const CreateContextRequestDto$inboundSchema: z.ZodType<
  CreateContextRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  id: z.string(),
  data: z.lazy(() => Data$inboundSchema).optional(),
});

/** @internal */
export type CreateContextRequestDto$Outbound = {
  type: string;
  id: string;
  data?: Data$Outbound | undefined;
};

/** @internal */
export const CreateContextRequestDto$outboundSchema: z.ZodType<
  CreateContextRequestDto$Outbound,
  z.ZodTypeDef,
  CreateContextRequestDto
> = z.object({
  type: z.string(),
  id: z.string(),
  data: z.lazy(() => Data$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContextRequestDto$ {
  /** @deprecated use `CreateContextRequestDto$inboundSchema` instead. */
  export const inboundSchema = CreateContextRequestDto$inboundSchema;
  /** @deprecated use `CreateContextRequestDto$outboundSchema` instead. */
  export const outboundSchema = CreateContextRequestDto$outboundSchema;
  /** @deprecated use `CreateContextRequestDto$Outbound` instead. */
  export type Outbound = CreateContextRequestDto$Outbound;
}

export function createContextRequestDtoToJSON(
  createContextRequestDto: CreateContextRequestDto,
): string {
  return JSON.stringify(
    CreateContextRequestDto$outboundSchema.parse(createContextRequestDto),
  );
}

export function createContextRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<CreateContextRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateContextRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateContextRequestDto' from JSON`,
  );
}
