/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationGroupResponseDto = {
  id?: string | undefined;
  name: string;
  environmentId: string;
  organizationId: string;
  parentId?: string | undefined;
};

/** @internal */
export const NotificationGroupResponseDto$inboundSchema: z.ZodType<
  NotificationGroupResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  name: z.string(),
  _environmentId: z.string(),
  _organizationId: z.string(),
  _parentId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_environmentId": "environmentId",
    "_organizationId": "organizationId",
    "_parentId": "parentId",
  });
});

/** @internal */
export type NotificationGroupResponseDto$Outbound = {
  _id?: string | undefined;
  name: string;
  _environmentId: string;
  _organizationId: string;
  _parentId?: string | undefined;
};

/** @internal */
export const NotificationGroupResponseDto$outboundSchema: z.ZodType<
  NotificationGroupResponseDto$Outbound,
  z.ZodTypeDef,
  NotificationGroupResponseDto
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  environmentId: z.string(),
  organizationId: z.string(),
  parentId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    environmentId: "_environmentId",
    organizationId: "_organizationId",
    parentId: "_parentId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationGroupResponseDto$ {
  /** @deprecated use `NotificationGroupResponseDto$inboundSchema` instead. */
  export const inboundSchema = NotificationGroupResponseDto$inboundSchema;
  /** @deprecated use `NotificationGroupResponseDto$outboundSchema` instead. */
  export const outboundSchema = NotificationGroupResponseDto$outboundSchema;
  /** @deprecated use `NotificationGroupResponseDto$Outbound` instead. */
  export type Outbound = NotificationGroupResponseDto$Outbound;
}

export function notificationGroupResponseDtoToJSON(
  notificationGroupResponseDto: NotificationGroupResponseDto,
): string {
  return JSON.stringify(
    NotificationGroupResponseDto$outboundSchema.parse(
      notificationGroupResponseDto,
    ),
  );
}

export function notificationGroupResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<NotificationGroupResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationGroupResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationGroupResponseDto' from JSON`,
  );
}
