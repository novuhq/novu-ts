/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Customer = {};

export type PlainCardRequestDtoTenant = {};

export type Thread = {};

export type PlainCardRequestDto = {
  cardKeys?: Array<string> | undefined;
  customer?: Customer | null | undefined;
  tenant?: PlainCardRequestDtoTenant | null | undefined;
  thread?: Thread | null | undefined;
  timestamp: string;
};

/** @internal */
export const Customer$inboundSchema: z.ZodType<
  Customer,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Customer$Outbound = {};

/** @internal */
export const Customer$outboundSchema: z.ZodType<
  Customer$Outbound,
  z.ZodTypeDef,
  Customer
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customer$ {
  /** @deprecated use `Customer$inboundSchema` instead. */
  export const inboundSchema = Customer$inboundSchema;
  /** @deprecated use `Customer$outboundSchema` instead. */
  export const outboundSchema = Customer$outboundSchema;
  /** @deprecated use `Customer$Outbound` instead. */
  export type Outbound = Customer$Outbound;
}

export function customerToJSON(customer: Customer): string {
  return JSON.stringify(Customer$outboundSchema.parse(customer));
}

export function customerFromJSON(
  jsonString: string,
): SafeParseResult<Customer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Customer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Customer' from JSON`,
  );
}

/** @internal */
export const PlainCardRequestDtoTenant$inboundSchema: z.ZodType<
  PlainCardRequestDtoTenant,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PlainCardRequestDtoTenant$Outbound = {};

/** @internal */
export const PlainCardRequestDtoTenant$outboundSchema: z.ZodType<
  PlainCardRequestDtoTenant$Outbound,
  z.ZodTypeDef,
  PlainCardRequestDtoTenant
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlainCardRequestDtoTenant$ {
  /** @deprecated use `PlainCardRequestDtoTenant$inboundSchema` instead. */
  export const inboundSchema = PlainCardRequestDtoTenant$inboundSchema;
  /** @deprecated use `PlainCardRequestDtoTenant$outboundSchema` instead. */
  export const outboundSchema = PlainCardRequestDtoTenant$outboundSchema;
  /** @deprecated use `PlainCardRequestDtoTenant$Outbound` instead. */
  export type Outbound = PlainCardRequestDtoTenant$Outbound;
}

export function plainCardRequestDtoTenantToJSON(
  plainCardRequestDtoTenant: PlainCardRequestDtoTenant,
): string {
  return JSON.stringify(
    PlainCardRequestDtoTenant$outboundSchema.parse(plainCardRequestDtoTenant),
  );
}

export function plainCardRequestDtoTenantFromJSON(
  jsonString: string,
): SafeParseResult<PlainCardRequestDtoTenant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlainCardRequestDtoTenant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlainCardRequestDtoTenant' from JSON`,
  );
}

/** @internal */
export const Thread$inboundSchema: z.ZodType<Thread, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Thread$Outbound = {};

/** @internal */
export const Thread$outboundSchema: z.ZodType<
  Thread$Outbound,
  z.ZodTypeDef,
  Thread
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Thread$ {
  /** @deprecated use `Thread$inboundSchema` instead. */
  export const inboundSchema = Thread$inboundSchema;
  /** @deprecated use `Thread$outboundSchema` instead. */
  export const outboundSchema = Thread$outboundSchema;
  /** @deprecated use `Thread$Outbound` instead. */
  export type Outbound = Thread$Outbound;
}

export function threadToJSON(thread: Thread): string {
  return JSON.stringify(Thread$outboundSchema.parse(thread));
}

export function threadFromJSON(
  jsonString: string,
): SafeParseResult<Thread, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Thread$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Thread' from JSON`,
  );
}

/** @internal */
export const PlainCardRequestDto$inboundSchema: z.ZodType<
  PlainCardRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  cardKeys: z.array(z.string()).optional(),
  customer: z.nullable(z.lazy(() => Customer$inboundSchema)).optional(),
  tenant: z.nullable(z.lazy(() => PlainCardRequestDtoTenant$inboundSchema))
    .optional(),
  thread: z.nullable(z.lazy(() => Thread$inboundSchema)).optional(),
  timestamp: z.string(),
});

/** @internal */
export type PlainCardRequestDto$Outbound = {
  cardKeys?: Array<string> | undefined;
  customer?: Customer$Outbound | null | undefined;
  tenant?: PlainCardRequestDtoTenant$Outbound | null | undefined;
  thread?: Thread$Outbound | null | undefined;
  timestamp: string;
};

/** @internal */
export const PlainCardRequestDto$outboundSchema: z.ZodType<
  PlainCardRequestDto$Outbound,
  z.ZodTypeDef,
  PlainCardRequestDto
> = z.object({
  cardKeys: z.array(z.string()).optional(),
  customer: z.nullable(z.lazy(() => Customer$outboundSchema)).optional(),
  tenant: z.nullable(z.lazy(() => PlainCardRequestDtoTenant$outboundSchema))
    .optional(),
  thread: z.nullable(z.lazy(() => Thread$outboundSchema)).optional(),
  timestamp: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlainCardRequestDto$ {
  /** @deprecated use `PlainCardRequestDto$inboundSchema` instead. */
  export const inboundSchema = PlainCardRequestDto$inboundSchema;
  /** @deprecated use `PlainCardRequestDto$outboundSchema` instead. */
  export const outboundSchema = PlainCardRequestDto$outboundSchema;
  /** @deprecated use `PlainCardRequestDto$Outbound` instead. */
  export type Outbound = PlainCardRequestDto$Outbound;
}

export function plainCardRequestDtoToJSON(
  plainCardRequestDto: PlainCardRequestDto,
): string {
  return JSON.stringify(
    PlainCardRequestDto$outboundSchema.parse(plainCardRequestDto),
  );
}

export function plainCardRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<PlainCardRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlainCardRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlainCardRequestDto' from JSON`,
  );
}
