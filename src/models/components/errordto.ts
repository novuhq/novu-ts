/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ErrorDto = {
  /**
   * HTTP status code of the error response.
   */
  statusCode: number;
  /**
   * Timestamp of when the error occurred.
   */
  timestamp: string;
  /**
   * The path where the error occurred.
   */
  path: string;
  /**
   * A detailed error message.
   */
  message: string;
  /**
   * Optional context object for additional error details.
   */
  ctx?: { [k: string]: any } | undefined;
  /**
   * Optional unique identifier for the error, useful for tracking using Sentry and
   *
   * @remarks
   *       New Relic, only available for 500.
   */
  errorId?: string | undefined;
};

/** @internal */
export const ErrorDto$inboundSchema: z.ZodType<
  ErrorDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  statusCode: z.number(),
  timestamp: z.string(),
  path: z.string(),
  message: z.string(),
  ctx: z.record(z.any()).optional(),
  errorId: z.string().optional(),
});

/** @internal */
export type ErrorDto$Outbound = {
  statusCode: number;
  timestamp: string;
  path: string;
  message: string;
  ctx?: { [k: string]: any } | undefined;
  errorId?: string | undefined;
};

/** @internal */
export const ErrorDto$outboundSchema: z.ZodType<
  ErrorDto$Outbound,
  z.ZodTypeDef,
  ErrorDto
> = z.object({
  statusCode: z.number(),
  timestamp: z.string(),
  path: z.string(),
  message: z.string(),
  ctx: z.record(z.any()).optional(),
  errorId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorDto$ {
  /** @deprecated use `ErrorDto$inboundSchema` instead. */
  export const inboundSchema = ErrorDto$inboundSchema;
  /** @deprecated use `ErrorDto$outboundSchema` instead. */
  export const outboundSchema = ErrorDto$outboundSchema;
  /** @deprecated use `ErrorDto$Outbound` instead. */
  export type Outbound = ErrorDto$Outbound;
}

export function errorDtoToJSON(errorDto: ErrorDto): string {
  return JSON.stringify(ErrorDto$outboundSchema.parse(errorDto));
}

export function errorDtoFromJSON(
  jsonString: string,
): SafeParseResult<ErrorDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorDto' from JSON`,
  );
}
