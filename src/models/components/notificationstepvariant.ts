/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DelayRegularMetadata,
  DelayRegularMetadata$inboundSchema,
  DelayRegularMetadata$Outbound,
  DelayRegularMetadata$outboundSchema,
} from "./delayregularmetadata.js";
import {
  DelayScheduledMetadata,
  DelayScheduledMetadata$inboundSchema,
  DelayScheduledMetadata$Outbound,
  DelayScheduledMetadata$outboundSchema,
} from "./delayscheduledmetadata.js";
import {
  DigestRegularMetadata,
  DigestRegularMetadata$inboundSchema,
  DigestRegularMetadata$Outbound,
  DigestRegularMetadata$outboundSchema,
} from "./digestregularmetadata.js";
import {
  DigestTimedMetadata,
  DigestTimedMetadata$inboundSchema,
  DigestTimedMetadata$Outbound,
  DigestTimedMetadata$outboundSchema,
} from "./digesttimedmetadata.js";
import {
  MessageTemplate,
  MessageTemplate$inboundSchema,
  MessageTemplate$Outbound,
  MessageTemplate$outboundSchema,
} from "./messagetemplate.js";
import {
  StepFilter,
  StepFilter$inboundSchema,
  StepFilter$Outbound,
  StepFilter$outboundSchema,
} from "./stepfilter.js";

export type NotificationStepVariantParentId = {};

export type NotificationStepVariantMetadata =
  | DelayScheduledMetadata
  | DelayRegularMetadata
  | DigestTimedMetadata
  | DigestRegularMetadata;

export type NotificationStepVariantReplyCallback = {};

export type NotificationStepVariant = {
  id?: string | undefined;
  uuid?: string | undefined;
  name?: string | undefined;
  templateId?: string | undefined;
  active?: boolean | undefined;
  shouldStopOnFail?: boolean | undefined;
  template?: MessageTemplate | undefined;
  filters?: Array<StepFilter> | undefined;
  parentId?: NotificationStepVariantParentId | undefined;
  metadata?:
    | DelayScheduledMetadata
    | DelayRegularMetadata
    | DigestTimedMetadata
    | DigestRegularMetadata
    | undefined;
  replyCallback?: NotificationStepVariantReplyCallback | undefined;
};

/** @internal */
export const NotificationStepVariantParentId$inboundSchema: z.ZodType<
  NotificationStepVariantParentId,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NotificationStepVariantParentId$Outbound = {};

/** @internal */
export const NotificationStepVariantParentId$outboundSchema: z.ZodType<
  NotificationStepVariantParentId$Outbound,
  z.ZodTypeDef,
  NotificationStepVariantParentId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationStepVariantParentId$ {
  /** @deprecated use `NotificationStepVariantParentId$inboundSchema` instead. */
  export const inboundSchema = NotificationStepVariantParentId$inboundSchema;
  /** @deprecated use `NotificationStepVariantParentId$outboundSchema` instead. */
  export const outboundSchema = NotificationStepVariantParentId$outboundSchema;
  /** @deprecated use `NotificationStepVariantParentId$Outbound` instead. */
  export type Outbound = NotificationStepVariantParentId$Outbound;
}

export function notificationStepVariantParentIdToJSON(
  notificationStepVariantParentId: NotificationStepVariantParentId,
): string {
  return JSON.stringify(
    NotificationStepVariantParentId$outboundSchema.parse(
      notificationStepVariantParentId,
    ),
  );
}

export function notificationStepVariantParentIdFromJSON(
  jsonString: string,
): SafeParseResult<NotificationStepVariantParentId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationStepVariantParentId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationStepVariantParentId' from JSON`,
  );
}

/** @internal */
export const NotificationStepVariantMetadata$inboundSchema: z.ZodType<
  NotificationStepVariantMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([
  DelayScheduledMetadata$inboundSchema,
  DelayRegularMetadata$inboundSchema,
  DigestTimedMetadata$inboundSchema,
  DigestRegularMetadata$inboundSchema,
]);

/** @internal */
export type NotificationStepVariantMetadata$Outbound =
  | DelayScheduledMetadata$Outbound
  | DelayRegularMetadata$Outbound
  | DigestTimedMetadata$Outbound
  | DigestRegularMetadata$Outbound;

/** @internal */
export const NotificationStepVariantMetadata$outboundSchema: z.ZodType<
  NotificationStepVariantMetadata$Outbound,
  z.ZodTypeDef,
  NotificationStepVariantMetadata
> = z.union([
  DelayScheduledMetadata$outboundSchema,
  DelayRegularMetadata$outboundSchema,
  DigestTimedMetadata$outboundSchema,
  DigestRegularMetadata$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationStepVariantMetadata$ {
  /** @deprecated use `NotificationStepVariantMetadata$inboundSchema` instead. */
  export const inboundSchema = NotificationStepVariantMetadata$inboundSchema;
  /** @deprecated use `NotificationStepVariantMetadata$outboundSchema` instead. */
  export const outboundSchema = NotificationStepVariantMetadata$outboundSchema;
  /** @deprecated use `NotificationStepVariantMetadata$Outbound` instead. */
  export type Outbound = NotificationStepVariantMetadata$Outbound;
}

export function notificationStepVariantMetadataToJSON(
  notificationStepVariantMetadata: NotificationStepVariantMetadata,
): string {
  return JSON.stringify(
    NotificationStepVariantMetadata$outboundSchema.parse(
      notificationStepVariantMetadata,
    ),
  );
}

export function notificationStepVariantMetadataFromJSON(
  jsonString: string,
): SafeParseResult<NotificationStepVariantMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationStepVariantMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationStepVariantMetadata' from JSON`,
  );
}

/** @internal */
export const NotificationStepVariantReplyCallback$inboundSchema: z.ZodType<
  NotificationStepVariantReplyCallback,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NotificationStepVariantReplyCallback$Outbound = {};

/** @internal */
export const NotificationStepVariantReplyCallback$outboundSchema: z.ZodType<
  NotificationStepVariantReplyCallback$Outbound,
  z.ZodTypeDef,
  NotificationStepVariantReplyCallback
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationStepVariantReplyCallback$ {
  /** @deprecated use `NotificationStepVariantReplyCallback$inboundSchema` instead. */
  export const inboundSchema =
    NotificationStepVariantReplyCallback$inboundSchema;
  /** @deprecated use `NotificationStepVariantReplyCallback$outboundSchema` instead. */
  export const outboundSchema =
    NotificationStepVariantReplyCallback$outboundSchema;
  /** @deprecated use `NotificationStepVariantReplyCallback$Outbound` instead. */
  export type Outbound = NotificationStepVariantReplyCallback$Outbound;
}

export function notificationStepVariantReplyCallbackToJSON(
  notificationStepVariantReplyCallback: NotificationStepVariantReplyCallback,
): string {
  return JSON.stringify(
    NotificationStepVariantReplyCallback$outboundSchema.parse(
      notificationStepVariantReplyCallback,
    ),
  );
}

export function notificationStepVariantReplyCallbackFromJSON(
  jsonString: string,
): SafeParseResult<NotificationStepVariantReplyCallback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      NotificationStepVariantReplyCallback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationStepVariantReplyCallback' from JSON`,
  );
}

/** @internal */
export const NotificationStepVariant$inboundSchema: z.ZodType<
  NotificationStepVariant,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  uuid: z.string().optional(),
  name: z.string().optional(),
  _templateId: z.string().optional(),
  active: z.boolean().optional(),
  shouldStopOnFail: z.boolean().optional(),
  template: MessageTemplate$inboundSchema.optional(),
  filters: z.array(StepFilter$inboundSchema).optional(),
  _parentId: z.lazy(() => NotificationStepVariantParentId$inboundSchema)
    .optional(),
  metadata: z.union([
    DelayScheduledMetadata$inboundSchema,
    DelayRegularMetadata$inboundSchema,
    DigestTimedMetadata$inboundSchema,
    DigestRegularMetadata$inboundSchema,
  ]).optional(),
  replyCallback: z.lazy(() =>
    NotificationStepVariantReplyCallback$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_templateId": "templateId",
    "_parentId": "parentId",
  });
});

/** @internal */
export type NotificationStepVariant$Outbound = {
  _id?: string | undefined;
  uuid?: string | undefined;
  name?: string | undefined;
  _templateId?: string | undefined;
  active?: boolean | undefined;
  shouldStopOnFail?: boolean | undefined;
  template?: MessageTemplate$Outbound | undefined;
  filters?: Array<StepFilter$Outbound> | undefined;
  _parentId?: NotificationStepVariantParentId$Outbound | undefined;
  metadata?:
    | DelayScheduledMetadata$Outbound
    | DelayRegularMetadata$Outbound
    | DigestTimedMetadata$Outbound
    | DigestRegularMetadata$Outbound
    | undefined;
  replyCallback?: NotificationStepVariantReplyCallback$Outbound | undefined;
};

/** @internal */
export const NotificationStepVariant$outboundSchema: z.ZodType<
  NotificationStepVariant$Outbound,
  z.ZodTypeDef,
  NotificationStepVariant
> = z.object({
  id: z.string().optional(),
  uuid: z.string().optional(),
  name: z.string().optional(),
  templateId: z.string().optional(),
  active: z.boolean().optional(),
  shouldStopOnFail: z.boolean().optional(),
  template: MessageTemplate$outboundSchema.optional(),
  filters: z.array(StepFilter$outboundSchema).optional(),
  parentId: z.lazy(() => NotificationStepVariantParentId$outboundSchema)
    .optional(),
  metadata: z.union([
    DelayScheduledMetadata$outboundSchema,
    DelayRegularMetadata$outboundSchema,
    DigestTimedMetadata$outboundSchema,
    DigestRegularMetadata$outboundSchema,
  ]).optional(),
  replyCallback: z.lazy(() =>
    NotificationStepVariantReplyCallback$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    templateId: "_templateId",
    parentId: "_parentId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationStepVariant$ {
  /** @deprecated use `NotificationStepVariant$inboundSchema` instead. */
  export const inboundSchema = NotificationStepVariant$inboundSchema;
  /** @deprecated use `NotificationStepVariant$outboundSchema` instead. */
  export const outboundSchema = NotificationStepVariant$outboundSchema;
  /** @deprecated use `NotificationStepVariant$Outbound` instead. */
  export type Outbound = NotificationStepVariant$Outbound;
}

export function notificationStepVariantToJSON(
  notificationStepVariant: NotificationStepVariant,
): string {
  return JSON.stringify(
    NotificationStepVariant$outboundSchema.parse(notificationStepVariant),
  );
}

export function notificationStepVariantFromJSON(
  jsonString: string,
): SafeParseResult<NotificationStepVariant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationStepVariant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationStepVariant' from JSON`,
  );
}
