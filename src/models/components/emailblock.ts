/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmailBlockStyles,
  EmailBlockStyles$inboundSchema,
  EmailBlockStyles$Outbound,
  EmailBlockStyles$outboundSchema,
} from "./emailblockstyles.js";
import {
  EmailBlockTypeEnum,
  EmailBlockTypeEnum$inboundSchema,
  EmailBlockTypeEnum$outboundSchema,
} from "./emailblocktypeenum.js";

export type EmailBlock = {
  /**
   * Type of the email block
   */
  type: EmailBlockTypeEnum;
  /**
   * Content of the email block
   */
  content: string;
  /**
   * URL associated with the email block, if any
   */
  url?: string | undefined;
  /**
   * Styles applied to the email block
   */
  styles?: EmailBlockStyles | undefined;
};

/** @internal */
export const EmailBlock$inboundSchema: z.ZodType<
  EmailBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: EmailBlockTypeEnum$inboundSchema,
  content: z.string(),
  url: z.string().optional(),
  styles: EmailBlockStyles$inboundSchema.optional(),
});

/** @internal */
export type EmailBlock$Outbound = {
  type: string;
  content: string;
  url?: string | undefined;
  styles?: EmailBlockStyles$Outbound | undefined;
};

/** @internal */
export const EmailBlock$outboundSchema: z.ZodType<
  EmailBlock$Outbound,
  z.ZodTypeDef,
  EmailBlock
> = z.object({
  type: EmailBlockTypeEnum$outboundSchema,
  content: z.string(),
  url: z.string().optional(),
  styles: EmailBlockStyles$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailBlock$ {
  /** @deprecated use `EmailBlock$inboundSchema` instead. */
  export const inboundSchema = EmailBlock$inboundSchema;
  /** @deprecated use `EmailBlock$outboundSchema` instead. */
  export const outboundSchema = EmailBlock$outboundSchema;
  /** @deprecated use `EmailBlock$Outbound` instead. */
  export type Outbound = EmailBlock$Outbound;
}

export function emailBlockToJSON(emailBlock: EmailBlock): string {
  return JSON.stringify(EmailBlock$outboundSchema.parse(emailBlock));
}

export function emailBlockFromJSON(
  jsonString: string,
): SafeParseResult<EmailBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailBlock' from JSON`,
  );
}
