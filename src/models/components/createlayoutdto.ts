/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LayoutCreationSourceEnum,
  LayoutCreationSourceEnum$inboundSchema,
  LayoutCreationSourceEnum$outboundSchema,
} from "./layoutcreationsourceenum.js";

export type CreateLayoutDto = {
  /**
   * Unique identifier for the layout
   */
  layoutId: string;
  /**
   * Name of the layout
   */
  name: string;
  /**
   * Source of layout creation
   */
  source?: LayoutCreationSourceEnum | undefined;
};

/** @internal */
export const CreateLayoutDto$inboundSchema: z.ZodType<
  CreateLayoutDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  layoutId: z.string(),
  name: z.string(),
  __source: LayoutCreationSourceEnum$inboundSchema.default("dashboard"),
}).transform((v) => {
  return remap$(v, {
    "__source": "source",
  });
});

/** @internal */
export type CreateLayoutDto$Outbound = {
  layoutId: string;
  name: string;
  __source: string;
};

/** @internal */
export const CreateLayoutDto$outboundSchema: z.ZodType<
  CreateLayoutDto$Outbound,
  z.ZodTypeDef,
  CreateLayoutDto
> = z.object({
  layoutId: z.string(),
  name: z.string(),
  source: LayoutCreationSourceEnum$outboundSchema.default("dashboard"),
}).transform((v) => {
  return remap$(v, {
    source: "__source",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLayoutDto$ {
  /** @deprecated use `CreateLayoutDto$inboundSchema` instead. */
  export const inboundSchema = CreateLayoutDto$inboundSchema;
  /** @deprecated use `CreateLayoutDto$outboundSchema` instead. */
  export const outboundSchema = CreateLayoutDto$outboundSchema;
  /** @deprecated use `CreateLayoutDto$Outbound` instead. */
  export type Outbound = CreateLayoutDto$Outbound;
}

export function createLayoutDtoToJSON(
  createLayoutDto: CreateLayoutDto,
): string {
  return JSON.stringify(CreateLayoutDto$outboundSchema.parse(createLayoutDto));
}

export function createLayoutDtoFromJSON(
  jsonString: string,
): SafeParseResult<CreateLayoutDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLayoutDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLayoutDto' from JSON`,
  );
}
