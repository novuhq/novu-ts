/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    ChannelCredentials,
    ChannelCredentials$inboundSchema,
    ChannelCredentials$Outbound,
    ChannelCredentials$outboundSchema,
} from "./channelcredentials.js";
import * as z from "zod";

export type ChannelSettings = {
    /**
     * Id of the integration that is used for this channel
     */
    integrationId: string;
    /**
     * Credentials payload for the specified provider
     */
    credentials: ChannelCredentials;
    /**
     * The integration identifier
     */
    integrationIdentifier?: string | undefined;
    /**
     * The provider identifier for the credentials
     */
    providerId: number;
};

/** @internal */
export const ChannelSettings$inboundSchema: z.ZodType<ChannelSettings, z.ZodTypeDef, unknown> = z
    .object({
        _integrationId: z.string(),
        credentials: ChannelCredentials$inboundSchema,
        integrationIdentifier: z.string().optional(),
        providerId: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            _integrationId: "integrationId",
        });
    });

/** @internal */
export type ChannelSettings$Outbound = {
    _integrationId: string;
    credentials: ChannelCredentials$Outbound;
    integrationIdentifier?: string | undefined;
    providerId: number;
};

/** @internal */
export const ChannelSettings$outboundSchema: z.ZodType<
    ChannelSettings$Outbound,
    z.ZodTypeDef,
    ChannelSettings
> = z
    .object({
        integrationId: z.string(),
        credentials: ChannelCredentials$outboundSchema,
        integrationIdentifier: z.string().optional(),
        providerId: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            integrationId: "_integrationId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelSettings$ {
    /** @deprecated use `ChannelSettings$inboundSchema` instead. */
    export const inboundSchema = ChannelSettings$inboundSchema;
    /** @deprecated use `ChannelSettings$outboundSchema` instead. */
    export const outboundSchema = ChannelSettings$outboundSchema;
    /** @deprecated use `ChannelSettings$Outbound` instead. */
    export type Outbound = ChannelSettings$Outbound;
}
