/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChannelCredentialsDto,
  ChannelCredentialsDto$inboundSchema,
  ChannelCredentialsDto$Outbound,
  ChannelCredentialsDto$outboundSchema,
} from "./channelcredentialsdto.js";

export type ProviderId = {};

export type SubscriberChannelDto = {
  integrationIdentifier?: string | undefined;
  providerId: ProviderId;
  credentials: ChannelCredentialsDto;
};

/** @internal */
export const ProviderId$inboundSchema: z.ZodType<
  ProviderId,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ProviderId$Outbound = {};

/** @internal */
export const ProviderId$outboundSchema: z.ZodType<
  ProviderId$Outbound,
  z.ZodTypeDef,
  ProviderId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProviderId$ {
  /** @deprecated use `ProviderId$inboundSchema` instead. */
  export const inboundSchema = ProviderId$inboundSchema;
  /** @deprecated use `ProviderId$outboundSchema` instead. */
  export const outboundSchema = ProviderId$outboundSchema;
  /** @deprecated use `ProviderId$Outbound` instead. */
  export type Outbound = ProviderId$Outbound;
}

export function providerIdToJSON(providerId: ProviderId): string {
  return JSON.stringify(ProviderId$outboundSchema.parse(providerId));
}

export function providerIdFromJSON(
  jsonString: string,
): SafeParseResult<ProviderId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProviderId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProviderId' from JSON`,
  );
}

/** @internal */
export const SubscriberChannelDto$inboundSchema: z.ZodType<
  SubscriberChannelDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationIdentifier: z.string().optional(),
  providerId: z.lazy(() => ProviderId$inboundSchema),
  credentials: ChannelCredentialsDto$inboundSchema,
});

/** @internal */
export type SubscriberChannelDto$Outbound = {
  integrationIdentifier?: string | undefined;
  providerId: ProviderId$Outbound;
  credentials: ChannelCredentialsDto$Outbound;
};

/** @internal */
export const SubscriberChannelDto$outboundSchema: z.ZodType<
  SubscriberChannelDto$Outbound,
  z.ZodTypeDef,
  SubscriberChannelDto
> = z.object({
  integrationIdentifier: z.string().optional(),
  providerId: z.lazy(() => ProviderId$outboundSchema),
  credentials: ChannelCredentialsDto$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberChannelDto$ {
  /** @deprecated use `SubscriberChannelDto$inboundSchema` instead. */
  export const inboundSchema = SubscriberChannelDto$inboundSchema;
  /** @deprecated use `SubscriberChannelDto$outboundSchema` instead. */
  export const outboundSchema = SubscriberChannelDto$outboundSchema;
  /** @deprecated use `SubscriberChannelDto$Outbound` instead. */
  export type Outbound = SubscriberChannelDto$Outbound;
}

export function subscriberChannelDtoToJSON(
  subscriberChannelDto: SubscriberChannelDto,
): string {
  return JSON.stringify(
    SubscriberChannelDto$outboundSchema.parse(subscriberChannelDto),
  );
}

export function subscriberChannelDtoFromJSON(
  jsonString: string,
): SafeParseResult<SubscriberChannelDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriberChannelDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriberChannelDto' from JSON`,
  );
}
