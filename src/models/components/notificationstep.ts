/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DelayRegularMetadata,
  DelayRegularMetadata$inboundSchema,
  DelayRegularMetadata$Outbound,
  DelayRegularMetadata$outboundSchema,
} from "./delayregularmetadata.js";
import {
  DelayScheduledMetadata,
  DelayScheduledMetadata$inboundSchema,
  DelayScheduledMetadata$Outbound,
  DelayScheduledMetadata$outboundSchema,
} from "./delayscheduledmetadata.js";
import {
  DigestRegularMetadata,
  DigestRegularMetadata$inboundSchema,
  DigestRegularMetadata$Outbound,
  DigestRegularMetadata$outboundSchema,
} from "./digestregularmetadata.js";
import {
  DigestTimedMetadata,
  DigestTimedMetadata$inboundSchema,
  DigestTimedMetadata$Outbound,
  DigestTimedMetadata$outboundSchema,
} from "./digesttimedmetadata.js";
import {
  MessageTemplate,
  MessageTemplate$inboundSchema,
  MessageTemplate$Outbound,
  MessageTemplate$outboundSchema,
} from "./messagetemplate.js";
import {
  NotificationStepVariant,
  NotificationStepVariant$inboundSchema,
  NotificationStepVariant$Outbound,
  NotificationStepVariant$outboundSchema,
} from "./notificationstepvariant.js";
import {
  StepFilterDto,
  StepFilterDto$inboundSchema,
  StepFilterDto$Outbound,
  StepFilterDto$outboundSchema,
} from "./stepfilterdto.js";

export type ParentId = {};

export type Metadata =
  | DelayScheduledMetadata
  | DelayRegularMetadata
  | DigestTimedMetadata
  | DigestRegularMetadata;

export type ReplyCallback = {};

export type NotificationStep = {
  id?: string | undefined;
  uuid?: string | undefined;
  name?: string | undefined;
  templateId?: string | undefined;
  active?: boolean | undefined;
  shouldStopOnFail?: boolean | undefined;
  template?: MessageTemplate | undefined;
  filters?: Array<StepFilterDto> | undefined;
  parentId?: ParentId | undefined;
  metadata?:
    | DelayScheduledMetadata
    | DelayRegularMetadata
    | DigestTimedMetadata
    | DigestRegularMetadata
    | undefined;
  replyCallback?: ReplyCallback | undefined;
  variants?: NotificationStepVariant | undefined;
};

/** @internal */
export const ParentId$inboundSchema: z.ZodType<
  ParentId,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ParentId$Outbound = {};

/** @internal */
export const ParentId$outboundSchema: z.ZodType<
  ParentId$Outbound,
  z.ZodTypeDef,
  ParentId
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParentId$ {
  /** @deprecated use `ParentId$inboundSchema` instead. */
  export const inboundSchema = ParentId$inboundSchema;
  /** @deprecated use `ParentId$outboundSchema` instead. */
  export const outboundSchema = ParentId$outboundSchema;
  /** @deprecated use `ParentId$Outbound` instead. */
  export type Outbound = ParentId$Outbound;
}

export function parentIdToJSON(parentId: ParentId): string {
  return JSON.stringify(ParentId$outboundSchema.parse(parentId));
}

export function parentIdFromJSON(
  jsonString: string,
): SafeParseResult<ParentId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ParentId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ParentId' from JSON`,
  );
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.union([
  DelayScheduledMetadata$inboundSchema,
  DelayRegularMetadata$inboundSchema,
  DigestTimedMetadata$inboundSchema,
  DigestRegularMetadata$inboundSchema,
]);

/** @internal */
export type Metadata$Outbound =
  | DelayScheduledMetadata$Outbound
  | DelayRegularMetadata$Outbound
  | DigestTimedMetadata$Outbound
  | DigestRegularMetadata$Outbound;

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.union([
  DelayScheduledMetadata$outboundSchema,
  DelayRegularMetadata$outboundSchema,
  DigestTimedMetadata$outboundSchema,
  DigestRegularMetadata$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const ReplyCallback$inboundSchema: z.ZodType<
  ReplyCallback,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ReplyCallback$Outbound = {};

/** @internal */
export const ReplyCallback$outboundSchema: z.ZodType<
  ReplyCallback$Outbound,
  z.ZodTypeDef,
  ReplyCallback
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReplyCallback$ {
  /** @deprecated use `ReplyCallback$inboundSchema` instead. */
  export const inboundSchema = ReplyCallback$inboundSchema;
  /** @deprecated use `ReplyCallback$outboundSchema` instead. */
  export const outboundSchema = ReplyCallback$outboundSchema;
  /** @deprecated use `ReplyCallback$Outbound` instead. */
  export type Outbound = ReplyCallback$Outbound;
}

export function replyCallbackToJSON(replyCallback: ReplyCallback): string {
  return JSON.stringify(ReplyCallback$outboundSchema.parse(replyCallback));
}

export function replyCallbackFromJSON(
  jsonString: string,
): SafeParseResult<ReplyCallback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReplyCallback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReplyCallback' from JSON`,
  );
}

/** @internal */
export const NotificationStep$inboundSchema: z.ZodType<
  NotificationStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  uuid: z.string().optional(),
  name: z.string().optional(),
  _templateId: z.string().optional(),
  active: z.boolean().optional(),
  shouldStopOnFail: z.boolean().optional(),
  template: MessageTemplate$inboundSchema.optional(),
  filters: z.array(StepFilterDto$inboundSchema).optional(),
  _parentId: z.lazy(() => ParentId$inboundSchema).optional(),
  metadata: z.union([
    DelayScheduledMetadata$inboundSchema,
    DelayRegularMetadata$inboundSchema,
    DigestTimedMetadata$inboundSchema,
    DigestRegularMetadata$inboundSchema,
  ]).optional(),
  replyCallback: z.lazy(() => ReplyCallback$inboundSchema).optional(),
  variants: NotificationStepVariant$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "_templateId": "templateId",
    "_parentId": "parentId",
  });
});

/** @internal */
export type NotificationStep$Outbound = {
  _id?: string | undefined;
  uuid?: string | undefined;
  name?: string | undefined;
  _templateId?: string | undefined;
  active?: boolean | undefined;
  shouldStopOnFail?: boolean | undefined;
  template?: MessageTemplate$Outbound | undefined;
  filters?: Array<StepFilterDto$Outbound> | undefined;
  _parentId?: ParentId$Outbound | undefined;
  metadata?:
    | DelayScheduledMetadata$Outbound
    | DelayRegularMetadata$Outbound
    | DigestTimedMetadata$Outbound
    | DigestRegularMetadata$Outbound
    | undefined;
  replyCallback?: ReplyCallback$Outbound | undefined;
  variants?: NotificationStepVariant$Outbound | undefined;
};

/** @internal */
export const NotificationStep$outboundSchema: z.ZodType<
  NotificationStep$Outbound,
  z.ZodTypeDef,
  NotificationStep
> = z.object({
  id: z.string().optional(),
  uuid: z.string().optional(),
  name: z.string().optional(),
  templateId: z.string().optional(),
  active: z.boolean().optional(),
  shouldStopOnFail: z.boolean().optional(),
  template: MessageTemplate$outboundSchema.optional(),
  filters: z.array(StepFilterDto$outboundSchema).optional(),
  parentId: z.lazy(() => ParentId$outboundSchema).optional(),
  metadata: z.union([
    DelayScheduledMetadata$outboundSchema,
    DelayRegularMetadata$outboundSchema,
    DigestTimedMetadata$outboundSchema,
    DigestRegularMetadata$outboundSchema,
  ]).optional(),
  replyCallback: z.lazy(() => ReplyCallback$outboundSchema).optional(),
  variants: NotificationStepVariant$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    templateId: "_templateId",
    parentId: "_parentId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationStep$ {
  /** @deprecated use `NotificationStep$inboundSchema` instead. */
  export const inboundSchema = NotificationStep$inboundSchema;
  /** @deprecated use `NotificationStep$outboundSchema` instead. */
  export const outboundSchema = NotificationStep$outboundSchema;
  /** @deprecated use `NotificationStep$Outbound` instead. */
  export type Outbound = NotificationStep$Outbound;
}

export function notificationStepToJSON(
  notificationStep: NotificationStep,
): string {
  return JSON.stringify(
    NotificationStep$outboundSchema.parse(notificationStep),
  );
}

export function notificationStepFromJSON(
  jsonString: string,
): SafeParseResult<NotificationStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationStep' from JSON`,
  );
}
