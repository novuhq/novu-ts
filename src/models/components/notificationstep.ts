/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    DelayRegularMetadata,
    DelayRegularMetadata$inboundSchema,
    DelayRegularMetadata$Outbound,
    DelayRegularMetadata$outboundSchema,
} from "./delayregularmetadata.js";
import {
    DelayScheduledMetadata,
    DelayScheduledMetadata$inboundSchema,
    DelayScheduledMetadata$Outbound,
    DelayScheduledMetadata$outboundSchema,
} from "./delayscheduledmetadata.js";
import {
    DigestRegularMetadata,
    DigestRegularMetadata$inboundSchema,
    DigestRegularMetadata$Outbound,
    DigestRegularMetadata$outboundSchema,
} from "./digestregularmetadata.js";
import {
    DigestTimedMetadata,
    DigestTimedMetadata$inboundSchema,
    DigestTimedMetadata$Outbound,
    DigestTimedMetadata$outboundSchema,
} from "./digesttimedmetadata.js";
import {
    MessageTemplate,
    MessageTemplate$inboundSchema,
    MessageTemplate$Outbound,
    MessageTemplate$outboundSchema,
} from "./messagetemplate.js";
import {
    NotificationStepVariant,
    NotificationStepVariant$inboundSchema,
    NotificationStepVariant$Outbound,
    NotificationStepVariant$outboundSchema,
} from "./notificationstepvariant.js";
import {
    StepFilter,
    StepFilter$inboundSchema,
    StepFilter$Outbound,
    StepFilter$outboundSchema,
} from "./stepfilter.js";
import * as z from "zod";

export type ParentId = {};

export type Metadata =
    | DelayScheduledMetadata
    | DelayRegularMetadata
    | DigestTimedMetadata
    | DigestRegularMetadata;

export type ReplyCallback = {};

export type NotificationStep = {
    id?: string | undefined;
    parentId?: ParentId | undefined;
    templateId?: string | undefined;
    active?: boolean | undefined;
    filters?: Array<StepFilter> | undefined;
    metadata?:
        | DelayScheduledMetadata
        | DelayRegularMetadata
        | DigestTimedMetadata
        | DigestRegularMetadata
        | undefined;
    name?: string | undefined;
    replyCallback?: ReplyCallback | undefined;
    shouldStopOnFail?: boolean | undefined;
    template?: MessageTemplate | undefined;
    uuid?: string | undefined;
    variants?: NotificationStepVariant | undefined;
};

/** @internal */
export const ParentId$inboundSchema: z.ZodType<ParentId, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type ParentId$Outbound = {};

/** @internal */
export const ParentId$outboundSchema: z.ZodType<ParentId$Outbound, z.ZodTypeDef, ParentId> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParentId$ {
    /** @deprecated use `ParentId$inboundSchema` instead. */
    export const inboundSchema = ParentId$inboundSchema;
    /** @deprecated use `ParentId$outboundSchema` instead. */
    export const outboundSchema = ParentId$outboundSchema;
    /** @deprecated use `ParentId$Outbound` instead. */
    export type Outbound = ParentId$Outbound;
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown> = z.union([
    DelayScheduledMetadata$inboundSchema,
    DelayRegularMetadata$inboundSchema,
    DigestTimedMetadata$inboundSchema,
    DigestRegularMetadata$inboundSchema,
]);

/** @internal */
export type Metadata$Outbound =
    | DelayScheduledMetadata$Outbound
    | DelayRegularMetadata$Outbound
    | DigestTimedMetadata$Outbound
    | DigestRegularMetadata$Outbound;

/** @internal */
export const Metadata$outboundSchema: z.ZodType<Metadata$Outbound, z.ZodTypeDef, Metadata> =
    z.union([
        DelayScheduledMetadata$outboundSchema,
        DelayRegularMetadata$outboundSchema,
        DigestTimedMetadata$outboundSchema,
        DigestRegularMetadata$outboundSchema,
    ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
    /** @deprecated use `Metadata$inboundSchema` instead. */
    export const inboundSchema = Metadata$inboundSchema;
    /** @deprecated use `Metadata$outboundSchema` instead. */
    export const outboundSchema = Metadata$outboundSchema;
    /** @deprecated use `Metadata$Outbound` instead. */
    export type Outbound = Metadata$Outbound;
}

/** @internal */
export const ReplyCallback$inboundSchema: z.ZodType<ReplyCallback, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type ReplyCallback$Outbound = {};

/** @internal */
export const ReplyCallback$outboundSchema: z.ZodType<
    ReplyCallback$Outbound,
    z.ZodTypeDef,
    ReplyCallback
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReplyCallback$ {
    /** @deprecated use `ReplyCallback$inboundSchema` instead. */
    export const inboundSchema = ReplyCallback$inboundSchema;
    /** @deprecated use `ReplyCallback$outboundSchema` instead. */
    export const outboundSchema = ReplyCallback$outboundSchema;
    /** @deprecated use `ReplyCallback$Outbound` instead. */
    export type Outbound = ReplyCallback$Outbound;
}

/** @internal */
export const NotificationStep$inboundSchema: z.ZodType<NotificationStep, z.ZodTypeDef, unknown> = z
    .object({
        _id: z.string().optional(),
        _parentId: z.lazy(() => ParentId$inboundSchema).optional(),
        _templateId: z.string().optional(),
        active: z.boolean().optional(),
        filters: z.array(StepFilter$inboundSchema).optional(),
        metadata: z
            .union([
                DelayScheduledMetadata$inboundSchema,
                DelayRegularMetadata$inboundSchema,
                DigestTimedMetadata$inboundSchema,
                DigestRegularMetadata$inboundSchema,
            ])
            .optional(),
        name: z.string().optional(),
        replyCallback: z.lazy(() => ReplyCallback$inboundSchema).optional(),
        shouldStopOnFail: z.boolean().optional(),
        template: MessageTemplate$inboundSchema.optional(),
        uuid: z.string().optional(),
        variants: NotificationStepVariant$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            _id: "id",
            _parentId: "parentId",
            _templateId: "templateId",
        });
    });

/** @internal */
export type NotificationStep$Outbound = {
    _id?: string | undefined;
    _parentId?: ParentId$Outbound | undefined;
    _templateId?: string | undefined;
    active?: boolean | undefined;
    filters?: Array<StepFilter$Outbound> | undefined;
    metadata?:
        | DelayScheduledMetadata$Outbound
        | DelayRegularMetadata$Outbound
        | DigestTimedMetadata$Outbound
        | DigestRegularMetadata$Outbound
        | undefined;
    name?: string | undefined;
    replyCallback?: ReplyCallback$Outbound | undefined;
    shouldStopOnFail?: boolean | undefined;
    template?: MessageTemplate$Outbound | undefined;
    uuid?: string | undefined;
    variants?: NotificationStepVariant$Outbound | undefined;
};

/** @internal */
export const NotificationStep$outboundSchema: z.ZodType<
    NotificationStep$Outbound,
    z.ZodTypeDef,
    NotificationStep
> = z
    .object({
        id: z.string().optional(),
        parentId: z.lazy(() => ParentId$outboundSchema).optional(),
        templateId: z.string().optional(),
        active: z.boolean().optional(),
        filters: z.array(StepFilter$outboundSchema).optional(),
        metadata: z
            .union([
                DelayScheduledMetadata$outboundSchema,
                DelayRegularMetadata$outboundSchema,
                DigestTimedMetadata$outboundSchema,
                DigestRegularMetadata$outboundSchema,
            ])
            .optional(),
        name: z.string().optional(),
        replyCallback: z.lazy(() => ReplyCallback$outboundSchema).optional(),
        shouldStopOnFail: z.boolean().optional(),
        template: MessageTemplate$outboundSchema.optional(),
        uuid: z.string().optional(),
        variants: NotificationStepVariant$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            id: "_id",
            parentId: "_parentId",
            templateId: "_templateId",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationStep$ {
    /** @deprecated use `NotificationStep$inboundSchema` instead. */
    export const inboundSchema = NotificationStep$inboundSchema;
    /** @deprecated use `NotificationStep$outboundSchema` instead. */
    export const outboundSchema = NotificationStep$outboundSchema;
    /** @deprecated use `NotificationStep$Outbound` instead. */
    export type Outbound = NotificationStep$Outbound;
}
