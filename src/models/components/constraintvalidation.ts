/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Five = string | number | boolean | { [k: string]: any };

export type Four = {};

/**
 * Value that failed validation
 */
export type Value =
  | Four
  | string
  | number
  | boolean
  | Array<string | number | boolean | { [k: string]: any } | null>;

export type ConstraintValidation = {
  /**
   * List of validation error messages
   */
  messages: Array<string>;
  /**
   * Value that failed validation
   */
  value?:
    | Four
    | string
    | number
    | boolean
    | Array<string | number | boolean | { [k: string]: any } | null>
    | null
    | undefined;
};

/** @internal */
export const Five$inboundSchema: z.ZodType<Five, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/** @internal */
export type Five$Outbound = string | number | boolean | { [k: string]: any };

/** @internal */
export const Five$outboundSchema: z.ZodType<Five$Outbound, z.ZodTypeDef, Five> =
  z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Five$ {
  /** @deprecated use `Five$inboundSchema` instead. */
  export const inboundSchema = Five$inboundSchema;
  /** @deprecated use `Five$outboundSchema` instead. */
  export const outboundSchema = Five$outboundSchema;
  /** @deprecated use `Five$Outbound` instead. */
  export type Outbound = Five$Outbound;
}

export function fiveToJSON(five: Five): string {
  return JSON.stringify(Five$outboundSchema.parse(five));
}

export function fiveFromJSON(
  jsonString: string,
): SafeParseResult<Five, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Five$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Five' from JSON`,
  );
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Four$Outbound = {};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Four$inboundSchema),
    z.string(),
    z.number(),
    z.boolean(),
    z.array(
      z.nullable(
        z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
      ),
    ),
  ]);

/** @internal */
export type Value$Outbound =
  | Four$Outbound
  | string
  | number
  | boolean
  | Array<string | number | boolean | { [k: string]: any } | null>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([
  z.lazy(() => Four$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
  z.array(
    z.nullable(
      z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
    ),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const ConstraintValidation$inboundSchema: z.ZodType<
  ConstraintValidation,
  z.ZodTypeDef,
  unknown
> = z.object({
  messages: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(
        z.nullable(
          z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
        ),
      ),
    ]),
  ).optional(),
});

/** @internal */
export type ConstraintValidation$Outbound = {
  messages: Array<string>;
  value?:
    | Four$Outbound
    | string
    | number
    | boolean
    | Array<string | number | boolean | { [k: string]: any } | null>
    | null
    | undefined;
};

/** @internal */
export const ConstraintValidation$outboundSchema: z.ZodType<
  ConstraintValidation$Outbound,
  z.ZodTypeDef,
  ConstraintValidation
> = z.object({
  messages: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.lazy(() => Four$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
      z.array(
        z.nullable(
          z.union([z.string(), z.number(), z.boolean(), z.record(z.any())]),
        ),
      ),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConstraintValidation$ {
  /** @deprecated use `ConstraintValidation$inboundSchema` instead. */
  export const inboundSchema = ConstraintValidation$inboundSchema;
  /** @deprecated use `ConstraintValidation$outboundSchema` instead. */
  export const outboundSchema = ConstraintValidation$outboundSchema;
  /** @deprecated use `ConstraintValidation$Outbound` instead. */
  export type Outbound = ConstraintValidation$Outbound;
}

export function constraintValidationToJSON(
  constraintValidation: ConstraintValidation,
): string {
  return JSON.stringify(
    ConstraintValidation$outboundSchema.parse(constraintValidation),
  );
}

export function constraintValidationFromJSON(
  jsonString: string,
): SafeParseResult<ConstraintValidation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConstraintValidation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConstraintValidation' from JSON`,
  );
}
