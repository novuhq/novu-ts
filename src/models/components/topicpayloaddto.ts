/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Type = {
  Subscriber: "Subscriber",
  Topic: "Topic",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type TopicPayloadDto = {
  topicKey: string;
  type: Type;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const TopicPayloadDto$inboundSchema: z.ZodType<
  TopicPayloadDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  topicKey: z.string(),
  type: Type$inboundSchema,
});

/** @internal */
export type TopicPayloadDto$Outbound = {
  topicKey: string;
  type: string;
};

/** @internal */
export const TopicPayloadDto$outboundSchema: z.ZodType<
  TopicPayloadDto$Outbound,
  z.ZodTypeDef,
  TopicPayloadDto
> = z.object({
  topicKey: z.string(),
  type: Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicPayloadDto$ {
  /** @deprecated use `TopicPayloadDto$inboundSchema` instead. */
  export const inboundSchema = TopicPayloadDto$inboundSchema;
  /** @deprecated use `TopicPayloadDto$outboundSchema` instead. */
  export const outboundSchema = TopicPayloadDto$outboundSchema;
  /** @deprecated use `TopicPayloadDto$Outbound` instead. */
  export type Outbound = TopicPayloadDto$Outbound;
}

export function topicPayloadDtoToJSON(
  topicPayloadDto: TopicPayloadDto,
): string {
  return JSON.stringify(TopicPayloadDto$outboundSchema.parse(topicPayloadDto));
}

export function topicPayloadDtoFromJSON(
  jsonString: string,
): SafeParseResult<TopicPayloadDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicPayloadDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicPayloadDto' from JSON`,
  );
}
