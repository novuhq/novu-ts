/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriberDto = {
  /**
   * The identifier of the subscriber
   */
  id: string;
  /**
   * The external identifier of the subscriber
   */
  subscriberId: string;
  /**
   * The avatar URL of the subscriber
   */
  avatar?: string | null | undefined;
  /**
   * The first name of the subscriber
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the subscriber
   */
  lastName?: string | null | undefined;
  /**
   * The email of the subscriber
   */
  email?: string | null | undefined;
};

/** @internal */
export const SubscriberDto$inboundSchema: z.ZodType<
  SubscriberDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  subscriberId: z.string(),
  avatar: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type SubscriberDto$Outbound = {
  _id: string;
  subscriberId: string;
  avatar?: string | null | undefined;
  firstName?: string | null | undefined;
  lastName?: string | null | undefined;
  email?: string | null | undefined;
};

/** @internal */
export const SubscriberDto$outboundSchema: z.ZodType<
  SubscriberDto$Outbound,
  z.ZodTypeDef,
  SubscriberDto
> = z.object({
  id: z.string(),
  subscriberId: z.string(),
  avatar: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriberDto$ {
  /** @deprecated use `SubscriberDto$inboundSchema` instead. */
  export const inboundSchema = SubscriberDto$inboundSchema;
  /** @deprecated use `SubscriberDto$outboundSchema` instead. */
  export const outboundSchema = SubscriberDto$outboundSchema;
  /** @deprecated use `SubscriberDto$Outbound` instead. */
  export type Outbound = SubscriberDto$Outbound;
}

export function subscriberDtoToJSON(subscriberDto: SubscriberDto): string {
  return JSON.stringify(SubscriberDto$outboundSchema.parse(subscriberDto));
}

export function subscriberDtoFromJSON(
  jsonString: string,
): SafeParseResult<SubscriberDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriberDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriberDto' from JSON`,
  );
}
