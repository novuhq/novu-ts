/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

/**
 * Control values for the Custom step
 */
export type CustomStepUpsertDtoControlValues = {
  /**
   * Custom control values for the step.
   */
  custom?: { [k: string]: any } | undefined;
};

export type CustomStepUpsertDto = {
  /**
   * Unique identifier of the step
   */
  id?: string | undefined;
  /**
   * Name of the step
   */
  name: string;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Control values for the Custom step
   */
  controlValues?: CustomStepUpsertDtoControlValues | null | undefined;
};

/** @internal */
export const CustomStepUpsertDtoControlValues$inboundSchema: z.ZodType<
  CustomStepUpsertDtoControlValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  custom: z.record(z.any()).optional(),
});

/** @internal */
export type CustomStepUpsertDtoControlValues$Outbound = {
  custom?: { [k: string]: any } | undefined;
};

/** @internal */
export const CustomStepUpsertDtoControlValues$outboundSchema: z.ZodType<
  CustomStepUpsertDtoControlValues$Outbound,
  z.ZodTypeDef,
  CustomStepUpsertDtoControlValues
> = z.object({
  custom: z.record(z.any()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomStepUpsertDtoControlValues$ {
  /** @deprecated use `CustomStepUpsertDtoControlValues$inboundSchema` instead. */
  export const inboundSchema = CustomStepUpsertDtoControlValues$inboundSchema;
  /** @deprecated use `CustomStepUpsertDtoControlValues$outboundSchema` instead. */
  export const outboundSchema = CustomStepUpsertDtoControlValues$outboundSchema;
  /** @deprecated use `CustomStepUpsertDtoControlValues$Outbound` instead. */
  export type Outbound = CustomStepUpsertDtoControlValues$Outbound;
}

export function customStepUpsertDtoControlValuesToJSON(
  customStepUpsertDtoControlValues: CustomStepUpsertDtoControlValues,
): string {
  return JSON.stringify(
    CustomStepUpsertDtoControlValues$outboundSchema.parse(
      customStepUpsertDtoControlValues,
    ),
  );
}

export function customStepUpsertDtoControlValuesFromJSON(
  jsonString: string,
): SafeParseResult<CustomStepUpsertDtoControlValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomStepUpsertDtoControlValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomStepUpsertDtoControlValues' from JSON`,
  );
}

/** @internal */
export const CustomStepUpsertDto$inboundSchema: z.ZodType<
  CustomStepUpsertDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$inboundSchema,
  controlValues: z.nullable(
    z.lazy(() => CustomStepUpsertDtoControlValues$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type CustomStepUpsertDto$Outbound = {
  _id?: string | undefined;
  name: string;
  type: string;
  controlValues?: CustomStepUpsertDtoControlValues$Outbound | null | undefined;
};

/** @internal */
export const CustomStepUpsertDto$outboundSchema: z.ZodType<
  CustomStepUpsertDto$Outbound,
  z.ZodTypeDef,
  CustomStepUpsertDto
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  type: StepTypeEnum$outboundSchema,
  controlValues: z.nullable(
    z.lazy(() => CustomStepUpsertDtoControlValues$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomStepUpsertDto$ {
  /** @deprecated use `CustomStepUpsertDto$inboundSchema` instead. */
  export const inboundSchema = CustomStepUpsertDto$inboundSchema;
  /** @deprecated use `CustomStepUpsertDto$outboundSchema` instead. */
  export const outboundSchema = CustomStepUpsertDto$outboundSchema;
  /** @deprecated use `CustomStepUpsertDto$Outbound` instead. */
  export type Outbound = CustomStepUpsertDto$Outbound;
}

export function customStepUpsertDtoToJSON(
  customStepUpsertDto: CustomStepUpsertDto,
): string {
  return JSON.stringify(
    CustomStepUpsertDto$outboundSchema.parse(customStepUpsertDto),
  );
}

export function customStepUpsertDtoFromJSON(
  jsonString: string,
): SafeParseResult<CustomStepUpsertDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomStepUpsertDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomStepUpsertDto' from JSON`,
  );
}
