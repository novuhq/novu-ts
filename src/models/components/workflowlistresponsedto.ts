/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResourceOriginEnum,
  ResourceOriginEnum$inboundSchema,
  ResourceOriginEnum$outboundSchema,
} from "./resourceoriginenum.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";
import {
  WorkflowStatusEnum,
  WorkflowStatusEnum$inboundSchema,
  WorkflowStatusEnum$outboundSchema,
} from "./workflowstatusenum.js";

/**
 * User last name
 */
export type WorkflowListResponseDtoLastName = {};

/**
 * User who last updated the workflow
 */
export type WorkflowListResponseDtoUpdatedBy = {
  /**
   * User ID
   */
  id: string;
  /**
   * User first name
   */
  firstName?: string | null | undefined;
  /**
   * User last name
   */
  lastName?: WorkflowListResponseDtoLastName | null | undefined;
  /**
   * User external ID
   */
  externalId?: string | null | undefined;
};

export type WorkflowListResponseDto = {
  /**
   * Name of the workflow
   */
  name: string;
  /**
   * Tags associated with the workflow
   */
  tags?: Array<string> | undefined;
  /**
   * Last updated timestamp
   */
  updatedAt: string;
  /**
   * Creation timestamp
   */
  createdAt: string;
  /**
   * User who last updated the workflow
   */
  updatedBy?: WorkflowListResponseDtoUpdatedBy | null | undefined;
  /**
   * Unique database identifier
   */
  id: string;
  /**
   * Workflow identifier
   */
  workflowId: string;
  /**
   * Workflow slug
   */
  slug: string;
  /**
   * Status of the workflow
   */
  status: WorkflowStatusEnum;
  /**
   * Origin of the workflow
   */
  origin: ResourceOriginEnum;
  /**
   * Timestamp of the last workflow trigger
   */
  lastTriggeredAt?: string | null | undefined;
  /**
   * Overview of step types in the workflow
   */
  stepTypeOverviews: Array<StepTypeEnum>;
  /**
   * Is translation enabled for the workflow
   */
  isTranslationEnabled: boolean;
};

/** @internal */
export const WorkflowListResponseDtoLastName$inboundSchema: z.ZodType<
  WorkflowListResponseDtoLastName,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type WorkflowListResponseDtoLastName$Outbound = {};

/** @internal */
export const WorkflowListResponseDtoLastName$outboundSchema: z.ZodType<
  WorkflowListResponseDtoLastName$Outbound,
  z.ZodTypeDef,
  WorkflowListResponseDtoLastName
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowListResponseDtoLastName$ {
  /** @deprecated use `WorkflowListResponseDtoLastName$inboundSchema` instead. */
  export const inboundSchema = WorkflowListResponseDtoLastName$inboundSchema;
  /** @deprecated use `WorkflowListResponseDtoLastName$outboundSchema` instead. */
  export const outboundSchema = WorkflowListResponseDtoLastName$outboundSchema;
  /** @deprecated use `WorkflowListResponseDtoLastName$Outbound` instead. */
  export type Outbound = WorkflowListResponseDtoLastName$Outbound;
}

export function workflowListResponseDtoLastNameToJSON(
  workflowListResponseDtoLastName: WorkflowListResponseDtoLastName,
): string {
  return JSON.stringify(
    WorkflowListResponseDtoLastName$outboundSchema.parse(
      workflowListResponseDtoLastName,
    ),
  );
}

export function workflowListResponseDtoLastNameFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowListResponseDtoLastName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowListResponseDtoLastName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowListResponseDtoLastName' from JSON`,
  );
}

/** @internal */
export const WorkflowListResponseDtoUpdatedBy$inboundSchema: z.ZodType<
  WorkflowListResponseDtoUpdatedBy,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(
    z.lazy(() => WorkflowListResponseDtoLastName$inboundSchema),
  ).optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type WorkflowListResponseDtoUpdatedBy$Outbound = {
  _id: string;
  firstName?: string | null | undefined;
  lastName?: WorkflowListResponseDtoLastName$Outbound | null | undefined;
  externalId?: string | null | undefined;
};

/** @internal */
export const WorkflowListResponseDtoUpdatedBy$outboundSchema: z.ZodType<
  WorkflowListResponseDtoUpdatedBy$Outbound,
  z.ZodTypeDef,
  WorkflowListResponseDtoUpdatedBy
> = z.object({
  id: z.string(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(
    z.lazy(() => WorkflowListResponseDtoLastName$outboundSchema),
  ).optional(),
  externalId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowListResponseDtoUpdatedBy$ {
  /** @deprecated use `WorkflowListResponseDtoUpdatedBy$inboundSchema` instead. */
  export const inboundSchema = WorkflowListResponseDtoUpdatedBy$inboundSchema;
  /** @deprecated use `WorkflowListResponseDtoUpdatedBy$outboundSchema` instead. */
  export const outboundSchema = WorkflowListResponseDtoUpdatedBy$outboundSchema;
  /** @deprecated use `WorkflowListResponseDtoUpdatedBy$Outbound` instead. */
  export type Outbound = WorkflowListResponseDtoUpdatedBy$Outbound;
}

export function workflowListResponseDtoUpdatedByToJSON(
  workflowListResponseDtoUpdatedBy: WorkflowListResponseDtoUpdatedBy,
): string {
  return JSON.stringify(
    WorkflowListResponseDtoUpdatedBy$outboundSchema.parse(
      workflowListResponseDtoUpdatedBy,
    ),
  );
}

export function workflowListResponseDtoUpdatedByFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowListResponseDtoUpdatedBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowListResponseDtoUpdatedBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowListResponseDtoUpdatedBy' from JSON`,
  );
}

/** @internal */
export const WorkflowListResponseDto$inboundSchema: z.ZodType<
  WorkflowListResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  tags: z.array(z.string()).optional(),
  updatedAt: z.string(),
  createdAt: z.string(),
  updatedBy: z.nullable(
    z.lazy(() => WorkflowListResponseDtoUpdatedBy$inboundSchema),
  ).optional(),
  _id: z.string(),
  workflowId: z.string(),
  slug: z.string(),
  status: WorkflowStatusEnum$inboundSchema,
  origin: ResourceOriginEnum$inboundSchema,
  lastTriggeredAt: z.nullable(z.string()).optional(),
  stepTypeOverviews: z.array(StepTypeEnum$inboundSchema),
  isTranslationEnabled: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type WorkflowListResponseDto$Outbound = {
  name: string;
  tags?: Array<string> | undefined;
  updatedAt: string;
  createdAt: string;
  updatedBy?: WorkflowListResponseDtoUpdatedBy$Outbound | null | undefined;
  _id: string;
  workflowId: string;
  slug: string;
  status: string;
  origin: string;
  lastTriggeredAt?: string | null | undefined;
  stepTypeOverviews: Array<string>;
  isTranslationEnabled: boolean;
};

/** @internal */
export const WorkflowListResponseDto$outboundSchema: z.ZodType<
  WorkflowListResponseDto$Outbound,
  z.ZodTypeDef,
  WorkflowListResponseDto
> = z.object({
  name: z.string(),
  tags: z.array(z.string()).optional(),
  updatedAt: z.string(),
  createdAt: z.string(),
  updatedBy: z.nullable(
    z.lazy(() => WorkflowListResponseDtoUpdatedBy$outboundSchema),
  ).optional(),
  id: z.string(),
  workflowId: z.string(),
  slug: z.string(),
  status: WorkflowStatusEnum$outboundSchema,
  origin: ResourceOriginEnum$outboundSchema,
  lastTriggeredAt: z.nullable(z.string()).optional(),
  stepTypeOverviews: z.array(StepTypeEnum$outboundSchema),
  isTranslationEnabled: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowListResponseDto$ {
  /** @deprecated use `WorkflowListResponseDto$inboundSchema` instead. */
  export const inboundSchema = WorkflowListResponseDto$inboundSchema;
  /** @deprecated use `WorkflowListResponseDto$outboundSchema` instead. */
  export const outboundSchema = WorkflowListResponseDto$outboundSchema;
  /** @deprecated use `WorkflowListResponseDto$Outbound` instead. */
  export type Outbound = WorkflowListResponseDto$Outbound;
}

export function workflowListResponseDtoToJSON(
  workflowListResponseDto: WorkflowListResponseDto,
): string {
  return JSON.stringify(
    WorkflowListResponseDto$outboundSchema.parse(workflowListResponseDto),
  );
}

export function workflowListResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowListResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowListResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowListResponseDto' from JSON`,
  );
}
