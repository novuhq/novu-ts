/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type GetTenantResponseDtoData = {};

export type GetTenantResponseDto = {
    environmentId: string;
    id: string;
    createdAt: string;
    data?: GetTenantResponseDtoData | undefined;
    identifier: string;
    name?: string | undefined;
    updatedAt: string;
};

/** @internal */
export const GetTenantResponseDtoData$inboundSchema: z.ZodType<
    GetTenantResponseDtoData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type GetTenantResponseDtoData$Outbound = {};

/** @internal */
export const GetTenantResponseDtoData$outboundSchema: z.ZodType<
    GetTenantResponseDtoData$Outbound,
    z.ZodTypeDef,
    GetTenantResponseDtoData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantResponseDtoData$ {
    /** @deprecated use `GetTenantResponseDtoData$inboundSchema` instead. */
    export const inboundSchema = GetTenantResponseDtoData$inboundSchema;
    /** @deprecated use `GetTenantResponseDtoData$outboundSchema` instead. */
    export const outboundSchema = GetTenantResponseDtoData$outboundSchema;
    /** @deprecated use `GetTenantResponseDtoData$Outbound` instead. */
    export type Outbound = GetTenantResponseDtoData$Outbound;
}

/** @internal */
export const GetTenantResponseDto$inboundSchema: z.ZodType<
    GetTenantResponseDto,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        _environmentId: z.string(),
        _id: z.string(),
        createdAt: z.string(),
        data: z.lazy(() => GetTenantResponseDtoData$inboundSchema).optional(),
        identifier: z.string(),
        name: z.string().optional(),
        updatedAt: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            _environmentId: "environmentId",
            _id: "id",
        });
    });

/** @internal */
export type GetTenantResponseDto$Outbound = {
    _environmentId: string;
    _id: string;
    createdAt: string;
    data?: GetTenantResponseDtoData$Outbound | undefined;
    identifier: string;
    name?: string | undefined;
    updatedAt: string;
};

/** @internal */
export const GetTenantResponseDto$outboundSchema: z.ZodType<
    GetTenantResponseDto$Outbound,
    z.ZodTypeDef,
    GetTenantResponseDto
> = z
    .object({
        environmentId: z.string(),
        id: z.string(),
        createdAt: z.string(),
        data: z.lazy(() => GetTenantResponseDtoData$outboundSchema).optional(),
        identifier: z.string(),
        name: z.string().optional(),
        updatedAt: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            environmentId: "_environmentId",
            id: "_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTenantResponseDto$ {
    /** @deprecated use `GetTenantResponseDto$inboundSchema` instead. */
    export const inboundSchema = GetTenantResponseDto$inboundSchema;
    /** @deprecated use `GetTenantResponseDto$outboundSchema` instead. */
    export const outboundSchema = GetTenantResponseDto$outboundSchema;
    /** @deprecated use `GetTenantResponseDto$Outbound` instead. */
    export type Outbound = GetTenantResponseDto$Outbound;
}
